// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package edam

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

//This enumeration defines the possible permission levels for a user.
//Free accounts will have a level of NORMAL and paid Premium accounts
//will have a level of PREMIUM.
type PrivilegeLevel int64
const (
  PrivilegeLevel_NORMAL PrivilegeLevel = 1
  PrivilegeLevel_PREMIUM PrivilegeLevel = 3
  PrivilegeLevel_VIP PrivilegeLevel = 5
  PrivilegeLevel_MANAGER PrivilegeLevel = 7
  PrivilegeLevel_SUPPORT PrivilegeLevel = 8
  PrivilegeLevel_ADMIN PrivilegeLevel = 9
)

func (p PrivilegeLevel) String() string {
  switch p {
  case PrivilegeLevel_NORMAL: return "NORMAL"
  case PrivilegeLevel_PREMIUM: return "PREMIUM"
  case PrivilegeLevel_VIP: return "VIP"
  case PrivilegeLevel_MANAGER: return "MANAGER"
  case PrivilegeLevel_SUPPORT: return "SUPPORT"
  case PrivilegeLevel_ADMIN: return "ADMIN"
  }
  return "<UNSET>"
}

func PrivilegeLevelFromString(s string) (PrivilegeLevel, error) {
  switch s {
  case "NORMAL": return PrivilegeLevel_NORMAL, nil 
  case "PREMIUM": return PrivilegeLevel_PREMIUM, nil 
  case "VIP": return PrivilegeLevel_VIP, nil 
  case "MANAGER": return PrivilegeLevel_MANAGER, nil 
  case "SUPPORT": return PrivilegeLevel_SUPPORT, nil 
  case "ADMIN": return PrivilegeLevel_ADMIN, nil 
  }
  return PrivilegeLevel(0), fmt.Errorf("not a valid PrivilegeLevel string")
}


func PrivilegeLevelPtr(v PrivilegeLevel) *PrivilegeLevel { return &v }

func (p PrivilegeLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivilegeLevel) UnmarshalText(text []byte) error {
q, err := PrivilegeLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivilegeLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivilegeLevel(v)
return nil
}

func (p * PrivilegeLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//This enumeration defines the possible tiers of service that a user may have. A
//ServiceLevel of BUSINESS signifies a business-only account, which can never be any
//other ServiceLevel.
type ServiceLevel int64
const (
  ServiceLevel_BASIC ServiceLevel = 1
  ServiceLevel_PLUS ServiceLevel = 2
  ServiceLevel_PREMIUM ServiceLevel = 3
  ServiceLevel_BUSINESS ServiceLevel = 4
)

func (p ServiceLevel) String() string {
  switch p {
  case ServiceLevel_BASIC: return "BASIC"
  case ServiceLevel_PLUS: return "PLUS"
  case ServiceLevel_PREMIUM: return "PREMIUM"
  case ServiceLevel_BUSINESS: return "BUSINESS"
  }
  return "<UNSET>"
}

func ServiceLevelFromString(s string) (ServiceLevel, error) {
  switch s {
  case "BASIC": return ServiceLevel_BASIC, nil 
  case "PLUS": return ServiceLevel_PLUS, nil 
  case "PREMIUM": return ServiceLevel_PREMIUM, nil 
  case "BUSINESS": return ServiceLevel_BUSINESS, nil 
  }
  return ServiceLevel(0), fmt.Errorf("not a valid ServiceLevel string")
}


func ServiceLevelPtr(v ServiceLevel) *ServiceLevel { return &v }

func (p ServiceLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ServiceLevel) UnmarshalText(text []byte) error {
q, err := ServiceLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ServiceLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ServiceLevel(v)
return nil
}

func (p * ServiceLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Every search query is specified as a sequence of characters.
//Currently, only the USER query format is supported.
type QueryFormat int64
const (
  QueryFormat_USER QueryFormat = 1
  QueryFormat_SEXP QueryFormat = 2
)

func (p QueryFormat) String() string {
  switch p {
  case QueryFormat_USER: return "USER"
  case QueryFormat_SEXP: return "SEXP"
  }
  return "<UNSET>"
}

func QueryFormatFromString(s string) (QueryFormat, error) {
  switch s {
  case "USER": return QueryFormat_USER, nil 
  case "SEXP": return QueryFormat_SEXP, nil 
  }
  return QueryFormat(0), fmt.Errorf("not a valid QueryFormat string")
}


func QueryFormatPtr(v QueryFormat) *QueryFormat { return &v }

func (p QueryFormat) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *QueryFormat) UnmarshalText(text []byte) error {
q, err := QueryFormatFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *QueryFormat) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = QueryFormat(v)
return nil
}

func (p * QueryFormat) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//This enumeration defines the possible sort ordering for notes when
//they are returned from a search result.
type NoteSortOrder int64
const (
  NoteSortOrder_CREATED NoteSortOrder = 1
  NoteSortOrder_UPDATED NoteSortOrder = 2
  NoteSortOrder_RELEVANCE NoteSortOrder = 3
  NoteSortOrder_UPDATE_SEQUENCE_NUMBER NoteSortOrder = 4
  NoteSortOrder_TITLE NoteSortOrder = 5
)

func (p NoteSortOrder) String() string {
  switch p {
  case NoteSortOrder_CREATED: return "CREATED"
  case NoteSortOrder_UPDATED: return "UPDATED"
  case NoteSortOrder_RELEVANCE: return "RELEVANCE"
  case NoteSortOrder_UPDATE_SEQUENCE_NUMBER: return "UPDATE_SEQUENCE_NUMBER"
  case NoteSortOrder_TITLE: return "TITLE"
  }
  return "<UNSET>"
}

func NoteSortOrderFromString(s string) (NoteSortOrder, error) {
  switch s {
  case "CREATED": return NoteSortOrder_CREATED, nil 
  case "UPDATED": return NoteSortOrder_UPDATED, nil 
  case "RELEVANCE": return NoteSortOrder_RELEVANCE, nil 
  case "UPDATE_SEQUENCE_NUMBER": return NoteSortOrder_UPDATE_SEQUENCE_NUMBER, nil 
  case "TITLE": return NoteSortOrder_TITLE, nil 
  }
  return NoteSortOrder(0), fmt.Errorf("not a valid NoteSortOrder string")
}


func NoteSortOrderPtr(v NoteSortOrder) *NoteSortOrder { return &v }

func (p NoteSortOrder) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NoteSortOrder) UnmarshalText(text []byte) error {
q, err := NoteSortOrderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NoteSortOrder) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NoteSortOrder(v)
return nil
}

func (p * NoteSortOrder) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//This enumeration defines the possible states of a premium account
//
//NONE:    the user has never attempted to become a premium subscriber
//
//PENDING: the user has requested a premium account but their charge has not
//  been confirmed
//
//ACTIVE:  the user has been charged and their premium account is in good
// standing
//
//FAILED:  the system attempted to charge the was denied. We will periodically attempt to
// re-validate their order.
//
//CANCELLATION_PENDING: the user has requested that no further charges be made
//  but the current account is still active.
//
//CANCELED: the premium account was canceled either because of failure to pay
//  or user cancelation. No more attempts will be made to activate the account.
type PremiumOrderStatus int64
const (
  PremiumOrderStatus_NONE PremiumOrderStatus = 0
  PremiumOrderStatus_PENDING PremiumOrderStatus = 1
  PremiumOrderStatus_ACTIVE PremiumOrderStatus = 2
  PremiumOrderStatus_FAILED PremiumOrderStatus = 3
  PremiumOrderStatus_CANCELLATION_PENDING PremiumOrderStatus = 4
  PremiumOrderStatus_CANCELED PremiumOrderStatus = 5
)

func (p PremiumOrderStatus) String() string {
  switch p {
  case PremiumOrderStatus_NONE: return "NONE"
  case PremiumOrderStatus_PENDING: return "PENDING"
  case PremiumOrderStatus_ACTIVE: return "ACTIVE"
  case PremiumOrderStatus_FAILED: return "FAILED"
  case PremiumOrderStatus_CANCELLATION_PENDING: return "CANCELLATION_PENDING"
  case PremiumOrderStatus_CANCELED: return "CANCELED"
  }
  return "<UNSET>"
}

func PremiumOrderStatusFromString(s string) (PremiumOrderStatus, error) {
  switch s {
  case "NONE": return PremiumOrderStatus_NONE, nil 
  case "PENDING": return PremiumOrderStatus_PENDING, nil 
  case "ACTIVE": return PremiumOrderStatus_ACTIVE, nil 
  case "FAILED": return PremiumOrderStatus_FAILED, nil 
  case "CANCELLATION_PENDING": return PremiumOrderStatus_CANCELLATION_PENDING, nil 
  case "CANCELED": return PremiumOrderStatus_CANCELED, nil 
  }
  return PremiumOrderStatus(0), fmt.Errorf("not a valid PremiumOrderStatus string")
}


func PremiumOrderStatusPtr(v PremiumOrderStatus) *PremiumOrderStatus { return &v }

func (p PremiumOrderStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PremiumOrderStatus) UnmarshalText(text []byte) error {
q, err := PremiumOrderStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PremiumOrderStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PremiumOrderStatus(v)
return nil
}

func (p * PremiumOrderStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Privilege levels for accessing shared notebooks.
//
//Note that as of 2014-04, FULL_ACCESS is synonymous with BUSINESS_FULL_ACCESS.  If a
//user is a member of a business and has FULL_ACCESS privileges, then they will
//automatically be granted BUSINESS_FULL_ACCESS for notebooks in their business.  This
//will happen implicitly when they attempt to access the corresponding notebooks of
//the business.  BUSINESS_FULL_ACCESS is therefore deprecated.
//
//READ_NOTEBOOK: Recipient is able to read the contents of the shared notebook
//  but does not have access to information about other recipients of the
//  notebook or the activity stream information.
//
//MODIFY_NOTEBOOK_PLUS_ACTIVITY: Recipient has rights to read and modify the contents
//  of the shared notebook, including the right to move notes to the trash and to create
//  notes in the notebook.  The recipient can also access information about other
//  recipients and the activity stream.
//
//READ_NOTEBOOK_PLUS_ACTIVITY: Recipient has READ_NOTEBOOK rights and can also
//  access information about other recipients and the activity stream.
//
//GROUP: If the user belongs to a group, such as a Business, that has a defined
//  privilege level, use the privilege level of the group as the privilege for
//  the individual.
//
//FULL_ACCESS: Recipient has full rights to the shared notebook and recipient lists,
//  including privilege to revoke and create invitations and to change privilege
//  levels on invitations for individuals.  For members of a business, FULL_ACCESS
//  privilege on business notebooks also grants the ability to change how the notebook
//  will appear when shared with the business, including the rights to share and
//  unshare the notebook with the business.
//
//BUSINESS_FULL_ACCESS: Deprecated.  See the note above about BUSINESS_FULL_ACCESS and
//  FULL_ACCESS being synonymous.
type SharedNotebookPrivilegeLevel int64
const (
  SharedNotebookPrivilegeLevel_READ_NOTEBOOK SharedNotebookPrivilegeLevel = 0
  SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY SharedNotebookPrivilegeLevel = 1
  SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY SharedNotebookPrivilegeLevel = 2
  SharedNotebookPrivilegeLevel_GROUP SharedNotebookPrivilegeLevel = 3
  SharedNotebookPrivilegeLevel_FULL_ACCESS SharedNotebookPrivilegeLevel = 4
  SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS SharedNotebookPrivilegeLevel = 5
)

func (p SharedNotebookPrivilegeLevel) String() string {
  switch p {
  case SharedNotebookPrivilegeLevel_READ_NOTEBOOK: return "READ_NOTEBOOK"
  case SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY: return "MODIFY_NOTEBOOK_PLUS_ACTIVITY"
  case SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY: return "READ_NOTEBOOK_PLUS_ACTIVITY"
  case SharedNotebookPrivilegeLevel_GROUP: return "GROUP"
  case SharedNotebookPrivilegeLevel_FULL_ACCESS: return "FULL_ACCESS"
  case SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS: return "BUSINESS_FULL_ACCESS"
  }
  return "<UNSET>"
}

func SharedNotebookPrivilegeLevelFromString(s string) (SharedNotebookPrivilegeLevel, error) {
  switch s {
  case "READ_NOTEBOOK": return SharedNotebookPrivilegeLevel_READ_NOTEBOOK, nil 
  case "MODIFY_NOTEBOOK_PLUS_ACTIVITY": return SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY, nil 
  case "READ_NOTEBOOK_PLUS_ACTIVITY": return SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY, nil 
  case "GROUP": return SharedNotebookPrivilegeLevel_GROUP, nil 
  case "FULL_ACCESS": return SharedNotebookPrivilegeLevel_FULL_ACCESS, nil 
  case "BUSINESS_FULL_ACCESS": return SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS, nil 
  }
  return SharedNotebookPrivilegeLevel(0), fmt.Errorf("not a valid SharedNotebookPrivilegeLevel string")
}


func SharedNotebookPrivilegeLevelPtr(v SharedNotebookPrivilegeLevel) *SharedNotebookPrivilegeLevel { return &v }

func (p SharedNotebookPrivilegeLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SharedNotebookPrivilegeLevel) UnmarshalText(text []byte) error {
q, err := SharedNotebookPrivilegeLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SharedNotebookPrivilegeLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SharedNotebookPrivilegeLevel(v)
return nil
}

func (p * SharedNotebookPrivilegeLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Privilege levels for accessing a shared note. All privilege levels convey "activity feed" access,
//which allows the recipient to access information about other recipients and the activity stream.
//
//READ_NOTE: Recipient has rights to read the shared note.
//
//MODIFY_NOTE: Recipient has all of the rights of READ_NOTE, plus rights to modify the shared
//  note's content, title and resources. Other fields, including the notebook, tags and metadata,
//  may not be modified.
//
//FULL_ACCESS: Recipient has all of the rights of MODIFY_NOTE, plus rights to share the note with
//  other users via email, public note links, and note sharing. Recipient may also update and
//  remove other recipient's note sharing rights.
type SharedNotePrivilegeLevel int64
const (
  SharedNotePrivilegeLevel_READ_NOTE SharedNotePrivilegeLevel = 0
  SharedNotePrivilegeLevel_MODIFY_NOTE SharedNotePrivilegeLevel = 1
  SharedNotePrivilegeLevel_FULL_ACCESS SharedNotePrivilegeLevel = 2
)

func (p SharedNotePrivilegeLevel) String() string {
  switch p {
  case SharedNotePrivilegeLevel_READ_NOTE: return "READ_NOTE"
  case SharedNotePrivilegeLevel_MODIFY_NOTE: return "MODIFY_NOTE"
  case SharedNotePrivilegeLevel_FULL_ACCESS: return "FULL_ACCESS"
  }
  return "<UNSET>"
}

func SharedNotePrivilegeLevelFromString(s string) (SharedNotePrivilegeLevel, error) {
  switch s {
  case "READ_NOTE": return SharedNotePrivilegeLevel_READ_NOTE, nil 
  case "MODIFY_NOTE": return SharedNotePrivilegeLevel_MODIFY_NOTE, nil 
  case "FULL_ACCESS": return SharedNotePrivilegeLevel_FULL_ACCESS, nil 
  }
  return SharedNotePrivilegeLevel(0), fmt.Errorf("not a valid SharedNotePrivilegeLevel string")
}


func SharedNotePrivilegeLevelPtr(v SharedNotePrivilegeLevel) *SharedNotePrivilegeLevel { return &v }

func (p SharedNotePrivilegeLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SharedNotePrivilegeLevel) UnmarshalText(text []byte) error {
q, err := SharedNotePrivilegeLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SharedNotePrivilegeLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SharedNotePrivilegeLevel(v)
return nil
}

func (p * SharedNotePrivilegeLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Enumeration of the roles that a User can have within a sponsored group.
//
//GROUP_MEMBER: The user is a member of the group with no special privileges.
//
//GROUP_ADMIN: The user is an administrator within the group.
//
//GROUP_OWNER: The user is the owner of the group.
type SponsoredGroupRole int64
const (
  SponsoredGroupRole_GROUP_MEMBER SponsoredGroupRole = 1
  SponsoredGroupRole_GROUP_ADMIN SponsoredGroupRole = 2
  SponsoredGroupRole_GROUP_OWNER SponsoredGroupRole = 3
)

func (p SponsoredGroupRole) String() string {
  switch p {
  case SponsoredGroupRole_GROUP_MEMBER: return "GROUP_MEMBER"
  case SponsoredGroupRole_GROUP_ADMIN: return "GROUP_ADMIN"
  case SponsoredGroupRole_GROUP_OWNER: return "GROUP_OWNER"
  }
  return "<UNSET>"
}

func SponsoredGroupRoleFromString(s string) (SponsoredGroupRole, error) {
  switch s {
  case "GROUP_MEMBER": return SponsoredGroupRole_GROUP_MEMBER, nil 
  case "GROUP_ADMIN": return SponsoredGroupRole_GROUP_ADMIN, nil 
  case "GROUP_OWNER": return SponsoredGroupRole_GROUP_OWNER, nil 
  }
  return SponsoredGroupRole(0), fmt.Errorf("not a valid SponsoredGroupRole string")
}


func SponsoredGroupRolePtr(v SponsoredGroupRole) *SponsoredGroupRole { return &v }

func (p SponsoredGroupRole) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SponsoredGroupRole) UnmarshalText(text []byte) error {
q, err := SponsoredGroupRoleFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SponsoredGroupRole) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SponsoredGroupRole(v)
return nil
}

func (p * SponsoredGroupRole) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Enumeration of the roles that a User can have within an Evernote Business account.
//
//ADMIN: The user is an administrator of the Evernote Business account.
//
//NORMAL: The user is a regular user within the Evernote Business account.
type BusinessUserRole int64
const (
  BusinessUserRole_ADMIN BusinessUserRole = 1
  BusinessUserRole_NORMAL BusinessUserRole = 2
)

func (p BusinessUserRole) String() string {
  switch p {
  case BusinessUserRole_ADMIN: return "ADMIN"
  case BusinessUserRole_NORMAL: return "NORMAL"
  }
  return "<UNSET>"
}

func BusinessUserRoleFromString(s string) (BusinessUserRole, error) {
  switch s {
  case "ADMIN": return BusinessUserRole_ADMIN, nil 
  case "NORMAL": return BusinessUserRole_NORMAL, nil 
  }
  return BusinessUserRole(0), fmt.Errorf("not a valid BusinessUserRole string")
}


func BusinessUserRolePtr(v BusinessUserRole) *BusinessUserRole { return &v }

func (p BusinessUserRole) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BusinessUserRole) UnmarshalText(text []byte) error {
q, err := BusinessUserRoleFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BusinessUserRole) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BusinessUserRole(v)
return nil
}

func (p * BusinessUserRole) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//The BusinessUserStatus indicates the status of the user in the business.
//
//A BusinessUser will typically start as ACTIVE.
//Only ACTIVE users can authenticate to the Business.
//
//<dl>
//<dt>ACTIVE<dt>
//<dd>The business user can authenticate to and access the business.</dd>
//<dt>DEACTIVATED<dt>
//<dd>The business user has been deactivated and cannot access the business</dd>
//</dl>
type BusinessUserStatus int64
const (
  BusinessUserStatus_ACTIVE BusinessUserStatus = 1
  BusinessUserStatus_DEACTIVATED BusinessUserStatus = 2
)

func (p BusinessUserStatus) String() string {
  switch p {
  case BusinessUserStatus_ACTIVE: return "ACTIVE"
  case BusinessUserStatus_DEACTIVATED: return "DEACTIVATED"
  }
  return "<UNSET>"
}

func BusinessUserStatusFromString(s string) (BusinessUserStatus, error) {
  switch s {
  case "ACTIVE": return BusinessUserStatus_ACTIVE, nil 
  case "DEACTIVATED": return BusinessUserStatus_DEACTIVATED, nil 
  }
  return BusinessUserStatus(0), fmt.Errorf("not a valid BusinessUserStatus string")
}


func BusinessUserStatusPtr(v BusinessUserStatus) *BusinessUserStatus { return &v }

func (p BusinessUserStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BusinessUserStatus) UnmarshalText(text []byte) error {
q, err := BusinessUserStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BusinessUserStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BusinessUserStatus(v)
return nil
}

func (p * BusinessUserStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//An enumeration describing restrictions on the domain of shared notebook
//instances that are valid for a given operation, as used, for example, in
//NotebookRestrictions.
//
//ASSIGNED: The domain consists of shared notebooks that belong, or are assigned,
//to the recipient.
//
//NO_SHARED_NOTEBOOKS: No shared notebooks are applicable to the operation.
type SharedNotebookInstanceRestrictions int64
const (
  SharedNotebookInstanceRestrictions_ASSIGNED SharedNotebookInstanceRestrictions = 1
  SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS SharedNotebookInstanceRestrictions = 2
)

func (p SharedNotebookInstanceRestrictions) String() string {
  switch p {
  case SharedNotebookInstanceRestrictions_ASSIGNED: return "ASSIGNED"
  case SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS: return "NO_SHARED_NOTEBOOKS"
  }
  return "<UNSET>"
}

func SharedNotebookInstanceRestrictionsFromString(s string) (SharedNotebookInstanceRestrictions, error) {
  switch s {
  case "ASSIGNED": return SharedNotebookInstanceRestrictions_ASSIGNED, nil 
  case "NO_SHARED_NOTEBOOKS": return SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS, nil 
  }
  return SharedNotebookInstanceRestrictions(0), fmt.Errorf("not a valid SharedNotebookInstanceRestrictions string")
}


func SharedNotebookInstanceRestrictionsPtr(v SharedNotebookInstanceRestrictions) *SharedNotebookInstanceRestrictions { return &v }

func (p SharedNotebookInstanceRestrictions) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SharedNotebookInstanceRestrictions) UnmarshalText(text []byte) error {
q, err := SharedNotebookInstanceRestrictionsFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SharedNotebookInstanceRestrictions) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SharedNotebookInstanceRestrictions(v)
return nil
}

func (p * SharedNotebookInstanceRestrictions) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//An enumeration describing the configuration state related to receiving
//reminder e-mails from the service.  Reminder e-mails summarize notes
//based on their Note.attributes.reminderTime values.
//
//DO_NOT_SEND: The user has selected to not receive reminder e-mail.
//
//SEND_DAILY_EMAIL: The user has selected to receive reminder e-mail for those
//  days when there is a reminder.
type ReminderEmailConfig int64
const (
  ReminderEmailConfig_DO_NOT_SEND ReminderEmailConfig = 1
  ReminderEmailConfig_SEND_DAILY_EMAIL ReminderEmailConfig = 2
)

func (p ReminderEmailConfig) String() string {
  switch p {
  case ReminderEmailConfig_DO_NOT_SEND: return "DO_NOT_SEND"
  case ReminderEmailConfig_SEND_DAILY_EMAIL: return "SEND_DAILY_EMAIL"
  }
  return "<UNSET>"
}

func ReminderEmailConfigFromString(s string) (ReminderEmailConfig, error) {
  switch s {
  case "DO_NOT_SEND": return ReminderEmailConfig_DO_NOT_SEND, nil 
  case "SEND_DAILY_EMAIL": return ReminderEmailConfig_SEND_DAILY_EMAIL, nil 
  }
  return ReminderEmailConfig(0), fmt.Errorf("not a valid ReminderEmailConfig string")
}


func ReminderEmailConfigPtr(v ReminderEmailConfig) *ReminderEmailConfig { return &v }

func (p ReminderEmailConfig) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ReminderEmailConfig) UnmarshalText(text []byte) error {
q, err := ReminderEmailConfigFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ReminderEmailConfig) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ReminderEmailConfig(v)
return nil
}

func (p * ReminderEmailConfig) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//An enumeration defining the possible states of a BusinessInvitation.
//
//APPROVED: The invitation was created or approved by a business admin and may be redeemed by the
//  invited email.
//
//REQUESTED: The invitation was requested by a non-admin member of the business and must be
//  approved by an admin before it may be redeemed. Invitations in this state do not count
//  against a business' seat limit.
//
//REDEEMED: The invitation has already been redeemed. Invitations in this state do not count
//  against a business' seat limit.
type BusinessInvitationStatus int64
const (
  BusinessInvitationStatus_APPROVED BusinessInvitationStatus = 0
  BusinessInvitationStatus_REQUESTED BusinessInvitationStatus = 1
  BusinessInvitationStatus_REDEEMED BusinessInvitationStatus = 2
)

func (p BusinessInvitationStatus) String() string {
  switch p {
  case BusinessInvitationStatus_APPROVED: return "APPROVED"
  case BusinessInvitationStatus_REQUESTED: return "REQUESTED"
  case BusinessInvitationStatus_REDEEMED: return "REDEEMED"
  }
  return "<UNSET>"
}

func BusinessInvitationStatusFromString(s string) (BusinessInvitationStatus, error) {
  switch s {
  case "APPROVED": return BusinessInvitationStatus_APPROVED, nil 
  case "REQUESTED": return BusinessInvitationStatus_REQUESTED, nil 
  case "REDEEMED": return BusinessInvitationStatus_REDEEMED, nil 
  }
  return BusinessInvitationStatus(0), fmt.Errorf("not a valid BusinessInvitationStatus string")
}


func BusinessInvitationStatusPtr(v BusinessInvitationStatus) *BusinessInvitationStatus { return &v }

func (p BusinessInvitationStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BusinessInvitationStatus) UnmarshalText(text []byte) error {
q, err := BusinessInvitationStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BusinessInvitationStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BusinessInvitationStatus(v)
return nil
}

func (p * BusinessInvitationStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//What kinds of Contacts does the Evernote service know about?
type ContactType int64
const (
  ContactType_EVERNOTE ContactType = 1
  ContactType_SMS ContactType = 2
  ContactType_FACEBOOK ContactType = 3
  ContactType_EMAIL ContactType = 4
  ContactType_TWITTER ContactType = 5
  ContactType_LINKEDIN ContactType = 6
)

func (p ContactType) String() string {
  switch p {
  case ContactType_EVERNOTE: return "EVERNOTE"
  case ContactType_SMS: return "SMS"
  case ContactType_FACEBOOK: return "FACEBOOK"
  case ContactType_EMAIL: return "EMAIL"
  case ContactType_TWITTER: return "TWITTER"
  case ContactType_LINKEDIN: return "LINKEDIN"
  }
  return "<UNSET>"
}

func ContactTypeFromString(s string) (ContactType, error) {
  switch s {
  case "EVERNOTE": return ContactType_EVERNOTE, nil 
  case "SMS": return ContactType_SMS, nil 
  case "FACEBOOK": return ContactType_FACEBOOK, nil 
  case "EMAIL": return ContactType_EMAIL, nil 
  case "TWITTER": return ContactType_TWITTER, nil 
  case "LINKEDIN": return ContactType_LINKEDIN, nil 
  }
  return ContactType(0), fmt.Errorf("not a valid ContactType string")
}


func ContactTypePtr(v ContactType) *ContactType { return &v }

func (p ContactType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactType) UnmarshalText(text []byte) error {
q, err := ContactTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactType(v)
return nil
}

func (p * ContactType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Entity types
type EntityType int64
const (
  EntityType_NOTE EntityType = 1
  EntityType_NOTEBOOK EntityType = 2
  EntityType_WORKSPACE EntityType = 3
)

func (p EntityType) String() string {
  switch p {
  case EntityType_NOTE: return "NOTE"
  case EntityType_NOTEBOOK: return "NOTEBOOK"
  case EntityType_WORKSPACE: return "WORKSPACE"
  }
  return "<UNSET>"
}

func EntityTypeFromString(s string) (EntityType, error) {
  switch s {
  case "NOTE": return EntityType_NOTE, nil 
  case "NOTEBOOK": return EntityType_NOTEBOOK, nil 
  case "WORKSPACE": return EntityType_WORKSPACE, nil 
  }
  return EntityType(0), fmt.Errorf("not a valid EntityType string")
}


func EntityTypePtr(v EntityType) *EntityType { return &v }

func (p EntityType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EntityType) UnmarshalText(text []byte) error {
q, err := EntityTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EntityType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EntityType(v)
return nil
}

func (p * EntityType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//This enumeration defines the possible states that a notebook can be in for a recipient.
//It encompasses the "inMyList" boolean and default notebook status.
//
//<dl>
//<dt>NOT_IN_MY_LIST</dt>
//<dd>The notebook is not in the recipient's list (not "joined").</dd>
//<dt>IN_MY_LIST</dt>
//<dd>The notebook is in the recipient's notebook list (formerly, we would say
//    that the recipient has "joined" the notebook)</dd>
//<dt>IN_MY_LIST_AND_DEFAULT_NOTEBOOK</dt>
//<dd>The same as IN_MY_LIST and this notebook is the user's default notebook.</dd>
//</dl>
type RecipientStatus int64
const (
  RecipientStatus_NOT_IN_MY_LIST RecipientStatus = 1
  RecipientStatus_IN_MY_LIST RecipientStatus = 2
  RecipientStatus_IN_MY_LIST_AND_DEFAULT_NOTEBOOK RecipientStatus = 3
)

func (p RecipientStatus) String() string {
  switch p {
  case RecipientStatus_NOT_IN_MY_LIST: return "NOT_IN_MY_LIST"
  case RecipientStatus_IN_MY_LIST: return "IN_MY_LIST"
  case RecipientStatus_IN_MY_LIST_AND_DEFAULT_NOTEBOOK: return "IN_MY_LIST_AND_DEFAULT_NOTEBOOK"
  }
  return "<UNSET>"
}

func RecipientStatusFromString(s string) (RecipientStatus, error) {
  switch s {
  case "NOT_IN_MY_LIST": return RecipientStatus_NOT_IN_MY_LIST, nil 
  case "IN_MY_LIST": return RecipientStatus_IN_MY_LIST, nil 
  case "IN_MY_LIST_AND_DEFAULT_NOTEBOOK": return RecipientStatus_IN_MY_LIST_AND_DEFAULT_NOTEBOOK, nil 
  }
  return RecipientStatus(0), fmt.Errorf("not a valid RecipientStatus string")
}


func RecipientStatusPtr(v RecipientStatus) *RecipientStatus { return &v }

func (p RecipientStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RecipientStatus) UnmarshalText(text []byte) error {
q, err := RecipientStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RecipientStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RecipientStatus(v)
return nil
}

func (p * RecipientStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//This enumeration defines the possible types of canMoveToContainer outcomes.
//<p />
//An outdated client is expected to signal a "Cannot Move, Please Upgrade To Learn Why"
//like response to the user if an unknown enumeration value is received.
//<dl>
//<dt>CAN_BE_MOVED</dt>
//<dd>Can move Notebook to Workspace.</dd>
//<dt>INSUFFICIENT_ENTITY_PRIVILEGE</dt>
//<dd>Can not move Notebook to Workspace, because either:
// a) Notebook not in Workspace and insufficient privilege on Notebook
// or b) Notebook in Workspace and membership on Workspace with insufficient privilege
// for move</dd>
//<dt>INSUFFICIENT_CONTAINER_PRIVILEGE</dt>
//<dd>Notebook in Workspace and no membership on Workspace.
//</dd>
//</dl>
type CanMoveToContainerStatus int64
const (
  CanMoveToContainerStatus_CAN_BE_MOVED CanMoveToContainerStatus = 1
  CanMoveToContainerStatus_INSUFFICIENT_ENTITY_PRIVILEGE CanMoveToContainerStatus = 2
  CanMoveToContainerStatus_INSUFFICIENT_CONTAINER_PRIVILEGE CanMoveToContainerStatus = 3
)

func (p CanMoveToContainerStatus) String() string {
  switch p {
  case CanMoveToContainerStatus_CAN_BE_MOVED: return "CAN_BE_MOVED"
  case CanMoveToContainerStatus_INSUFFICIENT_ENTITY_PRIVILEGE: return "INSUFFICIENT_ENTITY_PRIVILEGE"
  case CanMoveToContainerStatus_INSUFFICIENT_CONTAINER_PRIVILEGE: return "INSUFFICIENT_CONTAINER_PRIVILEGE"
  }
  return "<UNSET>"
}

func CanMoveToContainerStatusFromString(s string) (CanMoveToContainerStatus, error) {
  switch s {
  case "CAN_BE_MOVED": return CanMoveToContainerStatus_CAN_BE_MOVED, nil 
  case "INSUFFICIENT_ENTITY_PRIVILEGE": return CanMoveToContainerStatus_INSUFFICIENT_ENTITY_PRIVILEGE, nil 
  case "INSUFFICIENT_CONTAINER_PRIVILEGE": return CanMoveToContainerStatus_INSUFFICIENT_CONTAINER_PRIVILEGE, nil 
  }
  return CanMoveToContainerStatus(0), fmt.Errorf("not a valid CanMoveToContainerStatus string")
}


func CanMoveToContainerStatusPtr(v CanMoveToContainerStatus) *CanMoveToContainerStatus { return &v }

func (p CanMoveToContainerStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CanMoveToContainerStatus) UnmarshalText(text []byte) error {
q, err := CanMoveToContainerStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CanMoveToContainerStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CanMoveToContainerStatus(v)
return nil
}

func (p * CanMoveToContainerStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//This enumeration defines the possible types of related content.
//
//NEWS_ARTICLE: This related content is a news article
//PROFILE_PERSON: This match refers to the profile of an individual person
//PROFILE_ORGANIZATION: This match refers to the profile of an organization
//REFERENCE_MATERIAL: This related content is material from reference works
type RelatedContentType int64
const (
  RelatedContentType_NEWS_ARTICLE RelatedContentType = 1
  RelatedContentType_PROFILE_PERSON RelatedContentType = 2
  RelatedContentType_PROFILE_ORGANIZATION RelatedContentType = 3
  RelatedContentType_REFERENCE_MATERIAL RelatedContentType = 4
)

func (p RelatedContentType) String() string {
  switch p {
  case RelatedContentType_NEWS_ARTICLE: return "NEWS_ARTICLE"
  case RelatedContentType_PROFILE_PERSON: return "PROFILE_PERSON"
  case RelatedContentType_PROFILE_ORGANIZATION: return "PROFILE_ORGANIZATION"
  case RelatedContentType_REFERENCE_MATERIAL: return "REFERENCE_MATERIAL"
  }
  return "<UNSET>"
}

func RelatedContentTypeFromString(s string) (RelatedContentType, error) {
  switch s {
  case "NEWS_ARTICLE": return RelatedContentType_NEWS_ARTICLE, nil 
  case "PROFILE_PERSON": return RelatedContentType_PROFILE_PERSON, nil 
  case "PROFILE_ORGANIZATION": return RelatedContentType_PROFILE_ORGANIZATION, nil 
  case "REFERENCE_MATERIAL": return RelatedContentType_REFERENCE_MATERIAL, nil 
  }
  return RelatedContentType(0), fmt.Errorf("not a valid RelatedContentType string")
}


func RelatedContentTypePtr(v RelatedContentType) *RelatedContentType { return &v }

func (p RelatedContentType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RelatedContentType) UnmarshalText(text []byte) error {
q, err := RelatedContentTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RelatedContentType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RelatedContentType(v)
return nil
}

func (p * RelatedContentType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//This enumeration defines the possible ways to access related content.
//
//NOT_ACCESSIBLE: The content is not accessible given the user's privilege level, but
//    still worth showing as a snippet. The content url may point to a webpage that
//    explains why not, or explains how to access that content.
//
//DIRECT_LINK_ACCESS_OK: The content is accessible directly, and no additional login is
//    required.
//
//DIRECT_LINK_LOGIN_REQUIRED: The content is accessible directly, but an additional login
//    is required.
//
//DIRECT_LINK_EMBEDDED_VIEW: The content is accessible directly, and should be shown in
//    an embedded web view.
//    If the URL refers to a secured location under our control (for example,
//    https://www.evernote.com/*), the client may include user-specific authentication
//    credentials with the request.
type RelatedContentAccess int64
const (
  RelatedContentAccess_NOT_ACCESSIBLE RelatedContentAccess = 0
  RelatedContentAccess_DIRECT_LINK_ACCESS_OK RelatedContentAccess = 1
  RelatedContentAccess_DIRECT_LINK_LOGIN_REQUIRED RelatedContentAccess = 2
  RelatedContentAccess_DIRECT_LINK_EMBEDDED_VIEW RelatedContentAccess = 3
)

func (p RelatedContentAccess) String() string {
  switch p {
  case RelatedContentAccess_NOT_ACCESSIBLE: return "NOT_ACCESSIBLE"
  case RelatedContentAccess_DIRECT_LINK_ACCESS_OK: return "DIRECT_LINK_ACCESS_OK"
  case RelatedContentAccess_DIRECT_LINK_LOGIN_REQUIRED: return "DIRECT_LINK_LOGIN_REQUIRED"
  case RelatedContentAccess_DIRECT_LINK_EMBEDDED_VIEW: return "DIRECT_LINK_EMBEDDED_VIEW"
  }
  return "<UNSET>"
}

func RelatedContentAccessFromString(s string) (RelatedContentAccess, error) {
  switch s {
  case "NOT_ACCESSIBLE": return RelatedContentAccess_NOT_ACCESSIBLE, nil 
  case "DIRECT_LINK_ACCESS_OK": return RelatedContentAccess_DIRECT_LINK_ACCESS_OK, nil 
  case "DIRECT_LINK_LOGIN_REQUIRED": return RelatedContentAccess_DIRECT_LINK_LOGIN_REQUIRED, nil 
  case "DIRECT_LINK_EMBEDDED_VIEW": return RelatedContentAccess_DIRECT_LINK_EMBEDDED_VIEW, nil 
  }
  return RelatedContentAccess(0), fmt.Errorf("not a valid RelatedContentAccess string")
}


func RelatedContentAccessPtr(v RelatedContentAccess) *RelatedContentAccess { return &v }

func (p RelatedContentAccess) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RelatedContentAccess) UnmarshalText(text []byte) error {
q, err := RelatedContentAccessFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RelatedContentAccess) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RelatedContentAccess(v)
return nil
}

func (p * RelatedContentAccess) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//
type UserIdentityType int64
const (
  UserIdentityType_EVERNOTE_USERID UserIdentityType = 1
  UserIdentityType_EMAIL UserIdentityType = 2
  UserIdentityType_IDENTITYID UserIdentityType = 3
)

func (p UserIdentityType) String() string {
  switch p {
  case UserIdentityType_EVERNOTE_USERID: return "EVERNOTE_USERID"
  case UserIdentityType_EMAIL: return "EMAIL"
  case UserIdentityType_IDENTITYID: return "IDENTITYID"
  }
  return "<UNSET>"
}

func UserIdentityTypeFromString(s string) (UserIdentityType, error) {
  switch s {
  case "EVERNOTE_USERID": return UserIdentityType_EVERNOTE_USERID, nil 
  case "EMAIL": return UserIdentityType_EMAIL, nil 
  case "IDENTITYID": return UserIdentityType_IDENTITYID, nil 
  }
  return UserIdentityType(0), fmt.Errorf("not a valid UserIdentityType string")
}


func UserIdentityTypePtr(v UserIdentityType) *UserIdentityType { return &v }

func (p UserIdentityType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UserIdentityType) UnmarshalText(text []byte) error {
q, err := UserIdentityTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UserIdentityType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UserIdentityType(v)
return nil
}

func (p * UserIdentityType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//A monotonically incrementing number on each shard that identifies a cross shard
//cache invalidation event.
type InvalidationSequenceNumber int64

func InvalidationSequenceNumberPtr(v InvalidationSequenceNumber) *InvalidationSequenceNumber { return &v }

//A type alias for the primary identifiers for Identity objects.
type IdentityID int64

func IdentityIDPtr(v IdentityID) *IdentityID { return &v }

//Every Evernote account is assigned a unique numeric identifier which
//will not change for the life of the account.  This is independent of
//the (string-based) "username" which is known by the user for login
//purposes.  The user should have no reason to know their UserID.
type UserID int32

func UserIDPtr(v UserID) *UserID { return &v }

//Most data elements within a user's account (e.g. notebooks, notes, tags,
//resources, etc.) are internally referred to using a globally unique
//identifier that is written in a standard string format.  For example:
//
//   "8743428c-ef91-4d05-9e7c-4a2e856e813a"
//
//The internal components of the GUID are not given any particular meaning:
//only the entire string is relevant as a unique identifier.
type GUID string

func GUIDPtr(v GUID) *GUID { return &v }

//An Evernote Timestamp is the date and time of an event in UTC time.
//This is expressed as a specific number of milliseconds since the
//standard base "epoch" of:
//
//   January 1, 1970, 00:00:00 GMT
//
//NOTE:  the time is expressed at the resolution of milliseconds, but
//the value is only precise to the level of seconds.   This means that
//the last three (decimal) digits of the timestamp will be '000'.
//
//The Thrift IDL specification does not include a native date/time type,
//so this value is used instead.
//
//The service will accept timestamp values (e.g. for Note created and update
//times) between 1000-01-01 and 9999-12-31
type Timestamp int64

func TimestampPtr(v Timestamp) *Timestamp { return &v }

//A sequence number for the MessageStore subsystem.
type MessageEventID int64

func MessageEventIDPtr(v MessageEventID) *MessageEventID { return &v }

//A type alias for the primary identifiers for MessageThread objects.
type MessageThreadID int64

func MessageThreadIDPtr(v MessageThreadID) *MessageThreadID { return &v }

//  In several places, EDAM exchanges blocks of bytes of data for a component
//  which may be relatively large.  For example:  the contents of a clipped
//  HTML note, the bytes of an embedded image, or the recognition XML for
//  a large image.  This structure is used in the protocol to represent
//  any of those large blocks of data when they are transmitted or when
//  they are only referenced their metadata.
// 
// <dl>
//  <dt>bodyHash</dt>
//    <dd>This field carries a one-way hash of the contents of the
//    data body, in binary form.  The hash function is MD5<br/>
//    Length:  EDAM_HASH_LEN (exactly)
//    </dd>
// 
//  <dt>size</dt>
//    <dd>The length, in bytes, of the data body.
//    </dd>
// 
//  <dt>body</dt>
//    <dd>This field is set to contain the binary contents of the data
//    whenever the resource is being transferred.  If only metadata is
//    being exchanged, this field will be empty.  For example, a client could
//    notify the service about the change to an attribute for a resource
//    without transmitting the binary resource contents.
//    </dd>
//  </dl>
// 
// Attributes:
//  - BodyHash
//  - Size
//  - Body
type Data struct {
  BodyHash []byte `thrift:"bodyHash,1" db:"bodyHash" json:"bodyHash,omitempty"`
  Size *int32 `thrift:"size,2" db:"size" json:"size,omitempty"`
  Body []byte `thrift:"body,3" db:"body" json:"body,omitempty"`
}

func NewData() *Data {
  return &Data{}
}

var Data_BodyHash_DEFAULT []byte

func (p *Data) GetBodyHash() []byte {
  return p.BodyHash
}
var Data_Size_DEFAULT int32
func (p *Data) GetSize() int32 {
  if !p.IsSetSize() {
    return Data_Size_DEFAULT
  }
return *p.Size
}
var Data_Body_DEFAULT []byte

func (p *Data) GetBody() []byte {
  return p.Body
}
func (p *Data) IsSetBodyHash() bool {
  return p.BodyHash != nil
}

func (p *Data) IsSetSize() bool {
  return p.Size != nil
}

func (p *Data) IsSetBody() bool {
  return p.Body != nil
}

func (p *Data) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Data)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BodyHash = v
}
  return nil
}

func (p *Data)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = &v
}
  return nil
}

func (p *Data)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Body = v
}
  return nil
}

func (p *Data) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Data"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Data) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBodyHash() {
    if err := oprot.WriteFieldBegin("bodyHash", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bodyHash: ", p), err) }
    if err := oprot.WriteBinary(p.BodyHash); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bodyHash (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bodyHash: ", p), err) }
  }
  return err
}

func (p *Data) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSize() {
    if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Size)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  }
  return err
}

func (p *Data) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetBody() {
    if err := oprot.WriteFieldBegin("body", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:body: ", p), err) }
    if err := oprot.WriteBinary(p.Body); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.body (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:body: ", p), err) }
  }
  return err
}

func (p *Data) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Data(%+v)", *p)
}

//  A structure holding the optional attributes that can be stored
//  on a User.  These are generally less critical than the core User fields.
// 
// <dl>
//  <dt>defaultLocationName</dt>
//    <dd>the location string that should be associated
//    with the user in order to determine where notes are taken if not otherwise
//    specified.<br/>
//    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//    </dd>
// 
//  <dt>defaultLatitude</dt>
//    <dd>if set, this is the latitude that should be
//    assigned to any notes that have no other latitude information.
//    </dd>
// 
//  <dt>defaultLongitude</dt>
//    <dd>if set, this is the longitude that should be
//    assigned to any notes that have no other longitude information.
//    </dd>
// 
//  <dt>preactivation</dt>
//    <dd>if set, the user account is not yet confirmed for
//    login.  I.e. the account has been created, but we are still waiting for
//    the user to complete the activation step.
//    </dd>
// 
//  <dt>viewedPromotions</dt>
//    <dd>a list of promotions the user has seen.
//     This list may occasionally be modified by the system when promotions are
//     no longer available.<br/>
//     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//    </dd>
// 
//  <dt>incomingEmailAddress</dt>
//    <dd>if set, this is the email address that the
//     user may send email to in order to add an email note directly into the
//     account via the SMTP email gateway.  This is the part of the email
//     address before the '@' symbol ... our domain is not included.
//     If this is not set, the user may not add notes via the gateway.<br/>
//     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//    </dd>
// 
//  <dt>recentMailedAddresses</dt>
//    <dd>if set, this will contain a list of email
//     addresses that have recently been used as recipients
//     of outbound emails by the user.  This can be used to pre-populate a
//     list of possible destinations when a user wishes to send a note via
//     email.<br/>
//     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX each<br/>
//     Max:  EDAM_USER_RECENT_MAILED_ADDRESSES_MAX entries
//    </dd>
// 
//  <dt>comments</dt>
//    <dd>Free-form text field that may hold general support
//     information, etc.<br/>
//     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//    </dd>
// 
//  <dt>dateAgreedToTermsOfService</dt>
//    <dd>The date/time when the user agreed to
//     the terms of service.  This can be used as the effective "start date"
//     for the account.
//    </dd>
// 
//  <dt>maxReferrals</dt>
//    <dd>The number of referrals that the user is permitted
//     to make.
//    </dd>
// 
//  <dt>referralCount</dt>
//    <dd>The number of referrals sent from this account.
//    </dd>
// 
//  <dt>refererCode</dt>
//    <dd>A code indicating where the user was sent from. AKA
//     promotion code
//    </dd>
// 
//  <dt>sentEmailDate</dt>
//    <dd>The most recent date when the user sent outbound
//     emails from the service.  Used with sentEmailCount to limit the number
//     of emails that can be sent per day.
//    </dd>
// 
//  <dt>sentEmailCount</dt>
//    <dd>The number of emails that were sent from the user
//     via the service on sentEmailDate.  Used to enforce a limit on the number
//     of emails per user per day to prevent spamming.
//    </dd>
// 
//  <dt>dailyEmailLimit</dt>
//    <dd>If set, this is the maximum number of emails that
//     may be sent in a given day from this account.  If unset, the server will
//     use the configured default limit.
//    </dd>
// 
//  <dt>emailOptOutDate</dt>
//    <dd>If set, this is the date when the user asked
//     to be excluded from offers and promotions sent by Evernote.  If not set,
//     then the user currently agrees to receive these messages.
//    </dd>
// 
//  <dt>partnerEmailOptInDate</dt>
//    <dd>If set, this is the date when the user asked
//     to be included in offers and promotions sent by Evernote's partners.
//     If not sent, then the user currently does not agree to receive these
//     emails.
//    </dd>
// 
//  <dt>preferredLanguage</dt>
//    <dd>a 2 character language codes based on:
//        http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt used for
//       localization purposes to determine what language to use for the web
//       interface and for other direct communication (e.g. emails).
//    </dd>
// 
//  <dt>preferredCountry</dt>
//    <dd>Preferred country code based on ISO 3166-1-alpha-2 indicating the
//    users preferred country</dd>
// 
//  <dt>clipFullPage</dt>
//    <dd>Boolean flag set to true if the user wants to clip full pages by
//    default when they use the web clipper without a selection.</dd>
// 
//  <dt>twitterUserName</dt>
//    <dd>The username of the account of someone who has chosen to enable
//    Twittering into Evernote.  This value is subject to change, since users
//    may change their Twitter user name.</dd>
// 
//  <dt>twitterId</dt>
//    <dd>The unique identifier of the user's Twitter account if that user
//    has chosen to enable Twittering into Evernote.</dd>
// 
//  <dt>groupName</dt>
//    <dd>A name identifier used to identify a particular set of branding and
//     light customization.</dd>
// 
//  <dt>recognitionLanguage</dt>
//    <dd>a 2 character language codes based on:
//        http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt
//        If set, this is used to determine the language that should be used
//        when processing images and PDF files to find text.
//        If not set, then the 'preferredLanguage' will be used.
//    </dd>
// 
//  <dt>educationalInstitution</dt>
//    <dd>a flag indicating that the user is part of an educational institution which
//    makes them eligible for discounts on bulk purchases
//    </dd>
// 
//  <dt>businessAddress</dt>
//    <dd>A string recording the business address of a Sponsored Account user who has requested invoicing.
//    </dd>
// 
//  <dt>hideSponsorBilling</dt>
//    <dd>A flag indicating whether to hide the billing information on a sponsored
//        account owner's settings page
//    </dd>
// 
//  <dt>useEmailAutoFiling</dt>
//    <dd>A flag indicating whether the user chooses to allow Evernote to automatically
//        file and tag emailed notes
//    </dd>
// 
//  <dt>reminderEmailConfig</dt>
//    <dd>Configuration state for whether or not the user wishes to receive
//        reminder e-mail.  This setting applies to both the reminder e-mail sent
//        for personal reminder notes and for the reminder e-mail sent for reminder
//        notes in the user's business notebooks that the user has configured for
//        e-mail notifications.
//    </dd>
// 
//  <dt>emailAddressLastConfirmed</dt>
//    <dd>If set, this contains the time at which the user last confirmed that the
//        configured email address for this account is correct and up-to-date. If this is
//        unset that indicates that the user's email address is unverified.
//    </dd>
// 
//  <dt>passwordUpdated</dt>
//    <dd>If set, this contains the time at which the user's password last changed. This
//        will be unset for users created before the addition of this field who have not
//        changed their passwords since the addition of this field.
//    </dd>
// 
//  <dt>shouldLogClientEvent</dt>
//    <dd>If set to True, the server will record LogRequest send from clients of this
//         user as ClientEventLog.
//    </dd>
// 
//  <dt>optOutMachineLearning</dt>
//    <dd>If set to True, no Machine Learning nor human review will be done to this
//         user's note contents.
//    </dd>
//    </dl>
// 
// Attributes:
//  - DefaultLocationName
//  - DefaultLatitude
//  - DefaultLongitude
//  - Preactivation
//  - ViewedPromotions
//  - IncomingEmailAddress
//  - RecentMailedAddresses
//  - Comments
//  - DateAgreedToTermsOfService
//  - MaxReferrals
//  - ReferralCount
//  - RefererCode
//  - SentEmailDate
//  - SentEmailCount
//  - DailyEmailLimit
//  - EmailOptOutDate
//  - PartnerEmailOptInDate
//  - PreferredLanguage
//  - PreferredCountry
//  - ClipFullPage
//  - TwitterUserName
//  - TwitterId
//  - GroupName
//  - RecognitionLanguage
//  - ReferralProof
//  - EducationalDiscount
//  - BusinessAddress
//  - HideSponsorBilling
//  - UseEmailAutoFiling
//  - ReminderEmailConfig
//  - EmailAddressLastConfirmed
//  - PasswordUpdated
//  - SalesforcePushEnabled
//  - ShouldLogClientEvent
//  - OptOutMachineLearning
type UserAttributes struct {
  DefaultLocationName *string `thrift:"defaultLocationName,1" db:"defaultLocationName" json:"defaultLocationName,omitempty"`
  DefaultLatitude *float64 `thrift:"defaultLatitude,2" db:"defaultLatitude" json:"defaultLatitude,omitempty"`
  DefaultLongitude *float64 `thrift:"defaultLongitude,3" db:"defaultLongitude" json:"defaultLongitude,omitempty"`
  Preactivation *bool `thrift:"preactivation,4" db:"preactivation" json:"preactivation,omitempty"`
  ViewedPromotions []string `thrift:"viewedPromotions,5" db:"viewedPromotions" json:"viewedPromotions,omitempty"`
  IncomingEmailAddress *string `thrift:"incomingEmailAddress,6" db:"incomingEmailAddress" json:"incomingEmailAddress,omitempty"`
  RecentMailedAddresses []string `thrift:"recentMailedAddresses,7" db:"recentMailedAddresses" json:"recentMailedAddresses,omitempty"`
  // unused field # 8
  Comments *string `thrift:"comments,9" db:"comments" json:"comments,omitempty"`
  // unused field # 10
  DateAgreedToTermsOfService *Timestamp `thrift:"dateAgreedToTermsOfService,11" db:"dateAgreedToTermsOfService" json:"dateAgreedToTermsOfService,omitempty"`
  MaxReferrals *int32 `thrift:"maxReferrals,12" db:"maxReferrals" json:"maxReferrals,omitempty"`
  ReferralCount *int32 `thrift:"referralCount,13" db:"referralCount" json:"referralCount,omitempty"`
  RefererCode *string `thrift:"refererCode,14" db:"refererCode" json:"refererCode,omitempty"`
  SentEmailDate *Timestamp `thrift:"sentEmailDate,15" db:"sentEmailDate" json:"sentEmailDate,omitempty"`
  SentEmailCount *int32 `thrift:"sentEmailCount,16" db:"sentEmailCount" json:"sentEmailCount,omitempty"`
  DailyEmailLimit *int32 `thrift:"dailyEmailLimit,17" db:"dailyEmailLimit" json:"dailyEmailLimit,omitempty"`
  EmailOptOutDate *Timestamp `thrift:"emailOptOutDate,18" db:"emailOptOutDate" json:"emailOptOutDate,omitempty"`
  PartnerEmailOptInDate *Timestamp `thrift:"partnerEmailOptInDate,19" db:"partnerEmailOptInDate" json:"partnerEmailOptInDate,omitempty"`
  PreferredLanguage *string `thrift:"preferredLanguage,20" db:"preferredLanguage" json:"preferredLanguage,omitempty"`
  PreferredCountry *string `thrift:"preferredCountry,21" db:"preferredCountry" json:"preferredCountry,omitempty"`
  ClipFullPage *bool `thrift:"clipFullPage,22" db:"clipFullPage" json:"clipFullPage,omitempty"`
  TwitterUserName *string `thrift:"twitterUserName,23" db:"twitterUserName" json:"twitterUserName,omitempty"`
  TwitterId *string `thrift:"twitterId,24" db:"twitterId" json:"twitterId,omitempty"`
  GroupName *string `thrift:"groupName,25" db:"groupName" json:"groupName,omitempty"`
  RecognitionLanguage *string `thrift:"recognitionLanguage,26" db:"recognitionLanguage" json:"recognitionLanguage,omitempty"`
  // unused field # 27
  ReferralProof *string `thrift:"referralProof,28" db:"referralProof" json:"referralProof,omitempty"`
  EducationalDiscount *bool `thrift:"educationalDiscount,29" db:"educationalDiscount" json:"educationalDiscount,omitempty"`
  BusinessAddress *string `thrift:"businessAddress,30" db:"businessAddress" json:"businessAddress,omitempty"`
  HideSponsorBilling *bool `thrift:"hideSponsorBilling,31" db:"hideSponsorBilling" json:"hideSponsorBilling,omitempty"`
  // unused field # 32
  UseEmailAutoFiling *bool `thrift:"useEmailAutoFiling,33" db:"useEmailAutoFiling" json:"useEmailAutoFiling,omitempty"`
  ReminderEmailConfig *ReminderEmailConfig `thrift:"reminderEmailConfig,34" db:"reminderEmailConfig" json:"reminderEmailConfig,omitempty"`
  EmailAddressLastConfirmed *Timestamp `thrift:"emailAddressLastConfirmed,35" db:"emailAddressLastConfirmed" json:"emailAddressLastConfirmed,omitempty"`
  PasswordUpdated *Timestamp `thrift:"passwordUpdated,36" db:"passwordUpdated" json:"passwordUpdated,omitempty"`
  SalesforcePushEnabled *bool `thrift:"salesforcePushEnabled,37" db:"salesforcePushEnabled" json:"salesforcePushEnabled,omitempty"`
  ShouldLogClientEvent *bool `thrift:"shouldLogClientEvent,38" db:"shouldLogClientEvent" json:"shouldLogClientEvent,omitempty"`
  OptOutMachineLearning *bool `thrift:"optOutMachineLearning,39" db:"optOutMachineLearning" json:"optOutMachineLearning,omitempty"`
}

func NewUserAttributes() *UserAttributes {
  return &UserAttributes{}
}

var UserAttributes_DefaultLocationName_DEFAULT string
func (p *UserAttributes) GetDefaultLocationName() string {
  if !p.IsSetDefaultLocationName() {
    return UserAttributes_DefaultLocationName_DEFAULT
  }
return *p.DefaultLocationName
}
var UserAttributes_DefaultLatitude_DEFAULT float64
func (p *UserAttributes) GetDefaultLatitude() float64 {
  if !p.IsSetDefaultLatitude() {
    return UserAttributes_DefaultLatitude_DEFAULT
  }
return *p.DefaultLatitude
}
var UserAttributes_DefaultLongitude_DEFAULT float64
func (p *UserAttributes) GetDefaultLongitude() float64 {
  if !p.IsSetDefaultLongitude() {
    return UserAttributes_DefaultLongitude_DEFAULT
  }
return *p.DefaultLongitude
}
var UserAttributes_Preactivation_DEFAULT bool
func (p *UserAttributes) GetPreactivation() bool {
  if !p.IsSetPreactivation() {
    return UserAttributes_Preactivation_DEFAULT
  }
return *p.Preactivation
}
var UserAttributes_ViewedPromotions_DEFAULT []string

func (p *UserAttributes) GetViewedPromotions() []string {
  return p.ViewedPromotions
}
var UserAttributes_IncomingEmailAddress_DEFAULT string
func (p *UserAttributes) GetIncomingEmailAddress() string {
  if !p.IsSetIncomingEmailAddress() {
    return UserAttributes_IncomingEmailAddress_DEFAULT
  }
return *p.IncomingEmailAddress
}
var UserAttributes_RecentMailedAddresses_DEFAULT []string

func (p *UserAttributes) GetRecentMailedAddresses() []string {
  return p.RecentMailedAddresses
}
var UserAttributes_Comments_DEFAULT string
func (p *UserAttributes) GetComments() string {
  if !p.IsSetComments() {
    return UserAttributes_Comments_DEFAULT
  }
return *p.Comments
}
var UserAttributes_DateAgreedToTermsOfService_DEFAULT Timestamp
func (p *UserAttributes) GetDateAgreedToTermsOfService() Timestamp {
  if !p.IsSetDateAgreedToTermsOfService() {
    return UserAttributes_DateAgreedToTermsOfService_DEFAULT
  }
return *p.DateAgreedToTermsOfService
}
var UserAttributes_MaxReferrals_DEFAULT int32
func (p *UserAttributes) GetMaxReferrals() int32 {
  if !p.IsSetMaxReferrals() {
    return UserAttributes_MaxReferrals_DEFAULT
  }
return *p.MaxReferrals
}
var UserAttributes_ReferralCount_DEFAULT int32
func (p *UserAttributes) GetReferralCount() int32 {
  if !p.IsSetReferralCount() {
    return UserAttributes_ReferralCount_DEFAULT
  }
return *p.ReferralCount
}
var UserAttributes_RefererCode_DEFAULT string
func (p *UserAttributes) GetRefererCode() string {
  if !p.IsSetRefererCode() {
    return UserAttributes_RefererCode_DEFAULT
  }
return *p.RefererCode
}
var UserAttributes_SentEmailDate_DEFAULT Timestamp
func (p *UserAttributes) GetSentEmailDate() Timestamp {
  if !p.IsSetSentEmailDate() {
    return UserAttributes_SentEmailDate_DEFAULT
  }
return *p.SentEmailDate
}
var UserAttributes_SentEmailCount_DEFAULT int32
func (p *UserAttributes) GetSentEmailCount() int32 {
  if !p.IsSetSentEmailCount() {
    return UserAttributes_SentEmailCount_DEFAULT
  }
return *p.SentEmailCount
}
var UserAttributes_DailyEmailLimit_DEFAULT int32
func (p *UserAttributes) GetDailyEmailLimit() int32 {
  if !p.IsSetDailyEmailLimit() {
    return UserAttributes_DailyEmailLimit_DEFAULT
  }
return *p.DailyEmailLimit
}
var UserAttributes_EmailOptOutDate_DEFAULT Timestamp
func (p *UserAttributes) GetEmailOptOutDate() Timestamp {
  if !p.IsSetEmailOptOutDate() {
    return UserAttributes_EmailOptOutDate_DEFAULT
  }
return *p.EmailOptOutDate
}
var UserAttributes_PartnerEmailOptInDate_DEFAULT Timestamp
func (p *UserAttributes) GetPartnerEmailOptInDate() Timestamp {
  if !p.IsSetPartnerEmailOptInDate() {
    return UserAttributes_PartnerEmailOptInDate_DEFAULT
  }
return *p.PartnerEmailOptInDate
}
var UserAttributes_PreferredLanguage_DEFAULT string
func (p *UserAttributes) GetPreferredLanguage() string {
  if !p.IsSetPreferredLanguage() {
    return UserAttributes_PreferredLanguage_DEFAULT
  }
return *p.PreferredLanguage
}
var UserAttributes_PreferredCountry_DEFAULT string
func (p *UserAttributes) GetPreferredCountry() string {
  if !p.IsSetPreferredCountry() {
    return UserAttributes_PreferredCountry_DEFAULT
  }
return *p.PreferredCountry
}
var UserAttributes_ClipFullPage_DEFAULT bool
func (p *UserAttributes) GetClipFullPage() bool {
  if !p.IsSetClipFullPage() {
    return UserAttributes_ClipFullPage_DEFAULT
  }
return *p.ClipFullPage
}
var UserAttributes_TwitterUserName_DEFAULT string
func (p *UserAttributes) GetTwitterUserName() string {
  if !p.IsSetTwitterUserName() {
    return UserAttributes_TwitterUserName_DEFAULT
  }
return *p.TwitterUserName
}
var UserAttributes_TwitterId_DEFAULT string
func (p *UserAttributes) GetTwitterId() string {
  if !p.IsSetTwitterId() {
    return UserAttributes_TwitterId_DEFAULT
  }
return *p.TwitterId
}
var UserAttributes_GroupName_DEFAULT string
func (p *UserAttributes) GetGroupName() string {
  if !p.IsSetGroupName() {
    return UserAttributes_GroupName_DEFAULT
  }
return *p.GroupName
}
var UserAttributes_RecognitionLanguage_DEFAULT string
func (p *UserAttributes) GetRecognitionLanguage() string {
  if !p.IsSetRecognitionLanguage() {
    return UserAttributes_RecognitionLanguage_DEFAULT
  }
return *p.RecognitionLanguage
}
var UserAttributes_ReferralProof_DEFAULT string
func (p *UserAttributes) GetReferralProof() string {
  if !p.IsSetReferralProof() {
    return UserAttributes_ReferralProof_DEFAULT
  }
return *p.ReferralProof
}
var UserAttributes_EducationalDiscount_DEFAULT bool
func (p *UserAttributes) GetEducationalDiscount() bool {
  if !p.IsSetEducationalDiscount() {
    return UserAttributes_EducationalDiscount_DEFAULT
  }
return *p.EducationalDiscount
}
var UserAttributes_BusinessAddress_DEFAULT string
func (p *UserAttributes) GetBusinessAddress() string {
  if !p.IsSetBusinessAddress() {
    return UserAttributes_BusinessAddress_DEFAULT
  }
return *p.BusinessAddress
}
var UserAttributes_HideSponsorBilling_DEFAULT bool
func (p *UserAttributes) GetHideSponsorBilling() bool {
  if !p.IsSetHideSponsorBilling() {
    return UserAttributes_HideSponsorBilling_DEFAULT
  }
return *p.HideSponsorBilling
}
var UserAttributes_UseEmailAutoFiling_DEFAULT bool
func (p *UserAttributes) GetUseEmailAutoFiling() bool {
  if !p.IsSetUseEmailAutoFiling() {
    return UserAttributes_UseEmailAutoFiling_DEFAULT
  }
return *p.UseEmailAutoFiling
}
var UserAttributes_ReminderEmailConfig_DEFAULT ReminderEmailConfig
func (p *UserAttributes) GetReminderEmailConfig() ReminderEmailConfig {
  if !p.IsSetReminderEmailConfig() {
    return UserAttributes_ReminderEmailConfig_DEFAULT
  }
return *p.ReminderEmailConfig
}
var UserAttributes_EmailAddressLastConfirmed_DEFAULT Timestamp
func (p *UserAttributes) GetEmailAddressLastConfirmed() Timestamp {
  if !p.IsSetEmailAddressLastConfirmed() {
    return UserAttributes_EmailAddressLastConfirmed_DEFAULT
  }
return *p.EmailAddressLastConfirmed
}
var UserAttributes_PasswordUpdated_DEFAULT Timestamp
func (p *UserAttributes) GetPasswordUpdated() Timestamp {
  if !p.IsSetPasswordUpdated() {
    return UserAttributes_PasswordUpdated_DEFAULT
  }
return *p.PasswordUpdated
}
var UserAttributes_SalesforcePushEnabled_DEFAULT bool
func (p *UserAttributes) GetSalesforcePushEnabled() bool {
  if !p.IsSetSalesforcePushEnabled() {
    return UserAttributes_SalesforcePushEnabled_DEFAULT
  }
return *p.SalesforcePushEnabled
}
var UserAttributes_ShouldLogClientEvent_DEFAULT bool
func (p *UserAttributes) GetShouldLogClientEvent() bool {
  if !p.IsSetShouldLogClientEvent() {
    return UserAttributes_ShouldLogClientEvent_DEFAULT
  }
return *p.ShouldLogClientEvent
}
var UserAttributes_OptOutMachineLearning_DEFAULT bool
func (p *UserAttributes) GetOptOutMachineLearning() bool {
  if !p.IsSetOptOutMachineLearning() {
    return UserAttributes_OptOutMachineLearning_DEFAULT
  }
return *p.OptOutMachineLearning
}
func (p *UserAttributes) IsSetDefaultLocationName() bool {
  return p.DefaultLocationName != nil
}

func (p *UserAttributes) IsSetDefaultLatitude() bool {
  return p.DefaultLatitude != nil
}

func (p *UserAttributes) IsSetDefaultLongitude() bool {
  return p.DefaultLongitude != nil
}

func (p *UserAttributes) IsSetPreactivation() bool {
  return p.Preactivation != nil
}

func (p *UserAttributes) IsSetViewedPromotions() bool {
  return p.ViewedPromotions != nil
}

func (p *UserAttributes) IsSetIncomingEmailAddress() bool {
  return p.IncomingEmailAddress != nil
}

func (p *UserAttributes) IsSetRecentMailedAddresses() bool {
  return p.RecentMailedAddresses != nil
}

func (p *UserAttributes) IsSetComments() bool {
  return p.Comments != nil
}

func (p *UserAttributes) IsSetDateAgreedToTermsOfService() bool {
  return p.DateAgreedToTermsOfService != nil
}

func (p *UserAttributes) IsSetMaxReferrals() bool {
  return p.MaxReferrals != nil
}

func (p *UserAttributes) IsSetReferralCount() bool {
  return p.ReferralCount != nil
}

func (p *UserAttributes) IsSetRefererCode() bool {
  return p.RefererCode != nil
}

func (p *UserAttributes) IsSetSentEmailDate() bool {
  return p.SentEmailDate != nil
}

func (p *UserAttributes) IsSetSentEmailCount() bool {
  return p.SentEmailCount != nil
}

func (p *UserAttributes) IsSetDailyEmailLimit() bool {
  return p.DailyEmailLimit != nil
}

func (p *UserAttributes) IsSetEmailOptOutDate() bool {
  return p.EmailOptOutDate != nil
}

func (p *UserAttributes) IsSetPartnerEmailOptInDate() bool {
  return p.PartnerEmailOptInDate != nil
}

func (p *UserAttributes) IsSetPreferredLanguage() bool {
  return p.PreferredLanguage != nil
}

func (p *UserAttributes) IsSetPreferredCountry() bool {
  return p.PreferredCountry != nil
}

func (p *UserAttributes) IsSetClipFullPage() bool {
  return p.ClipFullPage != nil
}

func (p *UserAttributes) IsSetTwitterUserName() bool {
  return p.TwitterUserName != nil
}

func (p *UserAttributes) IsSetTwitterId() bool {
  return p.TwitterId != nil
}

func (p *UserAttributes) IsSetGroupName() bool {
  return p.GroupName != nil
}

func (p *UserAttributes) IsSetRecognitionLanguage() bool {
  return p.RecognitionLanguage != nil
}

func (p *UserAttributes) IsSetReferralProof() bool {
  return p.ReferralProof != nil
}

func (p *UserAttributes) IsSetEducationalDiscount() bool {
  return p.EducationalDiscount != nil
}

func (p *UserAttributes) IsSetBusinessAddress() bool {
  return p.BusinessAddress != nil
}

func (p *UserAttributes) IsSetHideSponsorBilling() bool {
  return p.HideSponsorBilling != nil
}

func (p *UserAttributes) IsSetUseEmailAutoFiling() bool {
  return p.UseEmailAutoFiling != nil
}

func (p *UserAttributes) IsSetReminderEmailConfig() bool {
  return p.ReminderEmailConfig != nil
}

func (p *UserAttributes) IsSetEmailAddressLastConfirmed() bool {
  return p.EmailAddressLastConfirmed != nil
}

func (p *UserAttributes) IsSetPasswordUpdated() bool {
  return p.PasswordUpdated != nil
}

func (p *UserAttributes) IsSetSalesforcePushEnabled() bool {
  return p.SalesforcePushEnabled != nil
}

func (p *UserAttributes) IsSetShouldLogClientEvent() bool {
  return p.ShouldLogClientEvent != nil
}

func (p *UserAttributes) IsSetOptOutMachineLearning() bool {
  return p.OptOutMachineLearning != nil
}

func (p *UserAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField29(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField33(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField34(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField35(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField36(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField37(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField38(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField39(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAttributes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DefaultLocationName = &v
}
  return nil
}

func (p *UserAttributes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DefaultLatitude = &v
}
  return nil
}

func (p *UserAttributes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DefaultLongitude = &v
}
  return nil
}

func (p *UserAttributes)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Preactivation = &v
}
  return nil
}

func (p *UserAttributes)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ViewedPromotions =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.ViewedPromotions = append(p.ViewedPromotions, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserAttributes)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IncomingEmailAddress = &v
}
  return nil
}

func (p *UserAttributes)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.RecentMailedAddresses =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.RecentMailedAddresses = append(p.RecentMailedAddresses, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserAttributes)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Comments = &v
}
  return nil
}

func (p *UserAttributes)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := Timestamp(v)
  p.DateAgreedToTermsOfService = &temp
}
  return nil
}

func (p *UserAttributes)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.MaxReferrals = &v
}
  return nil
}

func (p *UserAttributes)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.ReferralCount = &v
}
  return nil
}

func (p *UserAttributes)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.RefererCode = &v
}
  return nil
}

func (p *UserAttributes)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  temp := Timestamp(v)
  p.SentEmailDate = &temp
}
  return nil
}

func (p *UserAttributes)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.SentEmailCount = &v
}
  return nil
}

func (p *UserAttributes)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.DailyEmailLimit = &v
}
  return nil
}

func (p *UserAttributes)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  temp := Timestamp(v)
  p.EmailOptOutDate = &temp
}
  return nil
}

func (p *UserAttributes)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  temp := Timestamp(v)
  p.PartnerEmailOptInDate = &temp
}
  return nil
}

func (p *UserAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.PreferredLanguage = &v
}
  return nil
}

func (p *UserAttributes)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PreferredCountry = &v
}
  return nil
}

func (p *UserAttributes)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.ClipFullPage = &v
}
  return nil
}

func (p *UserAttributes)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.TwitterUserName = &v
}
  return nil
}

func (p *UserAttributes)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.TwitterId = &v
}
  return nil
}

func (p *UserAttributes)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.GroupName = &v
}
  return nil
}

func (p *UserAttributes)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.RecognitionLanguage = &v
}
  return nil
}

func (p *UserAttributes)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.ReferralProof = &v
}
  return nil
}

func (p *UserAttributes)  ReadField29(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.EducationalDiscount = &v
}
  return nil
}

func (p *UserAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.BusinessAddress = &v
}
  return nil
}

func (p *UserAttributes)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.HideSponsorBilling = &v
}
  return nil
}

func (p *UserAttributes)  ReadField33(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.UseEmailAutoFiling = &v
}
  return nil
}

func (p *UserAttributes)  ReadField34(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  temp := ReminderEmailConfig(v)
  p.ReminderEmailConfig = &temp
}
  return nil
}

func (p *UserAttributes)  ReadField35(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  temp := Timestamp(v)
  p.EmailAddressLastConfirmed = &temp
}
  return nil
}

func (p *UserAttributes)  ReadField36(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  temp := Timestamp(v)
  p.PasswordUpdated = &temp
}
  return nil
}

func (p *UserAttributes)  ReadField37(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.SalesforcePushEnabled = &v
}
  return nil
}

func (p *UserAttributes)  ReadField38(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.ShouldLogClientEvent = &v
}
  return nil
}

func (p *UserAttributes)  ReadField39(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  p.OptOutMachineLearning = &v
}
  return nil
}

func (p *UserAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField33(oprot); err != nil { return err }
    if err := p.writeField34(oprot); err != nil { return err }
    if err := p.writeField35(oprot); err != nil { return err }
    if err := p.writeField36(oprot); err != nil { return err }
    if err := p.writeField37(oprot); err != nil { return err }
    if err := p.writeField38(oprot); err != nil { return err }
    if err := p.writeField39(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAttributes) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultLocationName() {
    if err := oprot.WriteFieldBegin("defaultLocationName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:defaultLocationName: ", p), err) }
    if err := oprot.WriteString(string(*p.DefaultLocationName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultLocationName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:defaultLocationName: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultLatitude() {
    if err := oprot.WriteFieldBegin("defaultLatitude", thrift.DOUBLE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:defaultLatitude: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.DefaultLatitude)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultLatitude (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:defaultLatitude: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultLongitude() {
    if err := oprot.WriteFieldBegin("defaultLongitude", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:defaultLongitude: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.DefaultLongitude)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultLongitude (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:defaultLongitude: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPreactivation() {
    if err := oprot.WriteFieldBegin("preactivation", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:preactivation: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Preactivation)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.preactivation (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:preactivation: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetViewedPromotions() {
    if err := oprot.WriteFieldBegin("viewedPromotions", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:viewedPromotions: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ViewedPromotions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ViewedPromotions {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:viewedPromotions: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingEmailAddress() {
    if err := oprot.WriteFieldBegin("incomingEmailAddress", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:incomingEmailAddress: ", p), err) }
    if err := oprot.WriteString(string(*p.IncomingEmailAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingEmailAddress (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:incomingEmailAddress: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecentMailedAddresses() {
    if err := oprot.WriteFieldBegin("recentMailedAddresses", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:recentMailedAddresses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.RecentMailedAddresses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.RecentMailedAddresses {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:recentMailedAddresses: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetComments() {
    if err := oprot.WriteFieldBegin("comments", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:comments: ", p), err) }
    if err := oprot.WriteString(string(*p.Comments)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comments (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:comments: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetDateAgreedToTermsOfService() {
    if err := oprot.WriteFieldBegin("dateAgreedToTermsOfService", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:dateAgreedToTermsOfService: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DateAgreedToTermsOfService)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dateAgreedToTermsOfService (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:dateAgreedToTermsOfService: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxReferrals() {
    if err := oprot.WriteFieldBegin("maxReferrals", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:maxReferrals: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxReferrals)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxReferrals (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:maxReferrals: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetReferralCount() {
    if err := oprot.WriteFieldBegin("referralCount", thrift.I32, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:referralCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReferralCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.referralCount (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:referralCount: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetRefererCode() {
    if err := oprot.WriteFieldBegin("refererCode", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:refererCode: ", p), err) }
    if err := oprot.WriteString(string(*p.RefererCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.refererCode (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:refererCode: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetSentEmailDate() {
    if err := oprot.WriteFieldBegin("sentEmailDate", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:sentEmailDate: ", p), err) }
    if err := oprot.WriteI64(int64(*p.SentEmailDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sentEmailDate (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:sentEmailDate: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetSentEmailCount() {
    if err := oprot.WriteFieldBegin("sentEmailCount", thrift.I32, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:sentEmailCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SentEmailCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sentEmailCount (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:sentEmailCount: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetDailyEmailLimit() {
    if err := oprot.WriteFieldBegin("dailyEmailLimit", thrift.I32, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:dailyEmailLimit: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DailyEmailLimit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dailyEmailLimit (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:dailyEmailLimit: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmailOptOutDate() {
    if err := oprot.WriteFieldBegin("emailOptOutDate", thrift.I64, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:emailOptOutDate: ", p), err) }
    if err := oprot.WriteI64(int64(*p.EmailOptOutDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.emailOptOutDate (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:emailOptOutDate: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetPartnerEmailOptInDate() {
    if err := oprot.WriteFieldBegin("partnerEmailOptInDate", thrift.I64, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:partnerEmailOptInDate: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PartnerEmailOptInDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partnerEmailOptInDate (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:partnerEmailOptInDate: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetPreferredLanguage() {
    if err := oprot.WriteFieldBegin("preferredLanguage", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:preferredLanguage: ", p), err) }
    if err := oprot.WriteString(string(*p.PreferredLanguage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.preferredLanguage (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:preferredLanguage: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetPreferredCountry() {
    if err := oprot.WriteFieldBegin("preferredCountry", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:preferredCountry: ", p), err) }
    if err := oprot.WriteString(string(*p.PreferredCountry)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.preferredCountry (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:preferredCountry: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField22(oprot thrift.TProtocol) (err error) {
  if p.IsSetClipFullPage() {
    if err := oprot.WriteFieldBegin("clipFullPage", thrift.BOOL, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:clipFullPage: ", p), err) }
    if err := oprot.WriteBool(bool(*p.ClipFullPage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.clipFullPage (22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:clipFullPage: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField23(oprot thrift.TProtocol) (err error) {
  if p.IsSetTwitterUserName() {
    if err := oprot.WriteFieldBegin("twitterUserName", thrift.STRING, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:twitterUserName: ", p), err) }
    if err := oprot.WriteString(string(*p.TwitterUserName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.twitterUserName (23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:twitterUserName: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField24(oprot thrift.TProtocol) (err error) {
  if p.IsSetTwitterId() {
    if err := oprot.WriteFieldBegin("twitterId", thrift.STRING, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:twitterId: ", p), err) }
    if err := oprot.WriteString(string(*p.TwitterId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.twitterId (24) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:twitterId: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField25(oprot thrift.TProtocol) (err error) {
  if p.IsSetGroupName() {
    if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:groupName: ", p), err) }
    if err := oprot.WriteString(string(*p.GroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.groupName (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:groupName: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField26(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecognitionLanguage() {
    if err := oprot.WriteFieldBegin("recognitionLanguage", thrift.STRING, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:recognitionLanguage: ", p), err) }
    if err := oprot.WriteString(string(*p.RecognitionLanguage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recognitionLanguage (26) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:recognitionLanguage: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField28(oprot thrift.TProtocol) (err error) {
  if p.IsSetReferralProof() {
    if err := oprot.WriteFieldBegin("referralProof", thrift.STRING, 28); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:referralProof: ", p), err) }
    if err := oprot.WriteString(string(*p.ReferralProof)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.referralProof (28) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 28:referralProof: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField29(oprot thrift.TProtocol) (err error) {
  if p.IsSetEducationalDiscount() {
    if err := oprot.WriteFieldBegin("educationalDiscount", thrift.BOOL, 29); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:educationalDiscount: ", p), err) }
    if err := oprot.WriteBool(bool(*p.EducationalDiscount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.educationalDiscount (29) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 29:educationalDiscount: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessAddress() {
    if err := oprot.WriteFieldBegin("businessAddress", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:businessAddress: ", p), err) }
    if err := oprot.WriteString(string(*p.BusinessAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.businessAddress (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:businessAddress: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField31(oprot thrift.TProtocol) (err error) {
  if p.IsSetHideSponsorBilling() {
    if err := oprot.WriteFieldBegin("hideSponsorBilling", thrift.BOOL, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:hideSponsorBilling: ", p), err) }
    if err := oprot.WriteBool(bool(*p.HideSponsorBilling)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hideSponsorBilling (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:hideSponsorBilling: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField33(oprot thrift.TProtocol) (err error) {
  if p.IsSetUseEmailAutoFiling() {
    if err := oprot.WriteFieldBegin("useEmailAutoFiling", thrift.BOOL, 33); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:useEmailAutoFiling: ", p), err) }
    if err := oprot.WriteBool(bool(*p.UseEmailAutoFiling)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.useEmailAutoFiling (33) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 33:useEmailAutoFiling: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField34(oprot thrift.TProtocol) (err error) {
  if p.IsSetReminderEmailConfig() {
    if err := oprot.WriteFieldBegin("reminderEmailConfig", thrift.I32, 34); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:reminderEmailConfig: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReminderEmailConfig)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reminderEmailConfig (34) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 34:reminderEmailConfig: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField35(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmailAddressLastConfirmed() {
    if err := oprot.WriteFieldBegin("emailAddressLastConfirmed", thrift.I64, 35); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:emailAddressLastConfirmed: ", p), err) }
    if err := oprot.WriteI64(int64(*p.EmailAddressLastConfirmed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.emailAddressLastConfirmed (35) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 35:emailAddressLastConfirmed: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField36(oprot thrift.TProtocol) (err error) {
  if p.IsSetPasswordUpdated() {
    if err := oprot.WriteFieldBegin("passwordUpdated", thrift.I64, 36); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:passwordUpdated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PasswordUpdated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.passwordUpdated (36) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 36:passwordUpdated: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField37(oprot thrift.TProtocol) (err error) {
  if p.IsSetSalesforcePushEnabled() {
    if err := oprot.WriteFieldBegin("salesforcePushEnabled", thrift.BOOL, 37); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:salesforcePushEnabled: ", p), err) }
    if err := oprot.WriteBool(bool(*p.SalesforcePushEnabled)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.salesforcePushEnabled (37) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 37:salesforcePushEnabled: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField38(oprot thrift.TProtocol) (err error) {
  if p.IsSetShouldLogClientEvent() {
    if err := oprot.WriteFieldBegin("shouldLogClientEvent", thrift.BOOL, 38); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:shouldLogClientEvent: ", p), err) }
    if err := oprot.WriteBool(bool(*p.ShouldLogClientEvent)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.shouldLogClientEvent (38) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 38:shouldLogClientEvent: ", p), err) }
  }
  return err
}

func (p *UserAttributes) writeField39(oprot thrift.TProtocol) (err error) {
  if p.IsSetOptOutMachineLearning() {
    if err := oprot.WriteFieldBegin("optOutMachineLearning", thrift.BOOL, 39); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:optOutMachineLearning: ", p), err) }
    if err := oprot.WriteBool(bool(*p.OptOutMachineLearning)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optOutMachineLearning (39) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 39:optOutMachineLearning: ", p), err) }
  }
  return err
}

func (p *UserAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAttributes(%+v)", *p)
}

// A structure holding the optional attributes associated with users
// in a business.
// 
// <dl>
//  <dt>title</dt>
//  <dd>Free form text of this user's title in the business</dd>
// 
//  <dt>location</dt>
//  <dd>City, State (for US) or City / Province for other countries</dd>
// 
//  <dt>department</dt>
//  <dd>Free form text of the department this user belongs to.</dd>
// 
//  <dt>mobilePhone</dt>
//  <dd>User's mobile phone number. Stored as plain text without any formatting.</dd>
// 
//  <dt>linkedInProfileUrl</dt>
//  <dd>URL to user's public LinkedIn profile page. This should only contain
//  the portion relative to the base LinkedIn URL. For example: "/pub/john-smith/".
//  </dd>
// 
//  <dt>workPhone</dt>
//  <dd>User's work phone number. Stored as plain text without any formatting.</dd>
// 
//  <dt>companyStartDate</dt>
//  <dd>The date on which the user started working at their company.</dd>
// </dl>
// 
// Attributes:
//  - Title
//  - Location
//  - Department
//  - MobilePhone
//  - LinkedInProfileUrl
//  - WorkPhone
//  - CompanyStartDate
type BusinessUserAttributes struct {
  Title *string `thrift:"title,1" db:"title" json:"title,omitempty"`
  Location *string `thrift:"location,2" db:"location" json:"location,omitempty"`
  Department *string `thrift:"department,3" db:"department" json:"department,omitempty"`
  MobilePhone *string `thrift:"mobilePhone,4" db:"mobilePhone" json:"mobilePhone,omitempty"`
  LinkedInProfileUrl *string `thrift:"linkedInProfileUrl,5" db:"linkedInProfileUrl" json:"linkedInProfileUrl,omitempty"`
  WorkPhone *string `thrift:"workPhone,6" db:"workPhone" json:"workPhone,omitempty"`
  CompanyStartDate *Timestamp `thrift:"companyStartDate,7" db:"companyStartDate" json:"companyStartDate,omitempty"`
}

func NewBusinessUserAttributes() *BusinessUserAttributes {
  return &BusinessUserAttributes{}
}

var BusinessUserAttributes_Title_DEFAULT string
func (p *BusinessUserAttributes) GetTitle() string {
  if !p.IsSetTitle() {
    return BusinessUserAttributes_Title_DEFAULT
  }
return *p.Title
}
var BusinessUserAttributes_Location_DEFAULT string
func (p *BusinessUserAttributes) GetLocation() string {
  if !p.IsSetLocation() {
    return BusinessUserAttributes_Location_DEFAULT
  }
return *p.Location
}
var BusinessUserAttributes_Department_DEFAULT string
func (p *BusinessUserAttributes) GetDepartment() string {
  if !p.IsSetDepartment() {
    return BusinessUserAttributes_Department_DEFAULT
  }
return *p.Department
}
var BusinessUserAttributes_MobilePhone_DEFAULT string
func (p *BusinessUserAttributes) GetMobilePhone() string {
  if !p.IsSetMobilePhone() {
    return BusinessUserAttributes_MobilePhone_DEFAULT
  }
return *p.MobilePhone
}
var BusinessUserAttributes_LinkedInProfileUrl_DEFAULT string
func (p *BusinessUserAttributes) GetLinkedInProfileUrl() string {
  if !p.IsSetLinkedInProfileUrl() {
    return BusinessUserAttributes_LinkedInProfileUrl_DEFAULT
  }
return *p.LinkedInProfileUrl
}
var BusinessUserAttributes_WorkPhone_DEFAULT string
func (p *BusinessUserAttributes) GetWorkPhone() string {
  if !p.IsSetWorkPhone() {
    return BusinessUserAttributes_WorkPhone_DEFAULT
  }
return *p.WorkPhone
}
var BusinessUserAttributes_CompanyStartDate_DEFAULT Timestamp
func (p *BusinessUserAttributes) GetCompanyStartDate() Timestamp {
  if !p.IsSetCompanyStartDate() {
    return BusinessUserAttributes_CompanyStartDate_DEFAULT
  }
return *p.CompanyStartDate
}
func (p *BusinessUserAttributes) IsSetTitle() bool {
  return p.Title != nil
}

func (p *BusinessUserAttributes) IsSetLocation() bool {
  return p.Location != nil
}

func (p *BusinessUserAttributes) IsSetDepartment() bool {
  return p.Department != nil
}

func (p *BusinessUserAttributes) IsSetMobilePhone() bool {
  return p.MobilePhone != nil
}

func (p *BusinessUserAttributes) IsSetLinkedInProfileUrl() bool {
  return p.LinkedInProfileUrl != nil
}

func (p *BusinessUserAttributes) IsSetWorkPhone() bool {
  return p.WorkPhone != nil
}

func (p *BusinessUserAttributes) IsSetCompanyStartDate() bool {
  return p.CompanyStartDate != nil
}

func (p *BusinessUserAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BusinessUserAttributes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = &v
}
  return nil
}

func (p *BusinessUserAttributes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Location = &v
}
  return nil
}

func (p *BusinessUserAttributes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Department = &v
}
  return nil
}

func (p *BusinessUserAttributes)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MobilePhone = &v
}
  return nil
}

func (p *BusinessUserAttributes)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LinkedInProfileUrl = &v
}
  return nil
}

func (p *BusinessUserAttributes)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.WorkPhone = &v
}
  return nil
}

func (p *BusinessUserAttributes)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Timestamp(v)
  p.CompanyStartDate = &temp
}
  return nil
}

func (p *BusinessUserAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BusinessUserAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BusinessUserAttributes) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTitle() {
    if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
    if err := oprot.WriteString(string(*p.Title)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  }
  return err
}

func (p *BusinessUserAttributes) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLocation() {
    if err := oprot.WriteFieldBegin("location", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:location: ", p), err) }
    if err := oprot.WriteString(string(*p.Location)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.location (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:location: ", p), err) }
  }
  return err
}

func (p *BusinessUserAttributes) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDepartment() {
    if err := oprot.WriteFieldBegin("department", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:department: ", p), err) }
    if err := oprot.WriteString(string(*p.Department)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.department (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:department: ", p), err) }
  }
  return err
}

func (p *BusinessUserAttributes) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMobilePhone() {
    if err := oprot.WriteFieldBegin("mobilePhone", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mobilePhone: ", p), err) }
    if err := oprot.WriteString(string(*p.MobilePhone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.mobilePhone (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mobilePhone: ", p), err) }
  }
  return err
}

func (p *BusinessUserAttributes) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetLinkedInProfileUrl() {
    if err := oprot.WriteFieldBegin("linkedInProfileUrl", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:linkedInProfileUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.LinkedInProfileUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.linkedInProfileUrl (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:linkedInProfileUrl: ", p), err) }
  }
  return err
}

func (p *BusinessUserAttributes) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkPhone() {
    if err := oprot.WriteFieldBegin("workPhone", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:workPhone: ", p), err) }
    if err := oprot.WriteString(string(*p.WorkPhone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.workPhone (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:workPhone: ", p), err) }
  }
  return err
}

func (p *BusinessUserAttributes) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetCompanyStartDate() {
    if err := oprot.WriteFieldBegin("companyStartDate", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:companyStartDate: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CompanyStartDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.companyStartDate (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:companyStartDate: ", p), err) }
  }
  return err
}

func (p *BusinessUserAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BusinessUserAttributes(%+v)", *p)
}

//  This represents the bookkeeping information for the user's subscription.
// 
// <dl>
//  <dt>uploadLimitEnd</dt>
//    <dd>The date and time when the current upload limit
//    expires.  At this time, the monthly upload count reverts to 0 and a new
//    limit is imposed.  This date and time is exclusive, so this is effectively
//    the start of the new month.
//    </dd>
//  <dt>uploadLimitNextMonth</dt>
//    <dd> When uploadLimitEnd is reached, the service
//    will change uploadLimit to uploadLimitNextMonth. If a premium account is
//    canceled, this mechanism will reset the quota appropriately.
//    </dd>
//  <dt>premiumServiceStatus</dt>
//    <dd>Indicates the phases of a premium account
//    during the billing process.
//    </dd>
//  <dt>premiumOrderNumber</dt>
//    <dd>The order number used by the commerce system to
//    process recurring payments
//    </dd>
//  <dt>premiumServiceStart</dt>
//    <dd>The start date when this premium promotion
//    began (this number will get overwritten if a premium service is canceled
//    and then re-activated).
//    </dd>
//  <dt>premiumCommerceService</dt>
//    <dd>The commerce system used (paypal, Google
//    checkout, etc)
//    </dd>
//  <dt>premiumServiceSKU</dt>
//    <dd>The code associated with the purchase eg. monthly
//    or annual purchase. Clients should interpret this value and localize it.
//    </dd>
//  <dt>lastSuccessfulCharge</dt>
//    <dd>Date the last time the user was charged.
//    Null if never charged.
//    </dd>
//  <dt>lastFailedCharge</dt>
//    <dd>Date the last time a charge was attempted and
//    failed.
//    </dd>
//  <dt>lastFailedChargeReason</dt>
//    <dd>Reason provided for the charge failure
//    </dd>
//  <dt>nextPaymentDue</dt>
//    <dd>The end of the billing cycle. This could be in the
//    past if there are failed charges.
//    </dd>
//  <dt>premiumLockUntil</dt>
//    <dd>An internal variable to manage locking operations
//    on the commerce variables.
//    </dd>
//  <dt>updated</dt>
//    <dd>The date any modification where made to this record.
//    </dd>
//  <dt>premiumSubscriptionNumber</dt>
//    <dd>The number number identifying the
//    recurring subscription used to make the recurring charges.
//    </dd>
//  <dt>lastRequestedCharge</dt>
//    <dd>Date charge last attempted</dd>
//  <dt>currency</dt>
//    <dd>ISO 4217 currency code</dd>
//  <dt>unitPrice</dt>
//    <dd>charge in the smallest unit of the currency (e.g. cents for USD)</dd>
//  <dt>businessId</dt>
//    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
//  <dt>businessName</dt>
//    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
//  <dt>businessRole</dt>
//    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
//  <dt>unitDiscount</dt>
//    <dd>discount per seat in negative amount and smallest unit of the currency (e.g.
//        cents for USD)</dd>
//  <dt>nextChargeDate</dt>
//    <dd>The next time the user will be charged, may or may not be the same as
//        nextPaymentDue</dd>
//  </dl>
// 
// Attributes:
//  - UploadLimitEnd
//  - UploadLimitNextMonth
//  - PremiumServiceStatus
//  - PremiumOrderNumber
//  - PremiumCommerceService
//  - PremiumServiceStart
//  - PremiumServiceSKU
//  - LastSuccessfulCharge
//  - LastFailedCharge
//  - LastFailedChargeReason
//  - NextPaymentDue
//  - PremiumLockUntil
//  - Updated
//  - PremiumSubscriptionNumber
//  - LastRequestedCharge
//  - Currency
//  - UnitPrice
//  - BusinessId
//  - BusinessName
//  - BusinessRole
//  - UnitDiscount
//  - NextChargeDate
//  - AvailablePoints
type Accounting struct {
  // unused field # 1
  UploadLimitEnd *Timestamp `thrift:"uploadLimitEnd,2" db:"uploadLimitEnd" json:"uploadLimitEnd,omitempty"`
  UploadLimitNextMonth *int64 `thrift:"uploadLimitNextMonth,3" db:"uploadLimitNextMonth" json:"uploadLimitNextMonth,omitempty"`
  PremiumServiceStatus *PremiumOrderStatus `thrift:"premiumServiceStatus,4" db:"premiumServiceStatus" json:"premiumServiceStatus,omitempty"`
  PremiumOrderNumber *string `thrift:"premiumOrderNumber,5" db:"premiumOrderNumber" json:"premiumOrderNumber,omitempty"`
  PremiumCommerceService *string `thrift:"premiumCommerceService,6" db:"premiumCommerceService" json:"premiumCommerceService,omitempty"`
  PremiumServiceStart *Timestamp `thrift:"premiumServiceStart,7" db:"premiumServiceStart" json:"premiumServiceStart,omitempty"`
  PremiumServiceSKU *string `thrift:"premiumServiceSKU,8" db:"premiumServiceSKU" json:"premiumServiceSKU,omitempty"`
  LastSuccessfulCharge *Timestamp `thrift:"lastSuccessfulCharge,9" db:"lastSuccessfulCharge" json:"lastSuccessfulCharge,omitempty"`
  LastFailedCharge *Timestamp `thrift:"lastFailedCharge,10" db:"lastFailedCharge" json:"lastFailedCharge,omitempty"`
  LastFailedChargeReason *string `thrift:"lastFailedChargeReason,11" db:"lastFailedChargeReason" json:"lastFailedChargeReason,omitempty"`
  NextPaymentDue *Timestamp `thrift:"nextPaymentDue,12" db:"nextPaymentDue" json:"nextPaymentDue,omitempty"`
  PremiumLockUntil *Timestamp `thrift:"premiumLockUntil,13" db:"premiumLockUntil" json:"premiumLockUntil,omitempty"`
  Updated *Timestamp `thrift:"updated,14" db:"updated" json:"updated,omitempty"`
  // unused field # 15
  PremiumSubscriptionNumber *string `thrift:"premiumSubscriptionNumber,16" db:"premiumSubscriptionNumber" json:"premiumSubscriptionNumber,omitempty"`
  LastRequestedCharge *Timestamp `thrift:"lastRequestedCharge,17" db:"lastRequestedCharge" json:"lastRequestedCharge,omitempty"`
  Currency *string `thrift:"currency,18" db:"currency" json:"currency,omitempty"`
  UnitPrice *int32 `thrift:"unitPrice,19" db:"unitPrice" json:"unitPrice,omitempty"`
  BusinessId *int32 `thrift:"businessId,20" db:"businessId" json:"businessId,omitempty"`
  BusinessName *string `thrift:"businessName,21" db:"businessName" json:"businessName,omitempty"`
  BusinessRole *BusinessUserRole `thrift:"businessRole,22" db:"businessRole" json:"businessRole,omitempty"`
  UnitDiscount *int32 `thrift:"unitDiscount,23" db:"unitDiscount" json:"unitDiscount,omitempty"`
  NextChargeDate *Timestamp `thrift:"nextChargeDate,24" db:"nextChargeDate" json:"nextChargeDate,omitempty"`
  AvailablePoints *int32 `thrift:"availablePoints,25" db:"availablePoints" json:"availablePoints,omitempty"`
}

func NewAccounting() *Accounting {
  return &Accounting{}
}

var Accounting_UploadLimitEnd_DEFAULT Timestamp
func (p *Accounting) GetUploadLimitEnd() Timestamp {
  if !p.IsSetUploadLimitEnd() {
    return Accounting_UploadLimitEnd_DEFAULT
  }
return *p.UploadLimitEnd
}
var Accounting_UploadLimitNextMonth_DEFAULT int64
func (p *Accounting) GetUploadLimitNextMonth() int64 {
  if !p.IsSetUploadLimitNextMonth() {
    return Accounting_UploadLimitNextMonth_DEFAULT
  }
return *p.UploadLimitNextMonth
}
var Accounting_PremiumServiceStatus_DEFAULT PremiumOrderStatus
func (p *Accounting) GetPremiumServiceStatus() PremiumOrderStatus {
  if !p.IsSetPremiumServiceStatus() {
    return Accounting_PremiumServiceStatus_DEFAULT
  }
return *p.PremiumServiceStatus
}
var Accounting_PremiumOrderNumber_DEFAULT string
func (p *Accounting) GetPremiumOrderNumber() string {
  if !p.IsSetPremiumOrderNumber() {
    return Accounting_PremiumOrderNumber_DEFAULT
  }
return *p.PremiumOrderNumber
}
var Accounting_PremiumCommerceService_DEFAULT string
func (p *Accounting) GetPremiumCommerceService() string {
  if !p.IsSetPremiumCommerceService() {
    return Accounting_PremiumCommerceService_DEFAULT
  }
return *p.PremiumCommerceService
}
var Accounting_PremiumServiceStart_DEFAULT Timestamp
func (p *Accounting) GetPremiumServiceStart() Timestamp {
  if !p.IsSetPremiumServiceStart() {
    return Accounting_PremiumServiceStart_DEFAULT
  }
return *p.PremiumServiceStart
}
var Accounting_PremiumServiceSKU_DEFAULT string
func (p *Accounting) GetPremiumServiceSKU() string {
  if !p.IsSetPremiumServiceSKU() {
    return Accounting_PremiumServiceSKU_DEFAULT
  }
return *p.PremiumServiceSKU
}
var Accounting_LastSuccessfulCharge_DEFAULT Timestamp
func (p *Accounting) GetLastSuccessfulCharge() Timestamp {
  if !p.IsSetLastSuccessfulCharge() {
    return Accounting_LastSuccessfulCharge_DEFAULT
  }
return *p.LastSuccessfulCharge
}
var Accounting_LastFailedCharge_DEFAULT Timestamp
func (p *Accounting) GetLastFailedCharge() Timestamp {
  if !p.IsSetLastFailedCharge() {
    return Accounting_LastFailedCharge_DEFAULT
  }
return *p.LastFailedCharge
}
var Accounting_LastFailedChargeReason_DEFAULT string
func (p *Accounting) GetLastFailedChargeReason() string {
  if !p.IsSetLastFailedChargeReason() {
    return Accounting_LastFailedChargeReason_DEFAULT
  }
return *p.LastFailedChargeReason
}
var Accounting_NextPaymentDue_DEFAULT Timestamp
func (p *Accounting) GetNextPaymentDue() Timestamp {
  if !p.IsSetNextPaymentDue() {
    return Accounting_NextPaymentDue_DEFAULT
  }
return *p.NextPaymentDue
}
var Accounting_PremiumLockUntil_DEFAULT Timestamp
func (p *Accounting) GetPremiumLockUntil() Timestamp {
  if !p.IsSetPremiumLockUntil() {
    return Accounting_PremiumLockUntil_DEFAULT
  }
return *p.PremiumLockUntil
}
var Accounting_Updated_DEFAULT Timestamp
func (p *Accounting) GetUpdated() Timestamp {
  if !p.IsSetUpdated() {
    return Accounting_Updated_DEFAULT
  }
return *p.Updated
}
var Accounting_PremiumSubscriptionNumber_DEFAULT string
func (p *Accounting) GetPremiumSubscriptionNumber() string {
  if !p.IsSetPremiumSubscriptionNumber() {
    return Accounting_PremiumSubscriptionNumber_DEFAULT
  }
return *p.PremiumSubscriptionNumber
}
var Accounting_LastRequestedCharge_DEFAULT Timestamp
func (p *Accounting) GetLastRequestedCharge() Timestamp {
  if !p.IsSetLastRequestedCharge() {
    return Accounting_LastRequestedCharge_DEFAULT
  }
return *p.LastRequestedCharge
}
var Accounting_Currency_DEFAULT string
func (p *Accounting) GetCurrency() string {
  if !p.IsSetCurrency() {
    return Accounting_Currency_DEFAULT
  }
return *p.Currency
}
var Accounting_UnitPrice_DEFAULT int32
func (p *Accounting) GetUnitPrice() int32 {
  if !p.IsSetUnitPrice() {
    return Accounting_UnitPrice_DEFAULT
  }
return *p.UnitPrice
}
var Accounting_BusinessId_DEFAULT int32
func (p *Accounting) GetBusinessId() int32 {
  if !p.IsSetBusinessId() {
    return Accounting_BusinessId_DEFAULT
  }
return *p.BusinessId
}
var Accounting_BusinessName_DEFAULT string
func (p *Accounting) GetBusinessName() string {
  if !p.IsSetBusinessName() {
    return Accounting_BusinessName_DEFAULT
  }
return *p.BusinessName
}
var Accounting_BusinessRole_DEFAULT BusinessUserRole
func (p *Accounting) GetBusinessRole() BusinessUserRole {
  if !p.IsSetBusinessRole() {
    return Accounting_BusinessRole_DEFAULT
  }
return *p.BusinessRole
}
var Accounting_UnitDiscount_DEFAULT int32
func (p *Accounting) GetUnitDiscount() int32 {
  if !p.IsSetUnitDiscount() {
    return Accounting_UnitDiscount_DEFAULT
  }
return *p.UnitDiscount
}
var Accounting_NextChargeDate_DEFAULT Timestamp
func (p *Accounting) GetNextChargeDate() Timestamp {
  if !p.IsSetNextChargeDate() {
    return Accounting_NextChargeDate_DEFAULT
  }
return *p.NextChargeDate
}
var Accounting_AvailablePoints_DEFAULT int32
func (p *Accounting) GetAvailablePoints() int32 {
  if !p.IsSetAvailablePoints() {
    return Accounting_AvailablePoints_DEFAULT
  }
return *p.AvailablePoints
}
func (p *Accounting) IsSetUploadLimitEnd() bool {
  return p.UploadLimitEnd != nil
}

func (p *Accounting) IsSetUploadLimitNextMonth() bool {
  return p.UploadLimitNextMonth != nil
}

func (p *Accounting) IsSetPremiumServiceStatus() bool {
  return p.PremiumServiceStatus != nil
}

func (p *Accounting) IsSetPremiumOrderNumber() bool {
  return p.PremiumOrderNumber != nil
}

func (p *Accounting) IsSetPremiumCommerceService() bool {
  return p.PremiumCommerceService != nil
}

func (p *Accounting) IsSetPremiumServiceStart() bool {
  return p.PremiumServiceStart != nil
}

func (p *Accounting) IsSetPremiumServiceSKU() bool {
  return p.PremiumServiceSKU != nil
}

func (p *Accounting) IsSetLastSuccessfulCharge() bool {
  return p.LastSuccessfulCharge != nil
}

func (p *Accounting) IsSetLastFailedCharge() bool {
  return p.LastFailedCharge != nil
}

func (p *Accounting) IsSetLastFailedChargeReason() bool {
  return p.LastFailedChargeReason != nil
}

func (p *Accounting) IsSetNextPaymentDue() bool {
  return p.NextPaymentDue != nil
}

func (p *Accounting) IsSetPremiumLockUntil() bool {
  return p.PremiumLockUntil != nil
}

func (p *Accounting) IsSetUpdated() bool {
  return p.Updated != nil
}

func (p *Accounting) IsSetPremiumSubscriptionNumber() bool {
  return p.PremiumSubscriptionNumber != nil
}

func (p *Accounting) IsSetLastRequestedCharge() bool {
  return p.LastRequestedCharge != nil
}

func (p *Accounting) IsSetCurrency() bool {
  return p.Currency != nil
}

func (p *Accounting) IsSetUnitPrice() bool {
  return p.UnitPrice != nil
}

func (p *Accounting) IsSetBusinessId() bool {
  return p.BusinessId != nil
}

func (p *Accounting) IsSetBusinessName() bool {
  return p.BusinessName != nil
}

func (p *Accounting) IsSetBusinessRole() bool {
  return p.BusinessRole != nil
}

func (p *Accounting) IsSetUnitDiscount() bool {
  return p.UnitDiscount != nil
}

func (p *Accounting) IsSetNextChargeDate() bool {
  return p.NextChargeDate != nil
}

func (p *Accounting) IsSetAvailablePoints() bool {
  return p.AvailablePoints != nil
}

func (p *Accounting) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Accounting)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Timestamp(v)
  p.UploadLimitEnd = &temp
}
  return nil
}

func (p *Accounting)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UploadLimitNextMonth = &v
}
  return nil
}

func (p *Accounting)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := PremiumOrderStatus(v)
  p.PremiumServiceStatus = &temp
}
  return nil
}

func (p *Accounting)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PremiumOrderNumber = &v
}
  return nil
}

func (p *Accounting)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PremiumCommerceService = &v
}
  return nil
}

func (p *Accounting)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Timestamp(v)
  p.PremiumServiceStart = &temp
}
  return nil
}

func (p *Accounting)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PremiumServiceSKU = &v
}
  return nil
}

func (p *Accounting)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := Timestamp(v)
  p.LastSuccessfulCharge = &temp
}
  return nil
}

func (p *Accounting)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := Timestamp(v)
  p.LastFailedCharge = &temp
}
  return nil
}

func (p *Accounting)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.LastFailedChargeReason = &v
}
  return nil
}

func (p *Accounting)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := Timestamp(v)
  p.NextPaymentDue = &temp
}
  return nil
}

func (p *Accounting)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  temp := Timestamp(v)
  p.PremiumLockUntil = &temp
}
  return nil
}

func (p *Accounting)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  temp := Timestamp(v)
  p.Updated = &temp
}
  return nil
}

func (p *Accounting)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.PremiumSubscriptionNumber = &v
}
  return nil
}

func (p *Accounting)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  temp := Timestamp(v)
  p.LastRequestedCharge = &temp
}
  return nil
}

func (p *Accounting)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Currency = &v
}
  return nil
}

func (p *Accounting)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.UnitPrice = &v
}
  return nil
}

func (p *Accounting)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.BusinessId = &v
}
  return nil
}

func (p *Accounting)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.BusinessName = &v
}
  return nil
}

func (p *Accounting)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  temp := BusinessUserRole(v)
  p.BusinessRole = &temp
}
  return nil
}

func (p *Accounting)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.UnitDiscount = &v
}
  return nil
}

func (p *Accounting)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  temp := Timestamp(v)
  p.NextChargeDate = &temp
}
  return nil
}

func (p *Accounting)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.AvailablePoints = &v
}
  return nil
}

func (p *Accounting) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Accounting"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Accounting) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUploadLimitEnd() {
    if err := oprot.WriteFieldBegin("uploadLimitEnd", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uploadLimitEnd: ", p), err) }
    if err := oprot.WriteI64(int64(*p.UploadLimitEnd)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uploadLimitEnd (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uploadLimitEnd: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUploadLimitNextMonth() {
    if err := oprot.WriteFieldBegin("uploadLimitNextMonth", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:uploadLimitNextMonth: ", p), err) }
    if err := oprot.WriteI64(int64(*p.UploadLimitNextMonth)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uploadLimitNextMonth (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:uploadLimitNextMonth: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPremiumServiceStatus() {
    if err := oprot.WriteFieldBegin("premiumServiceStatus", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:premiumServiceStatus: ", p), err) }
    if err := oprot.WriteI32(int32(*p.PremiumServiceStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.premiumServiceStatus (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:premiumServiceStatus: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetPremiumOrderNumber() {
    if err := oprot.WriteFieldBegin("premiumOrderNumber", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:premiumOrderNumber: ", p), err) }
    if err := oprot.WriteString(string(*p.PremiumOrderNumber)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.premiumOrderNumber (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:premiumOrderNumber: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPremiumCommerceService() {
    if err := oprot.WriteFieldBegin("premiumCommerceService", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:premiumCommerceService: ", p), err) }
    if err := oprot.WriteString(string(*p.PremiumCommerceService)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.premiumCommerceService (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:premiumCommerceService: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetPremiumServiceStart() {
    if err := oprot.WriteFieldBegin("premiumServiceStart", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:premiumServiceStart: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PremiumServiceStart)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.premiumServiceStart (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:premiumServiceStart: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetPremiumServiceSKU() {
    if err := oprot.WriteFieldBegin("premiumServiceSKU", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:premiumServiceSKU: ", p), err) }
    if err := oprot.WriteString(string(*p.PremiumServiceSKU)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.premiumServiceSKU (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:premiumServiceSKU: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastSuccessfulCharge() {
    if err := oprot.WriteFieldBegin("lastSuccessfulCharge", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lastSuccessfulCharge: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastSuccessfulCharge)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastSuccessfulCharge (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lastSuccessfulCharge: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastFailedCharge() {
    if err := oprot.WriteFieldBegin("lastFailedCharge", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:lastFailedCharge: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastFailedCharge)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastFailedCharge (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:lastFailedCharge: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastFailedChargeReason() {
    if err := oprot.WriteFieldBegin("lastFailedChargeReason", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:lastFailedChargeReason: ", p), err) }
    if err := oprot.WriteString(string(*p.LastFailedChargeReason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastFailedChargeReason (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:lastFailedChargeReason: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextPaymentDue() {
    if err := oprot.WriteFieldBegin("nextPaymentDue", thrift.I64, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:nextPaymentDue: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NextPaymentDue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextPaymentDue (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:nextPaymentDue: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetPremiumLockUntil() {
    if err := oprot.WriteFieldBegin("premiumLockUntil", thrift.I64, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:premiumLockUntil: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PremiumLockUntil)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.premiumLockUntil (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:premiumLockUntil: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdated() {
    if err := oprot.WriteFieldBegin("updated", thrift.I64, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:updated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Updated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updated (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:updated: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetPremiumSubscriptionNumber() {
    if err := oprot.WriteFieldBegin("premiumSubscriptionNumber", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:premiumSubscriptionNumber: ", p), err) }
    if err := oprot.WriteString(string(*p.PremiumSubscriptionNumber)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.premiumSubscriptionNumber (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:premiumSubscriptionNumber: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastRequestedCharge() {
    if err := oprot.WriteFieldBegin("lastRequestedCharge", thrift.I64, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:lastRequestedCharge: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastRequestedCharge)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastRequestedCharge (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:lastRequestedCharge: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetCurrency() {
    if err := oprot.WriteFieldBegin("currency", thrift.STRING, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:currency: ", p), err) }
    if err := oprot.WriteString(string(*p.Currency)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.currency (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:currency: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnitPrice() {
    if err := oprot.WriteFieldBegin("unitPrice", thrift.I32, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:unitPrice: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UnitPrice)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unitPrice (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:unitPrice: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessId() {
    if err := oprot.WriteFieldBegin("businessId", thrift.I32, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:businessId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.BusinessId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.businessId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:businessId: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessName() {
    if err := oprot.WriteFieldBegin("businessName", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:businessName: ", p), err) }
    if err := oprot.WriteString(string(*p.BusinessName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.businessName (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:businessName: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField22(oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessRole() {
    if err := oprot.WriteFieldBegin("businessRole", thrift.I32, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:businessRole: ", p), err) }
    if err := oprot.WriteI32(int32(*p.BusinessRole)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.businessRole (22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:businessRole: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField23(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnitDiscount() {
    if err := oprot.WriteFieldBegin("unitDiscount", thrift.I32, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:unitDiscount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UnitDiscount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unitDiscount (23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:unitDiscount: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField24(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextChargeDate() {
    if err := oprot.WriteFieldBegin("nextChargeDate", thrift.I64, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:nextChargeDate: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NextChargeDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextChargeDate (24) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:nextChargeDate: ", p), err) }
  }
  return err
}

func (p *Accounting) writeField25(oprot thrift.TProtocol) (err error) {
  if p.IsSetAvailablePoints() {
    if err := oprot.WriteFieldBegin("availablePoints", thrift.I32, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:availablePoints: ", p), err) }
    if err := oprot.WriteI32(int32(*p.AvailablePoints)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.availablePoints (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:availablePoints: ", p), err) }
  }
  return err
}

func (p *Accounting) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Accounting(%+v)", *p)
}

// This structure is used to provide information about an Evernote Business
// membership, for members who are part of a business.
// 
// <dl>
// <dt>businessId</dt>
//   <dd>The ID of the Evernote Business account that the user is a member of.
// <dt>businessName</dt>
//   <dd>The human-readable name of the Evernote Business account that the user
//       is a member of.</dd>
// <dt>role</dt>
//   <dd>The role of the user within the Evernote Business account that
//       they are a member of.</dd>
// <dt>email</dt>
//   <dd>An e-mail address that will be used by the service in the context of your
//       Evernote Business activities.  For example, this e-mail address will be used
//       when you e-mail a business note, when you update notes in the account of
//       your business, etc.  The business e-mail cannot be used for identification
//       purposes such as for logging into the service.
//   </dd>
// <dt>updated</dt>
//   <dd>Last time the business user or business user attributes were updated.</dd>
// </dl>
// 
// Attributes:
//  - BusinessId
//  - BusinessName
//  - Role
//  - Email
//  - Updated
type BusinessUserInfo struct {
  BusinessId *int32 `thrift:"businessId,1" db:"businessId" json:"businessId,omitempty"`
  BusinessName *string `thrift:"businessName,2" db:"businessName" json:"businessName,omitempty"`
  Role *BusinessUserRole `thrift:"role,3" db:"role" json:"role,omitempty"`
  Email *string `thrift:"email,4" db:"email" json:"email,omitempty"`
  Updated *Timestamp `thrift:"updated,5" db:"updated" json:"updated,omitempty"`
}

func NewBusinessUserInfo() *BusinessUserInfo {
  return &BusinessUserInfo{}
}

var BusinessUserInfo_BusinessId_DEFAULT int32
func (p *BusinessUserInfo) GetBusinessId() int32 {
  if !p.IsSetBusinessId() {
    return BusinessUserInfo_BusinessId_DEFAULT
  }
return *p.BusinessId
}
var BusinessUserInfo_BusinessName_DEFAULT string
func (p *BusinessUserInfo) GetBusinessName() string {
  if !p.IsSetBusinessName() {
    return BusinessUserInfo_BusinessName_DEFAULT
  }
return *p.BusinessName
}
var BusinessUserInfo_Role_DEFAULT BusinessUserRole
func (p *BusinessUserInfo) GetRole() BusinessUserRole {
  if !p.IsSetRole() {
    return BusinessUserInfo_Role_DEFAULT
  }
return *p.Role
}
var BusinessUserInfo_Email_DEFAULT string
func (p *BusinessUserInfo) GetEmail() string {
  if !p.IsSetEmail() {
    return BusinessUserInfo_Email_DEFAULT
  }
return *p.Email
}
var BusinessUserInfo_Updated_DEFAULT Timestamp
func (p *BusinessUserInfo) GetUpdated() Timestamp {
  if !p.IsSetUpdated() {
    return BusinessUserInfo_Updated_DEFAULT
  }
return *p.Updated
}
func (p *BusinessUserInfo) IsSetBusinessId() bool {
  return p.BusinessId != nil
}

func (p *BusinessUserInfo) IsSetBusinessName() bool {
  return p.BusinessName != nil
}

func (p *BusinessUserInfo) IsSetRole() bool {
  return p.Role != nil
}

func (p *BusinessUserInfo) IsSetEmail() bool {
  return p.Email != nil
}

func (p *BusinessUserInfo) IsSetUpdated() bool {
  return p.Updated != nil
}

func (p *BusinessUserInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BusinessUserInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BusinessId = &v
}
  return nil
}

func (p *BusinessUserInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BusinessName = &v
}
  return nil
}

func (p *BusinessUserInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := BusinessUserRole(v)
  p.Role = &temp
}
  return nil
}

func (p *BusinessUserInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Email = &v
}
  return nil
}

func (p *BusinessUserInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Timestamp(v)
  p.Updated = &temp
}
  return nil
}

func (p *BusinessUserInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BusinessUserInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BusinessUserInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessId() {
    if err := oprot.WriteFieldBegin("businessId", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:businessId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.BusinessId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.businessId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:businessId: ", p), err) }
  }
  return err
}

func (p *BusinessUserInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessName() {
    if err := oprot.WriteFieldBegin("businessName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:businessName: ", p), err) }
    if err := oprot.WriteString(string(*p.BusinessName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.businessName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:businessName: ", p), err) }
  }
  return err
}

func (p *BusinessUserInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRole() {
    if err := oprot.WriteFieldBegin("role", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Role)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.role (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role: ", p), err) }
  }
  return err
}

func (p *BusinessUserInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmail() {
    if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:email: ", p), err) }
    if err := oprot.WriteString(string(*p.Email)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.email (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:email: ", p), err) }
  }
  return err
}

func (p *BusinessUserInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdated() {
    if err := oprot.WriteFieldBegin("updated", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:updated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Updated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updated (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:updated: ", p), err) }
  }
  return err
}

func (p *BusinessUserInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BusinessUserInfo(%+v)", *p)
}

//  This structure is used to provide account limits that are in effect for this user.
// <dl>
//  <dt>userMailLimitDaily</dt>
//    <dd>The number of emails of any type that can be sent by a user from the
//        service per day.  If an email is sent to two different recipients, this
//        counts as two emails.
//    </dd>
//  <dt>noteSizeMax</dt>
//    <dd>Maximum total size of a Note that can be added.  The size of a note is
//        calculated as:
//        ENML content length (in Unicode characters) plus the sum of all resource
//        sizes (in bytes).
//    </dd>
//  <dt>resourceSizeMax</dt>
//    <dd>Maximum size of a resource, in bytes
//    </dd>
//  <dt>userLinkedNotebookMax</dt>
//    <dd>Maximum number of linked notebooks per account.
//    </dd>
//  <dt>uploadLimit</dt>
//    <dd>The number of bytes that can be uploaded to the account
//    in the current month.  For new notes that are created, this is the length
//    of the note content (in Unicode characters) plus the size of each resource
//    (in bytes).  For edited notes, this is the the difference between the old
//    length and the new length (if this is greater than 0) plus the size of
//    each new resource.
//    </dd>
//  <dt>userNoteCountMax</dt>
//    <dd>Maximum number of Notes per user</dd>
//  <dt>userNotebookCountMax</dt>
//    <dd>Maximum number of Notebooks per user</dd>
//  <dt>userTagCountMax</dt>
//    <dd>Maximum number of Tags per account</dd>
//  <dt>noteTagCountMax</dt>
//    <dd>Maximum number of Tags per Note</dd>
//  <dt>userSavedSearchesMax</dt>
//    <dd>Maximum number of SavedSearches per account</dd>
//  <dt>noteResourceCountMax</dt>
//    <dd>The maximum number of Resources per Note</dd>
//  </dl>
// 
// Attributes:
//  - UserMailLimitDaily
//  - NoteSizeMax
//  - ResourceSizeMax
//  - UserLinkedNotebookMax
//  - UploadLimit
//  - UserNoteCountMax
//  - UserNotebookCountMax
//  - UserTagCountMax
//  - NoteTagCountMax
//  - UserSavedSearchesMax
//  - NoteResourceCountMax
type AccountLimits struct {
  UserMailLimitDaily *int32 `thrift:"userMailLimitDaily,1" db:"userMailLimitDaily" json:"userMailLimitDaily,omitempty"`
  NoteSizeMax *int64 `thrift:"noteSizeMax,2" db:"noteSizeMax" json:"noteSizeMax,omitempty"`
  ResourceSizeMax *int64 `thrift:"resourceSizeMax,3" db:"resourceSizeMax" json:"resourceSizeMax,omitempty"`
  UserLinkedNotebookMax *int32 `thrift:"userLinkedNotebookMax,4" db:"userLinkedNotebookMax" json:"userLinkedNotebookMax,omitempty"`
  UploadLimit *int64 `thrift:"uploadLimit,5" db:"uploadLimit" json:"uploadLimit,omitempty"`
  UserNoteCountMax *int32 `thrift:"userNoteCountMax,6" db:"userNoteCountMax" json:"userNoteCountMax,omitempty"`
  UserNotebookCountMax *int32 `thrift:"userNotebookCountMax,7" db:"userNotebookCountMax" json:"userNotebookCountMax,omitempty"`
  UserTagCountMax *int32 `thrift:"userTagCountMax,8" db:"userTagCountMax" json:"userTagCountMax,omitempty"`
  NoteTagCountMax *int32 `thrift:"noteTagCountMax,9" db:"noteTagCountMax" json:"noteTagCountMax,omitempty"`
  UserSavedSearchesMax *int32 `thrift:"userSavedSearchesMax,10" db:"userSavedSearchesMax" json:"userSavedSearchesMax,omitempty"`
  NoteResourceCountMax *int32 `thrift:"noteResourceCountMax,11" db:"noteResourceCountMax" json:"noteResourceCountMax,omitempty"`
}

func NewAccountLimits() *AccountLimits {
  return &AccountLimits{}
}

var AccountLimits_UserMailLimitDaily_DEFAULT int32
func (p *AccountLimits) GetUserMailLimitDaily() int32 {
  if !p.IsSetUserMailLimitDaily() {
    return AccountLimits_UserMailLimitDaily_DEFAULT
  }
return *p.UserMailLimitDaily
}
var AccountLimits_NoteSizeMax_DEFAULT int64
func (p *AccountLimits) GetNoteSizeMax() int64 {
  if !p.IsSetNoteSizeMax() {
    return AccountLimits_NoteSizeMax_DEFAULT
  }
return *p.NoteSizeMax
}
var AccountLimits_ResourceSizeMax_DEFAULT int64
func (p *AccountLimits) GetResourceSizeMax() int64 {
  if !p.IsSetResourceSizeMax() {
    return AccountLimits_ResourceSizeMax_DEFAULT
  }
return *p.ResourceSizeMax
}
var AccountLimits_UserLinkedNotebookMax_DEFAULT int32
func (p *AccountLimits) GetUserLinkedNotebookMax() int32 {
  if !p.IsSetUserLinkedNotebookMax() {
    return AccountLimits_UserLinkedNotebookMax_DEFAULT
  }
return *p.UserLinkedNotebookMax
}
var AccountLimits_UploadLimit_DEFAULT int64
func (p *AccountLimits) GetUploadLimit() int64 {
  if !p.IsSetUploadLimit() {
    return AccountLimits_UploadLimit_DEFAULT
  }
return *p.UploadLimit
}
var AccountLimits_UserNoteCountMax_DEFAULT int32
func (p *AccountLimits) GetUserNoteCountMax() int32 {
  if !p.IsSetUserNoteCountMax() {
    return AccountLimits_UserNoteCountMax_DEFAULT
  }
return *p.UserNoteCountMax
}
var AccountLimits_UserNotebookCountMax_DEFAULT int32
func (p *AccountLimits) GetUserNotebookCountMax() int32 {
  if !p.IsSetUserNotebookCountMax() {
    return AccountLimits_UserNotebookCountMax_DEFAULT
  }
return *p.UserNotebookCountMax
}
var AccountLimits_UserTagCountMax_DEFAULT int32
func (p *AccountLimits) GetUserTagCountMax() int32 {
  if !p.IsSetUserTagCountMax() {
    return AccountLimits_UserTagCountMax_DEFAULT
  }
return *p.UserTagCountMax
}
var AccountLimits_NoteTagCountMax_DEFAULT int32
func (p *AccountLimits) GetNoteTagCountMax() int32 {
  if !p.IsSetNoteTagCountMax() {
    return AccountLimits_NoteTagCountMax_DEFAULT
  }
return *p.NoteTagCountMax
}
var AccountLimits_UserSavedSearchesMax_DEFAULT int32
func (p *AccountLimits) GetUserSavedSearchesMax() int32 {
  if !p.IsSetUserSavedSearchesMax() {
    return AccountLimits_UserSavedSearchesMax_DEFAULT
  }
return *p.UserSavedSearchesMax
}
var AccountLimits_NoteResourceCountMax_DEFAULT int32
func (p *AccountLimits) GetNoteResourceCountMax() int32 {
  if !p.IsSetNoteResourceCountMax() {
    return AccountLimits_NoteResourceCountMax_DEFAULT
  }
return *p.NoteResourceCountMax
}
func (p *AccountLimits) IsSetUserMailLimitDaily() bool {
  return p.UserMailLimitDaily != nil
}

func (p *AccountLimits) IsSetNoteSizeMax() bool {
  return p.NoteSizeMax != nil
}

func (p *AccountLimits) IsSetResourceSizeMax() bool {
  return p.ResourceSizeMax != nil
}

func (p *AccountLimits) IsSetUserLinkedNotebookMax() bool {
  return p.UserLinkedNotebookMax != nil
}

func (p *AccountLimits) IsSetUploadLimit() bool {
  return p.UploadLimit != nil
}

func (p *AccountLimits) IsSetUserNoteCountMax() bool {
  return p.UserNoteCountMax != nil
}

func (p *AccountLimits) IsSetUserNotebookCountMax() bool {
  return p.UserNotebookCountMax != nil
}

func (p *AccountLimits) IsSetUserTagCountMax() bool {
  return p.UserTagCountMax != nil
}

func (p *AccountLimits) IsSetNoteTagCountMax() bool {
  return p.NoteTagCountMax != nil
}

func (p *AccountLimits) IsSetUserSavedSearchesMax() bool {
  return p.UserSavedSearchesMax != nil
}

func (p *AccountLimits) IsSetNoteResourceCountMax() bool {
  return p.NoteResourceCountMax != nil
}

func (p *AccountLimits) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountLimits)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserMailLimitDaily = &v
}
  return nil
}

func (p *AccountLimits)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NoteSizeMax = &v
}
  return nil
}

func (p *AccountLimits)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ResourceSizeMax = &v
}
  return nil
}

func (p *AccountLimits)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserLinkedNotebookMax = &v
}
  return nil
}

func (p *AccountLimits)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UploadLimit = &v
}
  return nil
}

func (p *AccountLimits)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserNoteCountMax = &v
}
  return nil
}

func (p *AccountLimits)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UserNotebookCountMax = &v
}
  return nil
}

func (p *AccountLimits)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.UserTagCountMax = &v
}
  return nil
}

func (p *AccountLimits)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.NoteTagCountMax = &v
}
  return nil
}

func (p *AccountLimits)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UserSavedSearchesMax = &v
}
  return nil
}

func (p *AccountLimits)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.NoteResourceCountMax = &v
}
  return nil
}

func (p *AccountLimits) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountLimits"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountLimits) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserMailLimitDaily() {
    if err := oprot.WriteFieldBegin("userMailLimitDaily", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userMailLimitDaily: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UserMailLimitDaily)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userMailLimitDaily (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userMailLimitDaily: ", p), err) }
  }
  return err
}

func (p *AccountLimits) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoteSizeMax() {
    if err := oprot.WriteFieldBegin("noteSizeMax", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noteSizeMax: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NoteSizeMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noteSizeMax (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noteSizeMax: ", p), err) }
  }
  return err
}

func (p *AccountLimits) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetResourceSizeMax() {
    if err := oprot.WriteFieldBegin("resourceSizeMax", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resourceSizeMax: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ResourceSizeMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourceSizeMax (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resourceSizeMax: ", p), err) }
  }
  return err
}

func (p *AccountLimits) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserLinkedNotebookMax() {
    if err := oprot.WriteFieldBegin("userLinkedNotebookMax", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userLinkedNotebookMax: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UserLinkedNotebookMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userLinkedNotebookMax (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userLinkedNotebookMax: ", p), err) }
  }
  return err
}

func (p *AccountLimits) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetUploadLimit() {
    if err := oprot.WriteFieldBegin("uploadLimit", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:uploadLimit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.UploadLimit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uploadLimit (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:uploadLimit: ", p), err) }
  }
  return err
}

func (p *AccountLimits) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserNoteCountMax() {
    if err := oprot.WriteFieldBegin("userNoteCountMax", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userNoteCountMax: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UserNoteCountMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userNoteCountMax (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userNoteCountMax: ", p), err) }
  }
  return err
}

func (p *AccountLimits) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserNotebookCountMax() {
    if err := oprot.WriteFieldBegin("userNotebookCountMax", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:userNotebookCountMax: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UserNotebookCountMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userNotebookCountMax (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:userNotebookCountMax: ", p), err) }
  }
  return err
}

func (p *AccountLimits) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserTagCountMax() {
    if err := oprot.WriteFieldBegin("userTagCountMax", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:userTagCountMax: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UserTagCountMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userTagCountMax (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:userTagCountMax: ", p), err) }
  }
  return err
}

func (p *AccountLimits) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoteTagCountMax() {
    if err := oprot.WriteFieldBegin("noteTagCountMax", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:noteTagCountMax: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NoteTagCountMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noteTagCountMax (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:noteTagCountMax: ", p), err) }
  }
  return err
}

func (p *AccountLimits) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserSavedSearchesMax() {
    if err := oprot.WriteFieldBegin("userSavedSearchesMax", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:userSavedSearchesMax: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UserSavedSearchesMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userSavedSearchesMax (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:userSavedSearchesMax: ", p), err) }
  }
  return err
}

func (p *AccountLimits) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoteResourceCountMax() {
    if err := oprot.WriteFieldBegin("noteResourceCountMax", thrift.I32, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:noteResourceCountMax: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NoteResourceCountMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noteResourceCountMax (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:noteResourceCountMax: ", p), err) }
  }
  return err
}

func (p *AccountLimits) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountLimits(%+v)", *p)
}

//  This represents the information about a single user account.
// <dl>
//  <dt>id</dt>
//    <dd>The unique numeric identifier for the account, which will not
//    change for the lifetime of the account.
//    </dd>
// 
//  <dt>username</dt>
//    <dd>The name that uniquely identifies a single user account. This name
//    may be presented by the user, along with their password, to log into
//    their account.
//    May only contain a-z, 0-9, or '-', and may not start or end with the '-'
//    <br/>
//    Length:  EDAM_USER_USERNAME_LEN_MIN - EDAM_USER_USERNAME_LEN_MAX
//    <br/>
//    Regex:  EDAM_USER_USERNAME_REGEX
//    </dd>
// 
//  <dt>email</dt>
//    <dd>The email address registered for the user.  Must comply with
//    RFC 2821 and RFC 2822.<br/>
//    Third party applications that authenticate using OAuth do not have
//    access to this field.
//    Length:  EDAM_EMAIL_LEN_MIN - EDAM_EMAIL_LEN_MAX
//    <br/>
//    Regex:  EDAM_EMAIL_REGEX
//    </dd>
// 
//  <dt>name</dt>
//    <dd>The printable name of the user, which may be a combination
//    of given and family names.  This is used instead of separate "first"
//    and "last" names due to variations in international name format/order.
//    May not start or end with a whitespace character.  May contain any
//    character but carriage return or newline (Unicode classes Zl and Zp).
//    <br/>
//    Length:  EDAM_USER_NAME_LEN_MIN - EDAM_USER_NAME_LEN_MAX
//    <br/>
//    Regex:  EDAM_USER_NAME_REGEX
//    </dd>
// 
//  <dt>timezone</dt>
//    <dd>The zone ID for the user's default location.  If present,
//    this may be used to localize the display of any timestamp for which no
//    other timezone is available.
//    The format must be encoded as a standard zone ID such as
//    "America/Los_Angeles" or "GMT+08:00"
//    <br/>
//    Length:  EDAM_TIMEZONE_LEN_MIN - EDAM_TIMEZONE_LEN_MAX
//    <br/>
//    Regex:  EDAM_TIMEZONE_REGEX
//    </dd>
// 
//  <dt>serviceLevel</dt>
//    <dd>The level of service the user currently receives. This will always be populated
//        for users retrieved from the Evernote service.
//    </dd>
// 
//  <dt>created</dt>
//    <dd>The date and time when this user account was created in the
//    service.
//    </dd>
// 
//  <dt>updated</dt>
//    <dd>The date and time when this user account was last modified
//    in the service.
//    </dd>
// 
//  <dt>deleted</dt>
//    <dd>If the account has been deleted from the system (e.g. as
//    the result of a legal request by the user), the date and time of the
//    deletion will be represented here.  If not, this value will not be set.
//    </dd>
// 
//  <dt>active</dt>
//    <dd>If the user account is available for login and
//    synchronization, this flag will be set to true.
//    </dd>
// 
//  <dt>shardId</dt>
//    <dd>DEPRECATED - Client applications should have no need to use this field.
//    </dd>
// 
//  <dt>attributes</dt>
//    <dd>If present, this will contain a list of the attributes
//    for this user account.
//    </dd>
// 
//  <dt>accounting</dt>
//    <dd>Bookkeeping information for the user's subscription.
//    </dd>
// 
//  <dt>businessUserInfo</dt>
//    <dd>If present, this will contain a set of business information
//    relating to the user's business membership.  If not present, the
//    user is not currently part of a business.
//    </dd>
// 
//  <dt>photoUrl</dt>
//    <dd>The URL of the photo that represents this User. This field is filled in by the
//    service and is read-only to clients. If <code>photoLastUpdated</code> is
//    not set, this url will point to a placeholder user photo generated by the
//    service.</dd>
// 
//  <dt>photoLastUpdated</dt>
//    <dd>The time at which the photo at 'photoUrl' was last updated by this User. This
//    field will be null if the User never set a profile photo. This field is filled in by
//    the service and is read-only to clients.</dd>
// 
//  <dt>accountLimits</dt>
//    <dd>Account limits applicable for this user.</dd>
// 
// Attributes:
//  - ID
//  - Username
//  - Email
//  - Name
//  - Timezone
//  - Privilege
//  - ServiceLevel
//  - Created
//  - Updated
//  - Deleted
//  - Active
//  - ShardId
//  - Attributes
//  - Accounting
//  - BusinessUserInfo
//  - PhotoUrl
//  - PhotoLastUpdated
//  - AccountLimits
type User struct {
  ID *UserID `thrift:"id,1" db:"id" json:"id,omitempty"`
  Username *string `thrift:"username,2" db:"username" json:"username,omitempty"`
  Email *string `thrift:"email,3" db:"email" json:"email,omitempty"`
  Name *string `thrift:"name,4" db:"name" json:"name,omitempty"`
  // unused field # 5
  Timezone *string `thrift:"timezone,6" db:"timezone" json:"timezone,omitempty"`
  Privilege *PrivilegeLevel `thrift:"privilege,7" db:"privilege" json:"privilege,omitempty"`
  // unused field # 8
  Created *Timestamp `thrift:"created,9" db:"created" json:"created,omitempty"`
  Updated *Timestamp `thrift:"updated,10" db:"updated" json:"updated,omitempty"`
  Deleted *Timestamp `thrift:"deleted,11" db:"deleted" json:"deleted,omitempty"`
  // unused field # 12
  Active *bool `thrift:"active,13" db:"active" json:"active,omitempty"`
  ShardId *string `thrift:"shardId,14" db:"shardId" json:"shardId,omitempty"`
  Attributes *UserAttributes `thrift:"attributes,15" db:"attributes" json:"attributes,omitempty"`
  Accounting *Accounting `thrift:"accounting,16" db:"accounting" json:"accounting,omitempty"`
  // unused field # 17
  BusinessUserInfo *BusinessUserInfo `thrift:"businessUserInfo,18" db:"businessUserInfo" json:"businessUserInfo,omitempty"`
  PhotoUrl *string `thrift:"photoUrl,19" db:"photoUrl" json:"photoUrl,omitempty"`
  PhotoLastUpdated *Timestamp `thrift:"photoLastUpdated,20" db:"photoLastUpdated" json:"photoLastUpdated,omitempty"`
  ServiceLevel *ServiceLevel `thrift:"serviceLevel,21" db:"serviceLevel" json:"serviceLevel,omitempty"`
  AccountLimits *AccountLimits `thrift:"accountLimits,22" db:"accountLimits" json:"accountLimits,omitempty"`
}

func NewUser() *User {
  return &User{}
}

var User_ID_DEFAULT UserID
func (p *User) GetID() UserID {
  if !p.IsSetID() {
    return User_ID_DEFAULT
  }
return *p.ID
}
var User_Username_DEFAULT string
func (p *User) GetUsername() string {
  if !p.IsSetUsername() {
    return User_Username_DEFAULT
  }
return *p.Username
}
var User_Email_DEFAULT string
func (p *User) GetEmail() string {
  if !p.IsSetEmail() {
    return User_Email_DEFAULT
  }
return *p.Email
}
var User_Name_DEFAULT string
func (p *User) GetName() string {
  if !p.IsSetName() {
    return User_Name_DEFAULT
  }
return *p.Name
}
var User_Timezone_DEFAULT string
func (p *User) GetTimezone() string {
  if !p.IsSetTimezone() {
    return User_Timezone_DEFAULT
  }
return *p.Timezone
}
var User_Privilege_DEFAULT PrivilegeLevel
func (p *User) GetPrivilege() PrivilegeLevel {
  if !p.IsSetPrivilege() {
    return User_Privilege_DEFAULT
  }
return *p.Privilege
}
var User_ServiceLevel_DEFAULT ServiceLevel
func (p *User) GetServiceLevel() ServiceLevel {
  if !p.IsSetServiceLevel() {
    return User_ServiceLevel_DEFAULT
  }
return *p.ServiceLevel
}
var User_Created_DEFAULT Timestamp
func (p *User) GetCreated() Timestamp {
  if !p.IsSetCreated() {
    return User_Created_DEFAULT
  }
return *p.Created
}
var User_Updated_DEFAULT Timestamp
func (p *User) GetUpdated() Timestamp {
  if !p.IsSetUpdated() {
    return User_Updated_DEFAULT
  }
return *p.Updated
}
var User_Deleted_DEFAULT Timestamp
func (p *User) GetDeleted() Timestamp {
  if !p.IsSetDeleted() {
    return User_Deleted_DEFAULT
  }
return *p.Deleted
}
var User_Active_DEFAULT bool
func (p *User) GetActive() bool {
  if !p.IsSetActive() {
    return User_Active_DEFAULT
  }
return *p.Active
}
var User_ShardId_DEFAULT string
func (p *User) GetShardId() string {
  if !p.IsSetShardId() {
    return User_ShardId_DEFAULT
  }
return *p.ShardId
}
var User_Attributes_DEFAULT *UserAttributes
func (p *User) GetAttributes() *UserAttributes {
  if !p.IsSetAttributes() {
    return User_Attributes_DEFAULT
  }
return p.Attributes
}
var User_Accounting_DEFAULT *Accounting
func (p *User) GetAccounting() *Accounting {
  if !p.IsSetAccounting() {
    return User_Accounting_DEFAULT
  }
return p.Accounting
}
var User_BusinessUserInfo_DEFAULT *BusinessUserInfo
func (p *User) GetBusinessUserInfo() *BusinessUserInfo {
  if !p.IsSetBusinessUserInfo() {
    return User_BusinessUserInfo_DEFAULT
  }
return p.BusinessUserInfo
}
var User_PhotoUrl_DEFAULT string
func (p *User) GetPhotoUrl() string {
  if !p.IsSetPhotoUrl() {
    return User_PhotoUrl_DEFAULT
  }
return *p.PhotoUrl
}
var User_PhotoLastUpdated_DEFAULT Timestamp
func (p *User) GetPhotoLastUpdated() Timestamp {
  if !p.IsSetPhotoLastUpdated() {
    return User_PhotoLastUpdated_DEFAULT
  }
return *p.PhotoLastUpdated
}
var User_AccountLimits_DEFAULT *AccountLimits
func (p *User) GetAccountLimits() *AccountLimits {
  if !p.IsSetAccountLimits() {
    return User_AccountLimits_DEFAULT
  }
return p.AccountLimits
}
func (p *User) IsSetID() bool {
  return p.ID != nil
}

func (p *User) IsSetUsername() bool {
  return p.Username != nil
}

func (p *User) IsSetEmail() bool {
  return p.Email != nil
}

func (p *User) IsSetName() bool {
  return p.Name != nil
}

func (p *User) IsSetTimezone() bool {
  return p.Timezone != nil
}

func (p *User) IsSetPrivilege() bool {
  return p.Privilege != nil
}

func (p *User) IsSetServiceLevel() bool {
  return p.ServiceLevel != nil
}

func (p *User) IsSetCreated() bool {
  return p.Created != nil
}

func (p *User) IsSetUpdated() bool {
  return p.Updated != nil
}

func (p *User) IsSetDeleted() bool {
  return p.Deleted != nil
}

func (p *User) IsSetActive() bool {
  return p.Active != nil
}

func (p *User) IsSetShardId() bool {
  return p.ShardId != nil
}

func (p *User) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *User) IsSetAccounting() bool {
  return p.Accounting != nil
}

func (p *User) IsSetBusinessUserInfo() bool {
  return p.BusinessUserInfo != nil
}

func (p *User) IsSetPhotoUrl() bool {
  return p.PhotoUrl != nil
}

func (p *User) IsSetPhotoLastUpdated() bool {
  return p.PhotoLastUpdated != nil
}

func (p *User) IsSetAccountLimits() bool {
  return p.AccountLimits != nil
}

func (p *User) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *User)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UserID(v)
  p.ID = &temp
}
  return nil
}

func (p *User)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = &v
}
  return nil
}

func (p *User)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = &v
}
  return nil
}

func (p *User)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *User)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Timezone = &v
}
  return nil
}

func (p *User)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := PrivilegeLevel(v)
  p.Privilege = &temp
}
  return nil
}

func (p *User)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  temp := ServiceLevel(v)
  p.ServiceLevel = &temp
}
  return nil
}

func (p *User)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := Timestamp(v)
  p.Created = &temp
}
  return nil
}

func (p *User)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := Timestamp(v)
  p.Updated = &temp
}
  return nil
}

func (p *User)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := Timestamp(v)
  p.Deleted = &temp
}
  return nil
}

func (p *User)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Active = &v
}
  return nil
}

func (p *User)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.ShardId = &v
}
  return nil
}

func (p *User)  ReadField15(iprot thrift.TProtocol) error {
  p.Attributes = &UserAttributes{}
  if err := p.Attributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attributes), err)
  }
  return nil
}

func (p *User)  ReadField16(iprot thrift.TProtocol) error {
  p.Accounting = &Accounting{}
  if err := p.Accounting.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accounting), err)
  }
  return nil
}

func (p *User)  ReadField18(iprot thrift.TProtocol) error {
  p.BusinessUserInfo = &BusinessUserInfo{}
  if err := p.BusinessUserInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BusinessUserInfo), err)
  }
  return nil
}

func (p *User)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.PhotoUrl = &v
}
  return nil
}

func (p *User)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := Timestamp(v)
  p.PhotoLastUpdated = &temp
}
  return nil
}

func (p *User)  ReadField22(iprot thrift.TProtocol) error {
  p.AccountLimits = &AccountLimits{}
  if err := p.AccountLimits.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AccountLimits), err)
  }
  return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUsername() {
    if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
    if err := oprot.WriteString(string(*p.Username)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  }
  return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmail() {
    if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
    if err := oprot.WriteString(string(*p.Email)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  }
  return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err) }
  }
  return err
}

func (p *User) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimezone() {
    if err := oprot.WriteFieldBegin("timezone", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timezone: ", p), err) }
    if err := oprot.WriteString(string(*p.Timezone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timezone (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timezone: ", p), err) }
  }
  return err
}

func (p *User) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivilege() {
    if err := oprot.WriteFieldBegin("privilege", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:privilege: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.privilege (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:privilege: ", p), err) }
  }
  return err
}

func (p *User) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreated() {
    if err := oprot.WriteFieldBegin("created", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:created: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Created)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.created (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:created: ", p), err) }
  }
  return err
}

func (p *User) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdated() {
    if err := oprot.WriteFieldBegin("updated", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Updated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updated (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updated: ", p), err) }
  }
  return err
}

func (p *User) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeleted() {
    if err := oprot.WriteFieldBegin("deleted", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:deleted: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Deleted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deleted (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:deleted: ", p), err) }
  }
  return err
}

func (p *User) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetActive() {
    if err := oprot.WriteFieldBegin("active", thrift.BOOL, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:active: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Active)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.active (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:active: ", p), err) }
  }
  return err
}

func (p *User) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardId() {
    if err := oprot.WriteFieldBegin("shardId", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:shardId: ", p), err) }
    if err := oprot.WriteString(string(*p.ShardId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.shardId (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:shardId: ", p), err) }
  }
  return err
}

func (p *User) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:attributes: ", p), err) }
    if err := p.Attributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:attributes: ", p), err) }
  }
  return err
}

func (p *User) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetAccounting() {
    if err := oprot.WriteFieldBegin("accounting", thrift.STRUCT, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:accounting: ", p), err) }
    if err := p.Accounting.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accounting), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:accounting: ", p), err) }
  }
  return err
}

func (p *User) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessUserInfo() {
    if err := oprot.WriteFieldBegin("businessUserInfo", thrift.STRUCT, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:businessUserInfo: ", p), err) }
    if err := p.BusinessUserInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BusinessUserInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:businessUserInfo: ", p), err) }
  }
  return err
}

func (p *User) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetPhotoUrl() {
    if err := oprot.WriteFieldBegin("photoUrl", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:photoUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.PhotoUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.photoUrl (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:photoUrl: ", p), err) }
  }
  return err
}

func (p *User) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetPhotoLastUpdated() {
    if err := oprot.WriteFieldBegin("photoLastUpdated", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:photoLastUpdated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PhotoLastUpdated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.photoLastUpdated (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:photoLastUpdated: ", p), err) }
  }
  return err
}

func (p *User) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceLevel() {
    if err := oprot.WriteFieldBegin("serviceLevel", thrift.I32, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:serviceLevel: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ServiceLevel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceLevel (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:serviceLevel: ", p), err) }
  }
  return err
}

func (p *User) writeField22(oprot thrift.TProtocol) (err error) {
  if p.IsSetAccountLimits() {
    if err := oprot.WriteFieldBegin("accountLimits", thrift.STRUCT, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:accountLimits: ", p), err) }
    if err := p.AccountLimits.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AccountLimits), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:accountLimits: ", p), err) }
  }
  return err
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

// A structure that represents contact information. Note this does not necessarily correspond to
// an Evernote user.
// 
// <dl>
// <dt>name</dt>
// <dd>The displayable name of this contact. This field is filled in by the service and
//     is read-only to clients.
// </dd>
// <dt>id</dt>
// <dd>A unique identifier for this ContactType.
// </dd>
// <dt>type</dt>
// <dd>What service does this contact come from?
// </dd>
// <dt>photoUrl</dt>
// <dd>A URL of a profile photo representing this Contact. This field is filled in by the
//     service and is read-only to clients.
// </dd>
// <dt>photoLastUpdated</dt>
// <dd>timestamp when the profile photo at 'photoUrl' was last updated.
//     This field will be null if the user has never set a profile photo.
//     This field is filled in by the service and is read-only to clients.
// </dd>
// <dt>messagingPermit</dt>
// <dd>This field will only be filled by the service when it is giving a Contact record
//     to a client, and that client does not normally have enough permission to send a
//     new message to the person represented through this Contact. In that case, this
//     whole Contact record could be used to send a new Message to the Contact, and the
//     service will inspect this permit to confirm that operation was allowed.
// </dd>
// <dt>messagingPermitExpires</dt>
// <dd>If this field is set, then this (whole) Contact record may be used in calls to
//     sendMessage until this time. After that time, those calls may be rejected by the
//     service if the caller does not have direct permission to initiate a message with
//     the represented Evernote user.
// </dd>
// </dl>
// 
// Attributes:
//  - Name
//  - ID
//  - Type
//  - PhotoUrl
//  - PhotoLastUpdated
//  - MessagingPermit
//  - MessagingPermitExpires
type Contact struct {
  Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
  ID *string `thrift:"id,2" db:"id" json:"id,omitempty"`
  Type *ContactType `thrift:"type,3" db:"type" json:"type,omitempty"`
  PhotoUrl *string `thrift:"photoUrl,4" db:"photoUrl" json:"photoUrl,omitempty"`
  PhotoLastUpdated *Timestamp `thrift:"photoLastUpdated,5" db:"photoLastUpdated" json:"photoLastUpdated,omitempty"`
  MessagingPermit []byte `thrift:"messagingPermit,6" db:"messagingPermit" json:"messagingPermit,omitempty"`
  MessagingPermitExpires *Timestamp `thrift:"messagingPermitExpires,7" db:"messagingPermitExpires" json:"messagingPermitExpires,omitempty"`
}

func NewContact() *Contact {
  return &Contact{}
}

var Contact_Name_DEFAULT string
func (p *Contact) GetName() string {
  if !p.IsSetName() {
    return Contact_Name_DEFAULT
  }
return *p.Name
}
var Contact_ID_DEFAULT string
func (p *Contact) GetID() string {
  if !p.IsSetID() {
    return Contact_ID_DEFAULT
  }
return *p.ID
}
var Contact_Type_DEFAULT ContactType
func (p *Contact) GetType() ContactType {
  if !p.IsSetType() {
    return Contact_Type_DEFAULT
  }
return *p.Type
}
var Contact_PhotoUrl_DEFAULT string
func (p *Contact) GetPhotoUrl() string {
  if !p.IsSetPhotoUrl() {
    return Contact_PhotoUrl_DEFAULT
  }
return *p.PhotoUrl
}
var Contact_PhotoLastUpdated_DEFAULT Timestamp
func (p *Contact) GetPhotoLastUpdated() Timestamp {
  if !p.IsSetPhotoLastUpdated() {
    return Contact_PhotoLastUpdated_DEFAULT
  }
return *p.PhotoLastUpdated
}
var Contact_MessagingPermit_DEFAULT []byte

func (p *Contact) GetMessagingPermit() []byte {
  return p.MessagingPermit
}
var Contact_MessagingPermitExpires_DEFAULT Timestamp
func (p *Contact) GetMessagingPermitExpires() Timestamp {
  if !p.IsSetMessagingPermitExpires() {
    return Contact_MessagingPermitExpires_DEFAULT
  }
return *p.MessagingPermitExpires
}
func (p *Contact) IsSetName() bool {
  return p.Name != nil
}

func (p *Contact) IsSetID() bool {
  return p.ID != nil
}

func (p *Contact) IsSetType() bool {
  return p.Type != nil
}

func (p *Contact) IsSetPhotoUrl() bool {
  return p.PhotoUrl != nil
}

func (p *Contact) IsSetPhotoLastUpdated() bool {
  return p.PhotoLastUpdated != nil
}

func (p *Contact) IsSetMessagingPermit() bool {
  return p.MessagingPermit != nil
}

func (p *Contact) IsSetMessagingPermitExpires() bool {
  return p.MessagingPermitExpires != nil
}

func (p *Contact) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Contact)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *Contact)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Contact)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ContactType(v)
  p.Type = &temp
}
  return nil
}

func (p *Contact)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PhotoUrl = &v
}
  return nil
}

func (p *Contact)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Timestamp(v)
  p.PhotoLastUpdated = &temp
}
  return nil
}

func (p *Contact)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MessagingPermit = v
}
  return nil
}

func (p *Contact)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Timestamp(v)
  p.MessagingPermitExpires = &temp
}
  return nil
}

func (p *Contact) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Contact"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Contact) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  }
  return err
}

func (p *Contact) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  }
  return err
}

func (p *Contact) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  }
  return err
}

func (p *Contact) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPhotoUrl() {
    if err := oprot.WriteFieldBegin("photoUrl", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:photoUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.PhotoUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.photoUrl (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:photoUrl: ", p), err) }
  }
  return err
}

func (p *Contact) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetPhotoLastUpdated() {
    if err := oprot.WriteFieldBegin("photoLastUpdated", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:photoLastUpdated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PhotoLastUpdated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.photoLastUpdated (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:photoLastUpdated: ", p), err) }
  }
  return err
}

func (p *Contact) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessagingPermit() {
    if err := oprot.WriteFieldBegin("messagingPermit", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:messagingPermit: ", p), err) }
    if err := oprot.WriteBinary(p.MessagingPermit); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.messagingPermit (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:messagingPermit: ", p), err) }
  }
  return err
}

func (p *Contact) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessagingPermitExpires() {
    if err := oprot.WriteFieldBegin("messagingPermitExpires", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:messagingPermitExpires: ", p), err) }
    if err := oprot.WriteI64(int64(*p.MessagingPermitExpires)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.messagingPermitExpires (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:messagingPermitExpires: ", p), err) }
  }
  return err
}

func (p *Contact) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Contact(%+v)", *p)
}

// An object that represents the relationship between a Contact that possibly
// belongs to an Evernote User.
// 
// <dl>
//  <dt>id</dt>
//  <dd>The unique identifier for this mapping.
//  </dd>
// 
//  <dt>contact<dt>
//  <dd>The Contact that can be used to address this Identity. May be unset.
//  </dd>
// 
//  <dt>userId</dt>
//  <dd>The Evernote User id that is connected to the Contact. May be unset
//      if this identity has not yet been claimed, or the caller is not
//      connected to this identity.
//  </dd>
// 
//  <dt>deactivated</dt>
//  <dd>Indicates that the contact for this identity is no longer active and
//  should not be used when creating new threads using Destination.recipients,
//  unless you know of another Identity instance with the same contact information
//  that is active.  If you are connected to the user (see userConnected), you
//  can still create threads using their Evernote-type contact.</dd>
// 
//  <dt>sameBusiness</dt>
//  <dd>Does this Identity belong to someone who is in the same business as the
//      caller?
//  </dd>
// 
//  <dt>blocked</dt>
//  <dd>Has the caller blocked the Evernote user this Identity represents?
//  </dd>
// 
//  <dt>userConnected</dt>
//  <dd>Indicates that the caller is "connected" to the user of this
//  identity via this identity.  When you have a connection via an
//  identity, you should always create new threads using the
//  Evernote-type contact (see ContactType) using the userId field
//  from a connected Identity.  On the Evernote service, the
//  Evernote-type contact is the most durable. Phone numbers and
//  e-mail addresses can get re-assigned but your Evernote account
//  user ID will remain the same.  A connection exists when both of
//  you are in the same business or the user has replied to a thread
//  that you are on.  When connected, you will also get to see more
//  information about the user who has claimed the identity.  Note
//  that you are never connected to yourself since you won't be
//  sending messages to yourself, but you will obviously see your own
//  profile information.
//  </dd>
// 
//  <dt>eventId</dt>
//  <dd>A server-assigned sequence number for the events in the messages
//  subsystem.
//  </dd>
// </dl>
// 
// Attributes:
//  - ID
//  - Contact
//  - UserId
//  - Deactivated
//  - SameBusiness
//  - Blocked
//  - UserConnected
//  - EventId
type Identity struct {
  ID IdentityID `thrift:"id,1,required" db:"id" json:"id"`
  Contact *Contact `thrift:"contact,2" db:"contact" json:"contact,omitempty"`
  UserId *UserID `thrift:"userId,3" db:"userId" json:"userId,omitempty"`
  Deactivated *bool `thrift:"deactivated,4" db:"deactivated" json:"deactivated,omitempty"`
  SameBusiness *bool `thrift:"sameBusiness,5" db:"sameBusiness" json:"sameBusiness,omitempty"`
  Blocked *bool `thrift:"blocked,6" db:"blocked" json:"blocked,omitempty"`
  UserConnected *bool `thrift:"userConnected,7" db:"userConnected" json:"userConnected,omitempty"`
  EventId *MessageEventID `thrift:"eventId,8" db:"eventId" json:"eventId,omitempty"`
}

func NewIdentity() *Identity {
  return &Identity{}
}


func (p *Identity) GetID() IdentityID {
  return p.ID
}
var Identity_Contact_DEFAULT *Contact
func (p *Identity) GetContact() *Contact {
  if !p.IsSetContact() {
    return Identity_Contact_DEFAULT
  }
return p.Contact
}
var Identity_UserId_DEFAULT UserID
func (p *Identity) GetUserId() UserID {
  if !p.IsSetUserId() {
    return Identity_UserId_DEFAULT
  }
return *p.UserId
}
var Identity_Deactivated_DEFAULT bool
func (p *Identity) GetDeactivated() bool {
  if !p.IsSetDeactivated() {
    return Identity_Deactivated_DEFAULT
  }
return *p.Deactivated
}
var Identity_SameBusiness_DEFAULT bool
func (p *Identity) GetSameBusiness() bool {
  if !p.IsSetSameBusiness() {
    return Identity_SameBusiness_DEFAULT
  }
return *p.SameBusiness
}
var Identity_Blocked_DEFAULT bool
func (p *Identity) GetBlocked() bool {
  if !p.IsSetBlocked() {
    return Identity_Blocked_DEFAULT
  }
return *p.Blocked
}
var Identity_UserConnected_DEFAULT bool
func (p *Identity) GetUserConnected() bool {
  if !p.IsSetUserConnected() {
    return Identity_UserConnected_DEFAULT
  }
return *p.UserConnected
}
var Identity_EventId_DEFAULT MessageEventID
func (p *Identity) GetEventId() MessageEventID {
  if !p.IsSetEventId() {
    return Identity_EventId_DEFAULT
  }
return *p.EventId
}
func (p *Identity) IsSetContact() bool {
  return p.Contact != nil
}

func (p *Identity) IsSetUserId() bool {
  return p.UserId != nil
}

func (p *Identity) IsSetDeactivated() bool {
  return p.Deactivated != nil
}

func (p *Identity) IsSetSameBusiness() bool {
  return p.SameBusiness != nil
}

func (p *Identity) IsSetBlocked() bool {
  return p.Blocked != nil
}

func (p *Identity) IsSetUserConnected() bool {
  return p.UserConnected != nil
}

func (p *Identity) IsSetEventId() bool {
  return p.EventId != nil
}

func (p *Identity) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetID = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  return nil
}

func (p *Identity)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := IdentityID(v)
  p.ID = temp
}
  return nil
}

func (p *Identity)  ReadField2(iprot thrift.TProtocol) error {
  p.Contact = &Contact{}
  if err := p.Contact.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *Identity)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UserID(v)
  p.UserId = &temp
}
  return nil
}

func (p *Identity)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Deactivated = &v
}
  return nil
}

func (p *Identity)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SameBusiness = &v
}
  return nil
}

func (p *Identity)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Blocked = &v
}
  return nil
}

func (p *Identity)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UserConnected = &v
}
  return nil
}

func (p *Identity)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := MessageEventID(v)
  p.EventId = &temp
}
  return nil
}

func (p *Identity) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Identity"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Identity) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Identity) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetContact() {
    if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contact: ", p), err) }
    if err := p.Contact.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contact: ", p), err) }
  }
  return err
}

func (p *Identity) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserId() {
    if err := oprot.WriteFieldBegin("userId", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userId (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userId: ", p), err) }
  }
  return err
}

func (p *Identity) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeactivated() {
    if err := oprot.WriteFieldBegin("deactivated", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deactivated: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Deactivated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deactivated (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deactivated: ", p), err) }
  }
  return err
}

func (p *Identity) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSameBusiness() {
    if err := oprot.WriteFieldBegin("sameBusiness", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sameBusiness: ", p), err) }
    if err := oprot.WriteBool(bool(*p.SameBusiness)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sameBusiness (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sameBusiness: ", p), err) }
  }
  return err
}

func (p *Identity) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetBlocked() {
    if err := oprot.WriteFieldBegin("blocked", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:blocked: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Blocked)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.blocked (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:blocked: ", p), err) }
  }
  return err
}

func (p *Identity) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserConnected() {
    if err := oprot.WriteFieldBegin("userConnected", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:userConnected: ", p), err) }
    if err := oprot.WriteBool(bool(*p.UserConnected)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userConnected (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:userConnected: ", p), err) }
  }
  return err
}

func (p *Identity) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetEventId() {
    if err := oprot.WriteFieldBegin("eventId", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:eventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.EventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.eventId (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:eventId: ", p), err) }
  }
  return err
}

func (p *Identity) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Identity(%+v)", *p)
}

//  A tag within a user's account is a unique name which may be organized
//  a simple hierarchy.
// <dl>
//  <dt>guid</dt>
//    <dd>The unique identifier of this tag. Will be set by the service,
//    so may be omitted by the client when creating the Tag.
//    <br/>
//    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//    <br/>
//    Regex:  EDAM_GUID_REGEX
//    </dd>
// 
//  <dt>name</dt>
//    <dd>A sequence of characters representing the tag's identifier.
//    Case is preserved, but is ignored for comparisons.
//    This means that an account may only have one tag with a given name, via
//    case-insensitive comparison, so an account may not have both "food" and
//    "Food" tags.
//    May not contain a comma (','), and may not begin or end with a space.
//    <br/>
//    Length:  EDAM_TAG_NAME_LEN_MIN - EDAM_TAG_NAME_LEN_MAX
//    <br/>
//    Regex:  EDAM_TAG_NAME_REGEX
//    </dd>
// 
//  <dt>parentGuid</dt>
//    <dd>If this is set, then this is the GUID of the tag that
//    holds this tag within the tag organizational hierarchy.  If this is
//    not set, then the tag has no parent and it is a "top level" tag.
//    Cycles are not allowed (e.g. a->parent->parent == a) and will be
//    rejected by the service.
//    <br/>
//    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//    <br/>
//    Regex:  EDAM_GUID_REGEX
//    </dd>
// 
//  <dt>updateSequenceNum</dt>
//    <dd>A number identifying the last transaction to
//    modify the state of this object.  The USN values are sequential within an
//    account, and can be used to compare the order of modifications within the
//    service.
//    </dd>
//  </dl>
// 
// Attributes:
//  - GUID
//  - Name
//  - ParentGuid
//  - UpdateSequenceNum
type Tag struct {
  GUID *GUID `thrift:"guid,1" db:"guid" json:"guid,omitempty"`
  Name *string `thrift:"name,2" db:"name" json:"name,omitempty"`
  ParentGuid *GUID `thrift:"parentGuid,3" db:"parentGuid" json:"parentGuid,omitempty"`
  UpdateSequenceNum *int32 `thrift:"updateSequenceNum,4" db:"updateSequenceNum" json:"updateSequenceNum,omitempty"`
}

func NewTag() *Tag {
  return &Tag{}
}

var Tag_GUID_DEFAULT GUID
func (p *Tag) GetGUID() GUID {
  if !p.IsSetGUID() {
    return Tag_GUID_DEFAULT
  }
return *p.GUID
}
var Tag_Name_DEFAULT string
func (p *Tag) GetName() string {
  if !p.IsSetName() {
    return Tag_Name_DEFAULT
  }
return *p.Name
}
var Tag_ParentGuid_DEFAULT GUID
func (p *Tag) GetParentGuid() GUID {
  if !p.IsSetParentGuid() {
    return Tag_ParentGuid_DEFAULT
  }
return *p.ParentGuid
}
var Tag_UpdateSequenceNum_DEFAULT int32
func (p *Tag) GetUpdateSequenceNum() int32 {
  if !p.IsSetUpdateSequenceNum() {
    return Tag_UpdateSequenceNum_DEFAULT
  }
return *p.UpdateSequenceNum
}
func (p *Tag) IsSetGUID() bool {
  return p.GUID != nil
}

func (p *Tag) IsSetName() bool {
  return p.Name != nil
}

func (p *Tag) IsSetParentGuid() bool {
  return p.ParentGuid != nil
}

func (p *Tag) IsSetUpdateSequenceNum() bool {
  return p.UpdateSequenceNum != nil
}

func (p *Tag) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Tag)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GUID(v)
  p.GUID = &temp
}
  return nil
}

func (p *Tag)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *Tag)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := GUID(v)
  p.ParentGuid = &temp
}
  return nil
}

func (p *Tag)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UpdateSequenceNum = &v
}
  return nil
}

func (p *Tag) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Tag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Tag) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetGUID() {
    if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err) }
    if err := oprot.WriteString(string(*p.GUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err) }
  }
  return err
}

func (p *Tag) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  }
  return err
}

func (p *Tag) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetParentGuid() {
    if err := oprot.WriteFieldBegin("parentGuid", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parentGuid: ", p), err) }
    if err := oprot.WriteString(string(*p.ParentGuid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parentGuid (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parentGuid: ", p), err) }
  }
  return err
}

func (p *Tag) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateSequenceNum() {
    if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updateSequenceNum: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updateSequenceNum: ", p), err) }
  }
  return err
}

func (p *Tag) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Tag(%+v)", *p)
}

// A structure that wraps a map of name/value pairs whose values are not
// always present in the structure in order to reduce space when obtaining
// batches of entities that contain the map.
// 
// When the server provides the client with a LazyMap, it will fill in either
// the keysOnly field or the fullMap field, but never both, based on the API
// and parameters.
// 
// When a client provides a LazyMap to the server as part of an update to
// an object, the server will only update the LazyMap if the fullMap field is
// set. If the fullMap field is not set, the server will not make any changes
// to the map.
// 
// Check the API documentation of the individual calls involving the LazyMap
// for full details including the constraints of the names and values of the
// map.
// 
// <dl>
// <dt>keysOnly</dt>
//   <dd>The set of keys for the map.  This field is ignored by the
//       server when set.
//   </dd>
// 
// <dt>fullMap</dt>
//   <dd>The complete map, including all keys and values.
//   </dd>
// </dl>
// 
// Attributes:
//  - KeysOnly
//  - FullMap
type LazyMap struct {
  KeysOnly []string `thrift:"keysOnly,1" db:"keysOnly" json:"keysOnly,omitempty"`
  FullMap map[string]string `thrift:"fullMap,2" db:"fullMap" json:"fullMap,omitempty"`
}

func NewLazyMap() *LazyMap {
  return &LazyMap{}
}

var LazyMap_KeysOnly_DEFAULT []string

func (p *LazyMap) GetKeysOnly() []string {
  return p.KeysOnly
}
var LazyMap_FullMap_DEFAULT map[string]string

func (p *LazyMap) GetFullMap() map[string]string {
  return p.FullMap
}
func (p *LazyMap) IsSetKeysOnly() bool {
  return p.KeysOnly != nil
}

func (p *LazyMap) IsSetFullMap() bool {
  return p.FullMap != nil
}

func (p *LazyMap) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LazyMap)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.KeysOnly =  tSet
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.KeysOnly = append(p.KeysOnly, _elem2)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *LazyMap)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.FullMap =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.FullMap[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *LazyMap) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LazyMap"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LazyMap) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetKeysOnly() {
    if err := oprot.WriteFieldBegin("keysOnly", thrift.SET, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keysOnly: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.KeysOnly)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.KeysOnly); i++ {
      for j := i+1; j<len(p.KeysOnly); j++ {
        if reflect.DeepEqual(p.KeysOnly[i],p.KeysOnly[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.KeysOnly[i]))
        }
      }
    }
    for _, v := range p.KeysOnly {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keysOnly: ", p), err) }
  }
  return err
}

func (p *LazyMap) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetFullMap() {
    if err := oprot.WriteFieldBegin("fullMap", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fullMap: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.FullMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.FullMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fullMap: ", p), err) }
  }
  return err
}

func (p *LazyMap) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LazyMap(%+v)", *p)
}

// Structure holding the optional attributes of a Resource
// <dl>
// <dt>sourceURL</dt>
//   <dd>the original location where the resource was hosted
//   <br/>
//    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
// 
// <dt>timestamp</dt>
//   <dd>the date and time that is associated with this resource
//   (e.g. the time embedded in an image from a digital camera with a clock)
//   </dd>
// 
// <dt>latitude</dt>
//   <dd>the latitude where the resource was captured
//   </dd>
// 
// <dt>longitude</dt>
//   <dd>the longitude where the resource was captured
//   </dd>
// 
// <dt>altitude</dt>
//   <dd>the altitude where the resource was captured
//   </dd>
// 
// <dt>cameraMake</dt>
//   <dd>information about an image's camera, e.g. as embedded in
//   the image's EXIF data
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
// 
// <dt>cameraModel</dt>
//   <dd>information about an image's camera, e.g. as embedded
//   in the image's EXIF data
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
// 
// <dt>clientWillIndex</dt>
//   <dd>if true, then the original client that submitted
//   the resource plans to submit the recognition index for this resource at a
//   later time.
//   </dd>
// 
// <dt>recoType</dt>
//   <dd>DEPRECATED - this field is no longer set by the service, so should
//     be ignored.
//   </dd>
// 
// <dt>fileName</dt>
//   <dd>if the resource came from a source that provided an
//   explicit file name, the original name will be stored here.  Many resources
//   come from unnamed sources, so this will not always be set.
//   </dd>
// 
// <dt>attachment</dt>
//   <dd>this will be true if the resource should be displayed as an attachment,
//   or false if the resource should be displayed inline (if possible).
//   </dd>
// 
// <dt>applicationData</dt>
// <dd>Provides a location for applications to store a relatively small
// (4kb) blob of data associated with a Resource that is not visible to the user
// and that is opaque to the Evernote service. A single application may use at most
// one entry in this map, using its API consumer key as the map key. See the
// documentation for LazyMap for a description of when the actual map values
// are returned by the service.
// <p>To safely add or modify your application's entry in the map, use
// NoteStore.setResourceApplicationDataEntry. To safely remove your application's
// entry from the map, use NoteStore.unsetResourceApplicationDataEntry.</p>
// Minimum length of a name (key): EDAM_APPLICATIONDATA_NAME_LEN_MIN
// <br/>
// Sum max size of key and value: EDAM_APPLICATIONDATA_ENTRY_LEN_MAX
// <br/>
// Syntax regex for name (key): EDAM_APPLICATIONDATA_NAME_REGEX
// </dd>
// 
// </dl>
// 
// Attributes:
//  - SourceURL
//  - Timestamp
//  - Latitude
//  - Longitude
//  - Altitude
//  - CameraMake
//  - CameraModel
//  - ClientWillIndex
//  - RecoType
//  - FileName
//  - Attachment
//  - ApplicationData
type ResourceAttributes struct {
  SourceURL *string `thrift:"sourceURL,1" db:"sourceURL" json:"sourceURL,omitempty"`
  Timestamp *Timestamp `thrift:"timestamp,2" db:"timestamp" json:"timestamp,omitempty"`
  Latitude *float64 `thrift:"latitude,3" db:"latitude" json:"latitude,omitempty"`
  Longitude *float64 `thrift:"longitude,4" db:"longitude" json:"longitude,omitempty"`
  Altitude *float64 `thrift:"altitude,5" db:"altitude" json:"altitude,omitempty"`
  CameraMake *string `thrift:"cameraMake,6" db:"cameraMake" json:"cameraMake,omitempty"`
  CameraModel *string `thrift:"cameraModel,7" db:"cameraModel" json:"cameraModel,omitempty"`
  ClientWillIndex *bool `thrift:"clientWillIndex,8" db:"clientWillIndex" json:"clientWillIndex,omitempty"`
  RecoType *string `thrift:"recoType,9" db:"recoType" json:"recoType,omitempty"`
  FileName *string `thrift:"fileName,10" db:"fileName" json:"fileName,omitempty"`
  Attachment *bool `thrift:"attachment,11" db:"attachment" json:"attachment,omitempty"`
  ApplicationData *LazyMap `thrift:"applicationData,12" db:"applicationData" json:"applicationData,omitempty"`
}

func NewResourceAttributes() *ResourceAttributes {
  return &ResourceAttributes{}
}

var ResourceAttributes_SourceURL_DEFAULT string
func (p *ResourceAttributes) GetSourceURL() string {
  if !p.IsSetSourceURL() {
    return ResourceAttributes_SourceURL_DEFAULT
  }
return *p.SourceURL
}
var ResourceAttributes_Timestamp_DEFAULT Timestamp
func (p *ResourceAttributes) GetTimestamp() Timestamp {
  if !p.IsSetTimestamp() {
    return ResourceAttributes_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var ResourceAttributes_Latitude_DEFAULT float64
func (p *ResourceAttributes) GetLatitude() float64 {
  if !p.IsSetLatitude() {
    return ResourceAttributes_Latitude_DEFAULT
  }
return *p.Latitude
}
var ResourceAttributes_Longitude_DEFAULT float64
func (p *ResourceAttributes) GetLongitude() float64 {
  if !p.IsSetLongitude() {
    return ResourceAttributes_Longitude_DEFAULT
  }
return *p.Longitude
}
var ResourceAttributes_Altitude_DEFAULT float64
func (p *ResourceAttributes) GetAltitude() float64 {
  if !p.IsSetAltitude() {
    return ResourceAttributes_Altitude_DEFAULT
  }
return *p.Altitude
}
var ResourceAttributes_CameraMake_DEFAULT string
func (p *ResourceAttributes) GetCameraMake() string {
  if !p.IsSetCameraMake() {
    return ResourceAttributes_CameraMake_DEFAULT
  }
return *p.CameraMake
}
var ResourceAttributes_CameraModel_DEFAULT string
func (p *ResourceAttributes) GetCameraModel() string {
  if !p.IsSetCameraModel() {
    return ResourceAttributes_CameraModel_DEFAULT
  }
return *p.CameraModel
}
var ResourceAttributes_ClientWillIndex_DEFAULT bool
func (p *ResourceAttributes) GetClientWillIndex() bool {
  if !p.IsSetClientWillIndex() {
    return ResourceAttributes_ClientWillIndex_DEFAULT
  }
return *p.ClientWillIndex
}
var ResourceAttributes_RecoType_DEFAULT string
func (p *ResourceAttributes) GetRecoType() string {
  if !p.IsSetRecoType() {
    return ResourceAttributes_RecoType_DEFAULT
  }
return *p.RecoType
}
var ResourceAttributes_FileName_DEFAULT string
func (p *ResourceAttributes) GetFileName() string {
  if !p.IsSetFileName() {
    return ResourceAttributes_FileName_DEFAULT
  }
return *p.FileName
}
var ResourceAttributes_Attachment_DEFAULT bool
func (p *ResourceAttributes) GetAttachment() bool {
  if !p.IsSetAttachment() {
    return ResourceAttributes_Attachment_DEFAULT
  }
return *p.Attachment
}
var ResourceAttributes_ApplicationData_DEFAULT *LazyMap
func (p *ResourceAttributes) GetApplicationData() *LazyMap {
  if !p.IsSetApplicationData() {
    return ResourceAttributes_ApplicationData_DEFAULT
  }
return p.ApplicationData
}
func (p *ResourceAttributes) IsSetSourceURL() bool {
  return p.SourceURL != nil
}

func (p *ResourceAttributes) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *ResourceAttributes) IsSetLatitude() bool {
  return p.Latitude != nil
}

func (p *ResourceAttributes) IsSetLongitude() bool {
  return p.Longitude != nil
}

func (p *ResourceAttributes) IsSetAltitude() bool {
  return p.Altitude != nil
}

func (p *ResourceAttributes) IsSetCameraMake() bool {
  return p.CameraMake != nil
}

func (p *ResourceAttributes) IsSetCameraModel() bool {
  return p.CameraModel != nil
}

func (p *ResourceAttributes) IsSetClientWillIndex() bool {
  return p.ClientWillIndex != nil
}

func (p *ResourceAttributes) IsSetRecoType() bool {
  return p.RecoType != nil
}

func (p *ResourceAttributes) IsSetFileName() bool {
  return p.FileName != nil
}

func (p *ResourceAttributes) IsSetAttachment() bool {
  return p.Attachment != nil
}

func (p *ResourceAttributes) IsSetApplicationData() bool {
  return p.ApplicationData != nil
}

func (p *ResourceAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceAttributes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SourceURL = &v
}
  return nil
}

func (p *ResourceAttributes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Timestamp(v)
  p.Timestamp = &temp
}
  return nil
}

func (p *ResourceAttributes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Latitude = &v
}
  return nil
}

func (p *ResourceAttributes)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Longitude = &v
}
  return nil
}

func (p *ResourceAttributes)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Altitude = &v
}
  return nil
}

func (p *ResourceAttributes)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CameraMake = &v
}
  return nil
}

func (p *ResourceAttributes)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CameraModel = &v
}
  return nil
}

func (p *ResourceAttributes)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ClientWillIndex = &v
}
  return nil
}

func (p *ResourceAttributes)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.RecoType = &v
}
  return nil
}

func (p *ResourceAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FileName = &v
}
  return nil
}

func (p *ResourceAttributes)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Attachment = &v
}
  return nil
}

func (p *ResourceAttributes)  ReadField12(iprot thrift.TProtocol) error {
  p.ApplicationData = &LazyMap{}
  if err := p.ApplicationData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationData), err)
  }
  return nil
}

func (p *ResourceAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResourceAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceAttributes) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceURL() {
    if err := oprot.WriteFieldBegin("sourceURL", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceURL: ", p), err) }
    if err := oprot.WriteString(string(*p.SourceURL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sourceURL (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceURL: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetLatitude() {
    if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Latitude)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLongitude() {
    if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Longitude)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAltitude() {
    if err := oprot.WriteFieldBegin("altitude", thrift.DOUBLE, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:altitude: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Altitude)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.altitude (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:altitude: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetCameraMake() {
    if err := oprot.WriteFieldBegin("cameraMake", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cameraMake: ", p), err) }
    if err := oprot.WriteString(string(*p.CameraMake)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cameraMake (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cameraMake: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetCameraModel() {
    if err := oprot.WriteFieldBegin("cameraModel", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:cameraModel: ", p), err) }
    if err := oprot.WriteString(string(*p.CameraModel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cameraModel (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:cameraModel: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetClientWillIndex() {
    if err := oprot.WriteFieldBegin("clientWillIndex", thrift.BOOL, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:clientWillIndex: ", p), err) }
    if err := oprot.WriteBool(bool(*p.ClientWillIndex)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.clientWillIndex (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:clientWillIndex: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecoType() {
    if err := oprot.WriteFieldBegin("recoType", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:recoType: ", p), err) }
    if err := oprot.WriteString(string(*p.RecoType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recoType (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:recoType: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetFileName() {
    if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fileName: ", p), err) }
    if err := oprot.WriteString(string(*p.FileName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fileName (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fileName: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttachment() {
    if err := oprot.WriteFieldBegin("attachment", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:attachment: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Attachment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.attachment (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:attachment: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationData() {
    if err := oprot.WriteFieldBegin("applicationData", thrift.STRUCT, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:applicationData: ", p), err) }
    if err := p.ApplicationData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:applicationData: ", p), err) }
  }
  return err
}

func (p *ResourceAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceAttributes(%+v)", *p)
}

// Every media file that is embedded or attached to a note is represented
// through a Resource entry.
// <dl>
// <dt>guid</dt>
//   <dd>The unique identifier of this resource.  Will be set whenever
//   a resource is retrieved from the service, but may be null when a client
//   is creating a resource.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
// 
// <dt>noteGuid</dt>
//   <dd>The unique identifier of the Note that holds this
//   Resource. Will be set whenever the resource is retrieved from the service,
//   but may be null when a client is creating a resource.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
// 
// <dt>data</dt>
//   <dd>The contents of the resource.
//   Maximum length:  The data.body is limited to EDAM_RESOURCE_SIZE_MAX_FREE
//   for free accounts and EDAM_RESOURCE_SIZE_MAX_PREMIUM for premium accounts.
//   </dd>
// 
// <dt>mime</dt>
//   <dd>The MIME type for the embedded resource.  E.g. "image/gif"
//   <br/>
//   Length:  EDAM_MIME_LEN_MIN - EDAM_MIME_LEN_MAX
//   <br/>
//   Regex:  EDAM_MIME_REGEX
//   </dd>
// 
// <dt>width</dt>
//   <dd>If set, this contains the display width of this resource, in
//   pixels.
//   </dd>
// 
// <dt>height</dt>
//   <dd>If set, this contains the display height of this resource,
//   in pixels.
//   </dd>
// 
// <dt>duration</dt>
//   <dd>DEPRECATED: ignored.
//   </dd>
// 
// <dt>active</dt>
//   <dd>If the resource is active or not.
//   </dd>
// 
// <dt>recognition</dt>
//   <dd>If set, this will hold the encoded data that provides
//   information on search and recognition within this resource.
//   </dd>
// 
// <dt>attributes</dt>
//   <dd>A list of the attributes for this resource.
//   </dd>
// 
// <dt>updateSequenceNum</dt>
//   <dd>A number identifying the last transaction to
//   modify the state of this object. The USN values are sequential within an
//   account, and can be used to compare the order of modifications within the
//   service.
//   </dd>
// 
// <dt>alternateData</dt>
//   <dd>Some Resources may be assigned an alternate data format by the service
//   which may be more appropriate for indexing or rendering than the original
//   data provided by the user.  In these cases, the alternate data form will
//   be available via this Data element.  If a Resource has no alternate form,
//   this field will be unset.</dd>
// </dl>
// 
// Attributes:
//  - GUID
//  - NoteGuid
//  - Data
//  - Mime
//  - Width
//  - Height
//  - Duration
//  - Active
//  - Recognition
//  - Attributes
//  - UpdateSequenceNum
//  - AlternateData
type Resource struct {
  GUID *GUID `thrift:"guid,1" db:"guid" json:"guid,omitempty"`
  NoteGuid *GUID `thrift:"noteGuid,2" db:"noteGuid" json:"noteGuid,omitempty"`
  Data *Data `thrift:"data,3" db:"data" json:"data,omitempty"`
  Mime *string `thrift:"mime,4" db:"mime" json:"mime,omitempty"`
  Width *int16 `thrift:"width,5" db:"width" json:"width,omitempty"`
  Height *int16 `thrift:"height,6" db:"height" json:"height,omitempty"`
  Duration *int16 `thrift:"duration,7" db:"duration" json:"duration,omitempty"`
  Active *bool `thrift:"active,8" db:"active" json:"active,omitempty"`
  Recognition *Data `thrift:"recognition,9" db:"recognition" json:"recognition,omitempty"`
  // unused field # 10
  Attributes *ResourceAttributes `thrift:"attributes,11" db:"attributes" json:"attributes,omitempty"`
  UpdateSequenceNum *int32 `thrift:"updateSequenceNum,12" db:"updateSequenceNum" json:"updateSequenceNum,omitempty"`
  AlternateData *Data `thrift:"alternateData,13" db:"alternateData" json:"alternateData,omitempty"`
}

func NewResource() *Resource {
  return &Resource{}
}

var Resource_GUID_DEFAULT GUID
func (p *Resource) GetGUID() GUID {
  if !p.IsSetGUID() {
    return Resource_GUID_DEFAULT
  }
return *p.GUID
}
var Resource_NoteGuid_DEFAULT GUID
func (p *Resource) GetNoteGuid() GUID {
  if !p.IsSetNoteGuid() {
    return Resource_NoteGuid_DEFAULT
  }
return *p.NoteGuid
}
var Resource_Data_DEFAULT *Data
func (p *Resource) GetData() *Data {
  if !p.IsSetData() {
    return Resource_Data_DEFAULT
  }
return p.Data
}
var Resource_Mime_DEFAULT string
func (p *Resource) GetMime() string {
  if !p.IsSetMime() {
    return Resource_Mime_DEFAULT
  }
return *p.Mime
}
var Resource_Width_DEFAULT int16
func (p *Resource) GetWidth() int16 {
  if !p.IsSetWidth() {
    return Resource_Width_DEFAULT
  }
return *p.Width
}
var Resource_Height_DEFAULT int16
func (p *Resource) GetHeight() int16 {
  if !p.IsSetHeight() {
    return Resource_Height_DEFAULT
  }
return *p.Height
}
var Resource_Duration_DEFAULT int16
func (p *Resource) GetDuration() int16 {
  if !p.IsSetDuration() {
    return Resource_Duration_DEFAULT
  }
return *p.Duration
}
var Resource_Active_DEFAULT bool
func (p *Resource) GetActive() bool {
  if !p.IsSetActive() {
    return Resource_Active_DEFAULT
  }
return *p.Active
}
var Resource_Recognition_DEFAULT *Data
func (p *Resource) GetRecognition() *Data {
  if !p.IsSetRecognition() {
    return Resource_Recognition_DEFAULT
  }
return p.Recognition
}
var Resource_Attributes_DEFAULT *ResourceAttributes
func (p *Resource) GetAttributes() *ResourceAttributes {
  if !p.IsSetAttributes() {
    return Resource_Attributes_DEFAULT
  }
return p.Attributes
}
var Resource_UpdateSequenceNum_DEFAULT int32
func (p *Resource) GetUpdateSequenceNum() int32 {
  if !p.IsSetUpdateSequenceNum() {
    return Resource_UpdateSequenceNum_DEFAULT
  }
return *p.UpdateSequenceNum
}
var Resource_AlternateData_DEFAULT *Data
func (p *Resource) GetAlternateData() *Data {
  if !p.IsSetAlternateData() {
    return Resource_AlternateData_DEFAULT
  }
return p.AlternateData
}
func (p *Resource) IsSetGUID() bool {
  return p.GUID != nil
}

func (p *Resource) IsSetNoteGuid() bool {
  return p.NoteGuid != nil
}

func (p *Resource) IsSetData() bool {
  return p.Data != nil
}

func (p *Resource) IsSetMime() bool {
  return p.Mime != nil
}

func (p *Resource) IsSetWidth() bool {
  return p.Width != nil
}

func (p *Resource) IsSetHeight() bool {
  return p.Height != nil
}

func (p *Resource) IsSetDuration() bool {
  return p.Duration != nil
}

func (p *Resource) IsSetActive() bool {
  return p.Active != nil
}

func (p *Resource) IsSetRecognition() bool {
  return p.Recognition != nil
}

func (p *Resource) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *Resource) IsSetUpdateSequenceNum() bool {
  return p.UpdateSequenceNum != nil
}

func (p *Resource) IsSetAlternateData() bool {
  return p.AlternateData != nil
}

func (p *Resource) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Resource)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GUID(v)
  p.GUID = &temp
}
  return nil
}

func (p *Resource)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := GUID(v)
  p.NoteGuid = &temp
}
  return nil
}

func (p *Resource)  ReadField3(iprot thrift.TProtocol) error {
  p.Data = &Data{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *Resource)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Mime = &v
}
  return nil
}

func (p *Resource)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Width = &v
}
  return nil
}

func (p *Resource)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Height = &v
}
  return nil
}

func (p *Resource)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Duration = &v
}
  return nil
}

func (p *Resource)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Active = &v
}
  return nil
}

func (p *Resource)  ReadField9(iprot thrift.TProtocol) error {
  p.Recognition = &Data{}
  if err := p.Recognition.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Recognition), err)
  }
  return nil
}

func (p *Resource)  ReadField11(iprot thrift.TProtocol) error {
  p.Attributes = &ResourceAttributes{}
  if err := p.Attributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attributes), err)
  }
  return nil
}

func (p *Resource)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.UpdateSequenceNum = &v
}
  return nil
}

func (p *Resource)  ReadField13(iprot thrift.TProtocol) error {
  p.AlternateData = &Data{}
  if err := p.AlternateData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AlternateData), err)
  }
  return nil
}

func (p *Resource) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Resource"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Resource) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetGUID() {
    if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err) }
    if err := oprot.WriteString(string(*p.GUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err) }
  }
  return err
}

func (p *Resource) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoteGuid() {
    if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noteGuid: ", p), err) }
    if err := oprot.WriteString(string(*p.NoteGuid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noteGuid (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noteGuid: ", p), err) }
  }
  return err
}

func (p *Resource) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *Resource) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMime() {
    if err := oprot.WriteFieldBegin("mime", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mime: ", p), err) }
    if err := oprot.WriteString(string(*p.Mime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.mime (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mime: ", p), err) }
  }
  return err
}

func (p *Resource) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetWidth() {
    if err := oprot.WriteFieldBegin("width", thrift.I16, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:width: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Width)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.width (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:width: ", p), err) }
  }
  return err
}

func (p *Resource) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeight() {
    if err := oprot.WriteFieldBegin("height", thrift.I16, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:height: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Height)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.height (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:height: ", p), err) }
  }
  return err
}

func (p *Resource) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetDuration() {
    if err := oprot.WriteFieldBegin("duration", thrift.I16, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:duration: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Duration)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.duration (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:duration: ", p), err) }
  }
  return err
}

func (p *Resource) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetActive() {
    if err := oprot.WriteFieldBegin("active", thrift.BOOL, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:active: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Active)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.active (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:active: ", p), err) }
  }
  return err
}

func (p *Resource) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecognition() {
    if err := oprot.WriteFieldBegin("recognition", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:recognition: ", p), err) }
    if err := p.Recognition.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Recognition), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:recognition: ", p), err) }
  }
  return err
}

func (p *Resource) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:attributes: ", p), err) }
    if err := p.Attributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:attributes: ", p), err) }
  }
  return err
}

func (p *Resource) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateSequenceNum() {
    if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:updateSequenceNum: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:updateSequenceNum: ", p), err) }
  }
  return err
}

func (p *Resource) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetAlternateData() {
    if err := oprot.WriteFieldBegin("alternateData", thrift.STRUCT, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:alternateData: ", p), err) }
    if err := p.AlternateData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AlternateData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:alternateData: ", p), err) }
  }
  return err
}

func (p *Resource) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Resource(%+v)", *p)
}

// The list of optional attributes that can be stored on a note.
// <dl>
// <dt>subjectDate</dt>
//   <dd>time that the note refers to
//   </dd>
// 
// <dt>latitude</dt>
//   <dd>the latitude where the note was taken
//   </dd>
// 
// <dt>longitude</dt>
//   <dd>the longitude where the note was taken
//   </dd>
// 
// <dt>altitude</dt>
//   <dd>the altitude where the note was taken
//   </dd>
// 
// <dt>author</dt>
//   <dd>the author of the content of the note
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
// 
// <dt>source</dt>
//   <dd>the method that the note was added to the account, if the
//   note wasn't directly authored in an Evernote desktop client.
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
// 
// <dt>sourceURL</dt>
//   <dd>the original location where the resource was hosted. For web clips,
//   this will be the URL of the page that was clipped.
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
// 
// <dt>sourceApplication</dt>
//   <dd>an identifying string for the application that
//   created this note.  This string does not have a guaranteed syntax or
//   structure -- it is intended for human inspection and tracking.
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
// 
// <dt>shareDate</dt>
//  <dd>The date and time when this note was directly shared via its own URL.
//  This is only set on notes that were individually shared - it is independent
//  of any notebook-level sharing of the containing notebook. This field
//  is treated as "read-only" for clients; the server will ignore changes
//  to this field from an external client.
//  </dd>
// 
// <dt>reminderOrder</dt>
// <dd>The set of notes with this parameter set are considered
// "reminders" and are to be treated specially by clients to give them
// higher UI prominence within a notebook.  The value is used to sort
// the reminder notes within the notebook with higher values
// representing greater prominence.  Outside of the context of a
// notebook, the value of this parameter is undefined.  The value is
// not intended to be compared to the values of reminder notes in
// other notebooks.  In order to allow clients to place a note at a
// higher precedence than other notes, you should never set a value
// greater than the current time (as defined for a Timetstamp). To
// place a note at higher precedence than existing notes, set the
// value to the current time as defined for a timestamp (milliseconds
// since the epoch).  Synchronizing clients must remember the time when
// the update was performed, using the local clock on the client,
// and use that value when they later upload the note to the service.
// Clients must not set the reminderOrder to the reminderTime as the
// reminderTime could be in the future.  Those two fields are never
// intended to be related.  The correct value for reminderOrder field
// for new notes is the "current" time when the user indicated that
// the note is a reminder.  Clients may implement a separate
// "sort by date" feature to show notes ordered by reminderTime.
// Whenever a reminderDoneTime or reminderTime is set but a
// reminderOrder is not set, the server will fill in the current
// server time for the reminderOrder field.</dd>
// 
// <dt>reminderDoneTime</dt>
// <dd>The date and time when a user dismissed/"marked done" the reminder
// on the note.  Users typically do not manually set this value directly
// as it is set to the time when the user dismissed/"marked done" the
// reminder.</dd>
// 
// <dt>reminderTime</dt>
// <dd>The date and time a user has selected to be reminded of the note.
// A note with this value set is known as a "reminder" and the user can
// be reminded, via e-mail or client-specific notifications, of the note
// when the time is reached or about to be reached.  When a user sets
// a reminder time on a note that has a reminder done time, and that
// reminder time is in the future, then the reminder done time should be
// cleared.  This should happen regardless of any existing reminder time
// that may have previously existed on the note.</dd>
// 
// <dt>placeName</dt>
// <dd>Allows the user to assign a human-readable location name associated
// with a note. Users may assign values like 'Home' and 'Work'. Place
// names may also be populated with values from geonames database
// (e.g., a restaurant name). Applications are encouraged to normalize values
// so that grouping values by place name provides a useful result. Applications
// MUST NOT automatically add place name values based on geolocation without
// confirmation from the user; that is, the value in this field should be
// more useful than a simple automated lookup based on the note's latitude
// and longitude.</dd>
// 
// <dt>contentClass</dt>
// <dd>The class (or type) of note. This field is used to indicate to
// clients that special structured information is represented within
// the note such that special rules apply when making
// modifications. If contentClass is set and the client
// application does not specifically support the specified class,
// the client MUST treat the note as read-only. In this case, the
// client MAY modify the note's notebook and tags via the
// Note.notebookGuid and Note.tagGuids fields.  The client MAY also
// modify the reminderOrder field as well as the reminderTime and
// reminderDoneTime fields.
// <p>Applications should set contentClass only when they are creating notes
// that contain structured information that needs to be maintained in order
// for the user to be able to use the note within that application.
// Setting contentClass makes a note read-only in other applications, so
// there is a trade-off when an application chooses to use contentClass.
// Applications that set contentClass when creating notes must use a contentClass
// string of the form <i>CompanyName.ApplicationName</i> to ensure uniqueness.</p>
// Length restrictions: EDAM_NOTE_CONTENT_CLASS_LEN_MIN, EDAM_NOTE_CONTENT_CLASS_LEN_MAX
// <br/>
// Regex: EDAM_NOTE_CONTENT_CLASS_REGEX
// </dd>
// 
// <dt>applicationData</dt>
// <dd>Provides a location for applications to store a relatively small
// (4kb) blob of data that is not meant to be visible to the user and
// that is opaque to the Evernote service. A single application may use at most
// one entry in this map, using its API consumer key as the map key. See the
// documentation for LazyMap for a description of when the actual map values
// are returned by the service.
// <p>To safely add or modify your application's entry in the map, use
// NoteStore.setNoteApplicationDataEntry. To safely remove your application's
// entry from the map, use NoteStore.unsetNoteApplicationDataEntry.</p>
// Minimum length of a name (key): EDAM_APPLICATIONDATA_NAME_LEN_MIN
// <br/>
// Sum max size of key and value: EDAM_APPLICATIONDATA_ENTRY_LEN_MAX
// <br/>
// Syntax regex for name (key): EDAM_APPLICATIONDATA_NAME_REGEX
// </dd>
// 
// <dt>creatorId</dt>
// <dd>The numeric user ID of the user who originally created the note.</dd>
// 
// <dt>lastEditedBy</dt>
// <dd>An indication of who made the last change to the note.  If you are
// accessing the note via a shared notebook to which you have modification
// rights, or if you are the owner of the notebook to which the note belongs,
// then you have access to the value.  In this case, the value will be
// unset if the owner of the notebook containing the note was the last to
// make the modification, else it will be a string describing the
// guest who made the last edit.  If you do not have access to this value,
// it will be left unset.  This field is read-only by clients.  The server
// will ignore all values set by clients into this field.</dd>
// 
// <dt>lastEditorId</dt>
// <dd>The numeric user ID of the user described in lastEditedBy.</dd>
// 
// <dt>classifications</dt>
// <dd>A map of classifications applied to the note by clients or by the
// Evernote service. The key is the string name of the classification type,
// and the value is a constant that begins with CLASSIFICATION_.</dd>
// 
// <dt>sharedWithBusiness</dt>
// <dd>When this flag is set on a business note, any user in that business
// may view the note if they request it by GUID. This field is read-only by
// clients. The server will ignore all values set by clients into this field.
// 
// To share a note with the business, use NoteStore.shareNoteWithBusiness and
// to stop sharing a note with the business, use NoteStore.stopSharingNoteWithBusiness.
// </dd>
// 
// <dt>conflictSourceNoteGuid</dt>
// <dd>If set, this specifies the GUID of a note that caused a sync conflict
// resulting in the creation of a duplicate note. The duplicated note contains
// the user's changes that could not be applied as a result of the sync conflict,
// and uses the conflictSourceNoteGuid field to specify the note that caused the
// conflict. This allows clients to provide a customized user experience for note
// conflicts.
// </dd>
// 
// <dt>noteTitleQuality</dt>
// <dd>If set, this specifies that the note's title was automatically generated
// and indicates the likelihood that the generated title is useful for display to
// the user. If not set, the note's title was manually entered by the user.
// 
// Clients MUST set this attribute to one of the following values when the
// corresponding note's title was not manually entered by the user:
// EDAM_NOTE_TITLE_QUALITY_UNTITLED, EDAM_NOTE_TITLE_QUALITY_LOW,
// EDAM_NOTE_TITLE_QUALITY_MEDIUM or EDAM_NOTE_TITLE_QUALITY_HIGH.
// 
// When a user edits a note's title, clients MUST unset this value.
// </dd>
// </dl>
// 
// Attributes:
//  - SubjectDate
//  - Latitude
//  - Longitude
//  - Altitude
//  - Author
//  - Source
//  - SourceURL
//  - SourceApplication
//  - ShareDate
//  - ReminderOrder
//  - ReminderDoneTime
//  - ReminderTime
//  - PlaceName
//  - ContentClass
//  - ApplicationData
//  - LastEditedBy
//  - Classifications
//  - CreatorId
//  - LastEditorId
//  - SharedWithBusiness
//  - ConflictSourceNoteGuid
//  - NoteTitleQuality
type NoteAttributes struct {
  SubjectDate *Timestamp `thrift:"subjectDate,1" db:"subjectDate" json:"subjectDate,omitempty"`
  // unused fields # 2 to 9
  Latitude *float64 `thrift:"latitude,10" db:"latitude" json:"latitude,omitempty"`
  Longitude *float64 `thrift:"longitude,11" db:"longitude" json:"longitude,omitempty"`
  Altitude *float64 `thrift:"altitude,12" db:"altitude" json:"altitude,omitempty"`
  Author *string `thrift:"author,13" db:"author" json:"author,omitempty"`
  Source *string `thrift:"source,14" db:"source" json:"source,omitempty"`
  SourceURL *string `thrift:"sourceURL,15" db:"sourceURL" json:"sourceURL,omitempty"`
  SourceApplication *string `thrift:"sourceApplication,16" db:"sourceApplication" json:"sourceApplication,omitempty"`
  ShareDate *Timestamp `thrift:"shareDate,17" db:"shareDate" json:"shareDate,omitempty"`
  ReminderOrder *int64 `thrift:"reminderOrder,18" db:"reminderOrder" json:"reminderOrder,omitempty"`
  ReminderDoneTime *Timestamp `thrift:"reminderDoneTime,19" db:"reminderDoneTime" json:"reminderDoneTime,omitempty"`
  ReminderTime *Timestamp `thrift:"reminderTime,20" db:"reminderTime" json:"reminderTime,omitempty"`
  PlaceName *string `thrift:"placeName,21" db:"placeName" json:"placeName,omitempty"`
  ContentClass *string `thrift:"contentClass,22" db:"contentClass" json:"contentClass,omitempty"`
  ApplicationData *LazyMap `thrift:"applicationData,23" db:"applicationData" json:"applicationData,omitempty"`
  LastEditedBy *string `thrift:"lastEditedBy,24" db:"lastEditedBy" json:"lastEditedBy,omitempty"`
  // unused field # 25
  Classifications map[string]string `thrift:"classifications,26" db:"classifications" json:"classifications,omitempty"`
  CreatorId *UserID `thrift:"creatorId,27" db:"creatorId" json:"creatorId,omitempty"`
  LastEditorId *UserID `thrift:"lastEditorId,28" db:"lastEditorId" json:"lastEditorId,omitempty"`
  SharedWithBusiness *bool `thrift:"sharedWithBusiness,29" db:"sharedWithBusiness" json:"sharedWithBusiness,omitempty"`
  ConflictSourceNoteGuid *GUID `thrift:"conflictSourceNoteGuid,30" db:"conflictSourceNoteGuid" json:"conflictSourceNoteGuid,omitempty"`
  NoteTitleQuality *int32 `thrift:"noteTitleQuality,31" db:"noteTitleQuality" json:"noteTitleQuality,omitempty"`
}

func NewNoteAttributes() *NoteAttributes {
  return &NoteAttributes{}
}

var NoteAttributes_SubjectDate_DEFAULT Timestamp
func (p *NoteAttributes) GetSubjectDate() Timestamp {
  if !p.IsSetSubjectDate() {
    return NoteAttributes_SubjectDate_DEFAULT
  }
return *p.SubjectDate
}
var NoteAttributes_Latitude_DEFAULT float64
func (p *NoteAttributes) GetLatitude() float64 {
  if !p.IsSetLatitude() {
    return NoteAttributes_Latitude_DEFAULT
  }
return *p.Latitude
}
var NoteAttributes_Longitude_DEFAULT float64
func (p *NoteAttributes) GetLongitude() float64 {
  if !p.IsSetLongitude() {
    return NoteAttributes_Longitude_DEFAULT
  }
return *p.Longitude
}
var NoteAttributes_Altitude_DEFAULT float64
func (p *NoteAttributes) GetAltitude() float64 {
  if !p.IsSetAltitude() {
    return NoteAttributes_Altitude_DEFAULT
  }
return *p.Altitude
}
var NoteAttributes_Author_DEFAULT string
func (p *NoteAttributes) GetAuthor() string {
  if !p.IsSetAuthor() {
    return NoteAttributes_Author_DEFAULT
  }
return *p.Author
}
var NoteAttributes_Source_DEFAULT string
func (p *NoteAttributes) GetSource() string {
  if !p.IsSetSource() {
    return NoteAttributes_Source_DEFAULT
  }
return *p.Source
}
var NoteAttributes_SourceURL_DEFAULT string
func (p *NoteAttributes) GetSourceURL() string {
  if !p.IsSetSourceURL() {
    return NoteAttributes_SourceURL_DEFAULT
  }
return *p.SourceURL
}
var NoteAttributes_SourceApplication_DEFAULT string
func (p *NoteAttributes) GetSourceApplication() string {
  if !p.IsSetSourceApplication() {
    return NoteAttributes_SourceApplication_DEFAULT
  }
return *p.SourceApplication
}
var NoteAttributes_ShareDate_DEFAULT Timestamp
func (p *NoteAttributes) GetShareDate() Timestamp {
  if !p.IsSetShareDate() {
    return NoteAttributes_ShareDate_DEFAULT
  }
return *p.ShareDate
}
var NoteAttributes_ReminderOrder_DEFAULT int64
func (p *NoteAttributes) GetReminderOrder() int64 {
  if !p.IsSetReminderOrder() {
    return NoteAttributes_ReminderOrder_DEFAULT
  }
return *p.ReminderOrder
}
var NoteAttributes_ReminderDoneTime_DEFAULT Timestamp
func (p *NoteAttributes) GetReminderDoneTime() Timestamp {
  if !p.IsSetReminderDoneTime() {
    return NoteAttributes_ReminderDoneTime_DEFAULT
  }
return *p.ReminderDoneTime
}
var NoteAttributes_ReminderTime_DEFAULT Timestamp
func (p *NoteAttributes) GetReminderTime() Timestamp {
  if !p.IsSetReminderTime() {
    return NoteAttributes_ReminderTime_DEFAULT
  }
return *p.ReminderTime
}
var NoteAttributes_PlaceName_DEFAULT string
func (p *NoteAttributes) GetPlaceName() string {
  if !p.IsSetPlaceName() {
    return NoteAttributes_PlaceName_DEFAULT
  }
return *p.PlaceName
}
var NoteAttributes_ContentClass_DEFAULT string
func (p *NoteAttributes) GetContentClass() string {
  if !p.IsSetContentClass() {
    return NoteAttributes_ContentClass_DEFAULT
  }
return *p.ContentClass
}
var NoteAttributes_ApplicationData_DEFAULT *LazyMap
func (p *NoteAttributes) GetApplicationData() *LazyMap {
  if !p.IsSetApplicationData() {
    return NoteAttributes_ApplicationData_DEFAULT
  }
return p.ApplicationData
}
var NoteAttributes_LastEditedBy_DEFAULT string
func (p *NoteAttributes) GetLastEditedBy() string {
  if !p.IsSetLastEditedBy() {
    return NoteAttributes_LastEditedBy_DEFAULT
  }
return *p.LastEditedBy
}
var NoteAttributes_Classifications_DEFAULT map[string]string

func (p *NoteAttributes) GetClassifications() map[string]string {
  return p.Classifications
}
var NoteAttributes_CreatorId_DEFAULT UserID
func (p *NoteAttributes) GetCreatorId() UserID {
  if !p.IsSetCreatorId() {
    return NoteAttributes_CreatorId_DEFAULT
  }
return *p.CreatorId
}
var NoteAttributes_LastEditorId_DEFAULT UserID
func (p *NoteAttributes) GetLastEditorId() UserID {
  if !p.IsSetLastEditorId() {
    return NoteAttributes_LastEditorId_DEFAULT
  }
return *p.LastEditorId
}
var NoteAttributes_SharedWithBusiness_DEFAULT bool
func (p *NoteAttributes) GetSharedWithBusiness() bool {
  if !p.IsSetSharedWithBusiness() {
    return NoteAttributes_SharedWithBusiness_DEFAULT
  }
return *p.SharedWithBusiness
}
var NoteAttributes_ConflictSourceNoteGuid_DEFAULT GUID
func (p *NoteAttributes) GetConflictSourceNoteGuid() GUID {
  if !p.IsSetConflictSourceNoteGuid() {
    return NoteAttributes_ConflictSourceNoteGuid_DEFAULT
  }
return *p.ConflictSourceNoteGuid
}
var NoteAttributes_NoteTitleQuality_DEFAULT int32
func (p *NoteAttributes) GetNoteTitleQuality() int32 {
  if !p.IsSetNoteTitleQuality() {
    return NoteAttributes_NoteTitleQuality_DEFAULT
  }
return *p.NoteTitleQuality
}
func (p *NoteAttributes) IsSetSubjectDate() bool {
  return p.SubjectDate != nil
}

func (p *NoteAttributes) IsSetLatitude() bool {
  return p.Latitude != nil
}

func (p *NoteAttributes) IsSetLongitude() bool {
  return p.Longitude != nil
}

func (p *NoteAttributes) IsSetAltitude() bool {
  return p.Altitude != nil
}

func (p *NoteAttributes) IsSetAuthor() bool {
  return p.Author != nil
}

func (p *NoteAttributes) IsSetSource() bool {
  return p.Source != nil
}

func (p *NoteAttributes) IsSetSourceURL() bool {
  return p.SourceURL != nil
}

func (p *NoteAttributes) IsSetSourceApplication() bool {
  return p.SourceApplication != nil
}

func (p *NoteAttributes) IsSetShareDate() bool {
  return p.ShareDate != nil
}

func (p *NoteAttributes) IsSetReminderOrder() bool {
  return p.ReminderOrder != nil
}

func (p *NoteAttributes) IsSetReminderDoneTime() bool {
  return p.ReminderDoneTime != nil
}

func (p *NoteAttributes) IsSetReminderTime() bool {
  return p.ReminderTime != nil
}

func (p *NoteAttributes) IsSetPlaceName() bool {
  return p.PlaceName != nil
}

func (p *NoteAttributes) IsSetContentClass() bool {
  return p.ContentClass != nil
}

func (p *NoteAttributes) IsSetApplicationData() bool {
  return p.ApplicationData != nil
}

func (p *NoteAttributes) IsSetLastEditedBy() bool {
  return p.LastEditedBy != nil
}

func (p *NoteAttributes) IsSetClassifications() bool {
  return p.Classifications != nil
}

func (p *NoteAttributes) IsSetCreatorId() bool {
  return p.CreatorId != nil
}

func (p *NoteAttributes) IsSetLastEditorId() bool {
  return p.LastEditorId != nil
}

func (p *NoteAttributes) IsSetSharedWithBusiness() bool {
  return p.SharedWithBusiness != nil
}

func (p *NoteAttributes) IsSetConflictSourceNoteGuid() bool {
  return p.ConflictSourceNoteGuid != nil
}

func (p *NoteAttributes) IsSetNoteTitleQuality() bool {
  return p.NoteTitleQuality != nil
}

func (p *NoteAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField29(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoteAttributes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Timestamp(v)
  p.SubjectDate = &temp
}
  return nil
}

func (p *NoteAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Latitude = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Longitude = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Altitude = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Author = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Source = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.SourceURL = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.SourceApplication = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  temp := Timestamp(v)
  p.ShareDate = &temp
}
  return nil
}

func (p *NoteAttributes)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.ReminderOrder = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  temp := Timestamp(v)
  p.ReminderDoneTime = &temp
}
  return nil
}

func (p *NoteAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := Timestamp(v)
  p.ReminderTime = &temp
}
  return nil
}

func (p *NoteAttributes)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PlaceName = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.ContentClass = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField23(iprot thrift.TProtocol) error {
  p.ApplicationData = &LazyMap{}
  if err := p.ApplicationData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationData), err)
  }
  return nil
}

func (p *NoteAttributes)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.LastEditedBy = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField26(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Classifications =  tMap
  for i := 0; i < size; i ++ {
var _key5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
var _val6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val6 = v
}
    p.Classifications[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NoteAttributes)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  temp := UserID(v)
  p.CreatorId = &temp
}
  return nil
}

func (p *NoteAttributes)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  temp := UserID(v)
  p.LastEditorId = &temp
}
  return nil
}

func (p *NoteAttributes)  ReadField29(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.SharedWithBusiness = &v
}
  return nil
}

func (p *NoteAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  temp := GUID(v)
  p.ConflictSourceNoteGuid = &temp
}
  return nil
}

func (p *NoteAttributes)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NoteTitleQuality = &v
}
  return nil
}

func (p *NoteAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NoteAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoteAttributes) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSubjectDate() {
    if err := oprot.WriteFieldBegin("subjectDate", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:subjectDate: ", p), err) }
    if err := oprot.WriteI64(int64(*p.SubjectDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.subjectDate (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:subjectDate: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetLatitude() {
    if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:latitude: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Latitude)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.latitude (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:latitude: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetLongitude() {
    if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:longitude: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Longitude)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.longitude (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:longitude: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetAltitude() {
    if err := oprot.WriteFieldBegin("altitude", thrift.DOUBLE, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:altitude: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Altitude)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.altitude (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:altitude: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthor() {
    if err := oprot.WriteFieldBegin("author", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:author: ", p), err) }
    if err := oprot.WriteString(string(*p.Author)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.author (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:author: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetSource() {
    if err := oprot.WriteFieldBegin("source", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:source: ", p), err) }
    if err := oprot.WriteString(string(*p.Source)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.source (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:source: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceURL() {
    if err := oprot.WriteFieldBegin("sourceURL", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:sourceURL: ", p), err) }
    if err := oprot.WriteString(string(*p.SourceURL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sourceURL (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:sourceURL: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceApplication() {
    if err := oprot.WriteFieldBegin("sourceApplication", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:sourceApplication: ", p), err) }
    if err := oprot.WriteString(string(*p.SourceApplication)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sourceApplication (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:sourceApplication: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetShareDate() {
    if err := oprot.WriteFieldBegin("shareDate", thrift.I64, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:shareDate: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ShareDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.shareDate (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:shareDate: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetReminderOrder() {
    if err := oprot.WriteFieldBegin("reminderOrder", thrift.I64, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:reminderOrder: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReminderOrder)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reminderOrder (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:reminderOrder: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetReminderDoneTime() {
    if err := oprot.WriteFieldBegin("reminderDoneTime", thrift.I64, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:reminderDoneTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReminderDoneTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reminderDoneTime (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:reminderDoneTime: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetReminderTime() {
    if err := oprot.WriteFieldBegin("reminderTime", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:reminderTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReminderTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reminderTime (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:reminderTime: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetPlaceName() {
    if err := oprot.WriteFieldBegin("placeName", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:placeName: ", p), err) }
    if err := oprot.WriteString(string(*p.PlaceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.placeName (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:placeName: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField22(oprot thrift.TProtocol) (err error) {
  if p.IsSetContentClass() {
    if err := oprot.WriteFieldBegin("contentClass", thrift.STRING, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:contentClass: ", p), err) }
    if err := oprot.WriteString(string(*p.ContentClass)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contentClass (22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:contentClass: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField23(oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationData() {
    if err := oprot.WriteFieldBegin("applicationData", thrift.STRUCT, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:applicationData: ", p), err) }
    if err := p.ApplicationData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:applicationData: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField24(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastEditedBy() {
    if err := oprot.WriteFieldBegin("lastEditedBy", thrift.STRING, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:lastEditedBy: ", p), err) }
    if err := oprot.WriteString(string(*p.LastEditedBy)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastEditedBy (24) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:lastEditedBy: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField26(oprot thrift.TProtocol) (err error) {
  if p.IsSetClassifications() {
    if err := oprot.WriteFieldBegin("classifications", thrift.MAP, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:classifications: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Classifications)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Classifications {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:classifications: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField27(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatorId() {
    if err := oprot.WriteFieldBegin("creatorId", thrift.I32, 27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:creatorId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.CreatorId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creatorId (27) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 27:creatorId: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField28(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastEditorId() {
    if err := oprot.WriteFieldBegin("lastEditorId", thrift.I32, 28); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:lastEditorId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.LastEditorId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastEditorId (28) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 28:lastEditorId: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField29(oprot thrift.TProtocol) (err error) {
  if p.IsSetSharedWithBusiness() {
    if err := oprot.WriteFieldBegin("sharedWithBusiness", thrift.BOOL, 29); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:sharedWithBusiness: ", p), err) }
    if err := oprot.WriteBool(bool(*p.SharedWithBusiness)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sharedWithBusiness (29) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 29:sharedWithBusiness: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetConflictSourceNoteGuid() {
    if err := oprot.WriteFieldBegin("conflictSourceNoteGuid", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:conflictSourceNoteGuid: ", p), err) }
    if err := oprot.WriteString(string(*p.ConflictSourceNoteGuid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.conflictSourceNoteGuid (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:conflictSourceNoteGuid: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) writeField31(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoteTitleQuality() {
    if err := oprot.WriteFieldBegin("noteTitleQuality", thrift.I32, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:noteTitleQuality: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NoteTitleQuality)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noteTitleQuality (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:noteTitleQuality: ", p), err) }
  }
  return err
}

func (p *NoteAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoteAttributes(%+v)", *p)
}

// Represents a relationship between a note and a single share invitation recipient. The recipient
// is identified via an Identity, and has a given privilege that specifies what actions they may
// take on the note.
// 
// <dl>
//   <dt>sharerUserID</dt>
//   <dd>The user ID of the user who shared the note with the recipient.</dd>
// 
//   <dt>recipientIdentity</dt>
//   <dd>The identity of the recipient of the share. For a given note, there may be only one
//     SharedNote per recipient identity. Only recipientIdentity.id is guaranteed to be set.
//     Other fields on the Identity may or my not be set based on the requesting user's
//     relationship with the recipient.</dd>
// 
//   <dt>privilege</dt>
//   <dd>The privilege level that the share grants to the recipient.</dd>
// 
//   <dt>serviceCreated</dt>
//   <dd>The time at which the share was created.</dd>
// 
//   <dt>serviceUpdated</dt>
//   <dd>The time at which the share was last updated.</dd>
// 
//   <dt>serviceAssigned</dt>
//   <dd>The time at which the share was assigned to a specific recipient user ID.</dd>
// </dl>
// 
// Attributes:
//  - SharerUserID
//  - RecipientIdentity
//  - Privilege
//  - ServiceCreated
//  - ServiceUpdated
//  - ServiceAssigned
type SharedNote struct {
  SharerUserID *UserID `thrift:"sharerUserID,1" db:"sharerUserID" json:"sharerUserID,omitempty"`
  RecipientIdentity *Identity `thrift:"recipientIdentity,2" db:"recipientIdentity" json:"recipientIdentity,omitempty"`
  Privilege *SharedNotePrivilegeLevel `thrift:"privilege,3" db:"privilege" json:"privilege,omitempty"`
  ServiceCreated *Timestamp `thrift:"serviceCreated,4" db:"serviceCreated" json:"serviceCreated,omitempty"`
  ServiceUpdated *Timestamp `thrift:"serviceUpdated,5" db:"serviceUpdated" json:"serviceUpdated,omitempty"`
  ServiceAssigned *Timestamp `thrift:"serviceAssigned,6" db:"serviceAssigned" json:"serviceAssigned,omitempty"`
}

func NewSharedNote() *SharedNote {
  return &SharedNote{}
}

var SharedNote_SharerUserID_DEFAULT UserID
func (p *SharedNote) GetSharerUserID() UserID {
  if !p.IsSetSharerUserID() {
    return SharedNote_SharerUserID_DEFAULT
  }
return *p.SharerUserID
}
var SharedNote_RecipientIdentity_DEFAULT *Identity
func (p *SharedNote) GetRecipientIdentity() *Identity {
  if !p.IsSetRecipientIdentity() {
    return SharedNote_RecipientIdentity_DEFAULT
  }
return p.RecipientIdentity
}
var SharedNote_Privilege_DEFAULT SharedNotePrivilegeLevel
func (p *SharedNote) GetPrivilege() SharedNotePrivilegeLevel {
  if !p.IsSetPrivilege() {
    return SharedNote_Privilege_DEFAULT
  }
return *p.Privilege
}
var SharedNote_ServiceCreated_DEFAULT Timestamp
func (p *SharedNote) GetServiceCreated() Timestamp {
  if !p.IsSetServiceCreated() {
    return SharedNote_ServiceCreated_DEFAULT
  }
return *p.ServiceCreated
}
var SharedNote_ServiceUpdated_DEFAULT Timestamp
func (p *SharedNote) GetServiceUpdated() Timestamp {
  if !p.IsSetServiceUpdated() {
    return SharedNote_ServiceUpdated_DEFAULT
  }
return *p.ServiceUpdated
}
var SharedNote_ServiceAssigned_DEFAULT Timestamp
func (p *SharedNote) GetServiceAssigned() Timestamp {
  if !p.IsSetServiceAssigned() {
    return SharedNote_ServiceAssigned_DEFAULT
  }
return *p.ServiceAssigned
}
func (p *SharedNote) IsSetSharerUserID() bool {
  return p.SharerUserID != nil
}

func (p *SharedNote) IsSetRecipientIdentity() bool {
  return p.RecipientIdentity != nil
}

func (p *SharedNote) IsSetPrivilege() bool {
  return p.Privilege != nil
}

func (p *SharedNote) IsSetServiceCreated() bool {
  return p.ServiceCreated != nil
}

func (p *SharedNote) IsSetServiceUpdated() bool {
  return p.ServiceUpdated != nil
}

func (p *SharedNote) IsSetServiceAssigned() bool {
  return p.ServiceAssigned != nil
}

func (p *SharedNote) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharedNote)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UserID(v)
  p.SharerUserID = &temp
}
  return nil
}

func (p *SharedNote)  ReadField2(iprot thrift.TProtocol) error {
  p.RecipientIdentity = &Identity{}
  if err := p.RecipientIdentity.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RecipientIdentity), err)
  }
  return nil
}

func (p *SharedNote)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SharedNotePrivilegeLevel(v)
  p.Privilege = &temp
}
  return nil
}

func (p *SharedNote)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Timestamp(v)
  p.ServiceCreated = &temp
}
  return nil
}

func (p *SharedNote)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Timestamp(v)
  p.ServiceUpdated = &temp
}
  return nil
}

func (p *SharedNote)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Timestamp(v)
  p.ServiceAssigned = &temp
}
  return nil
}

func (p *SharedNote) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SharedNote"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharedNote) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSharerUserID() {
    if err := oprot.WriteFieldBegin("sharerUserID", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sharerUserID: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SharerUserID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sharerUserID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sharerUserID: ", p), err) }
  }
  return err
}

func (p *SharedNote) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecipientIdentity() {
    if err := oprot.WriteFieldBegin("recipientIdentity", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recipientIdentity: ", p), err) }
    if err := p.RecipientIdentity.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RecipientIdentity), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recipientIdentity: ", p), err) }
  }
  return err
}

func (p *SharedNote) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivilege() {
    if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privilege: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.privilege (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privilege: ", p), err) }
  }
  return err
}

func (p *SharedNote) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceCreated() {
    if err := oprot.WriteFieldBegin("serviceCreated", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serviceCreated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ServiceCreated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceCreated (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serviceCreated: ", p), err) }
  }
  return err
}

func (p *SharedNote) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceUpdated() {
    if err := oprot.WriteFieldBegin("serviceUpdated", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:serviceUpdated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ServiceUpdated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceUpdated (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:serviceUpdated: ", p), err) }
  }
  return err
}

func (p *SharedNote) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceAssigned() {
    if err := oprot.WriteFieldBegin("serviceAssigned", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:serviceAssigned: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ServiceAssigned)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceAssigned (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:serviceAssigned: ", p), err) }
  }
  return err
}

func (p *SharedNote) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharedNote(%+v)", *p)
}

// This structure captures information about the operations that cannot be performed on a given
// note that has been shared with a recipient via a SharedNote. The following operations are
// <b>never</b> allowed based on SharedNotes, and as such are left out of the NoteRestrictions
// structure for brevity:
// 
// <ul>
//   <li>Expunging a note (NoteStore.expungeNote)</li>
//   <li>Moving a note to the trash (Note.active)</li>
//   <li>Updating a note's notebook (Note.notebookGuid)</li>
//   <li>Updating a note's tags (Note.tagGuids, Note.tagNames)</li>
//   <li>Updating a note's attributes (Note.attributes)</li>
//   <li>Sharing a note with the business (NoteStore.shareNoteWithBusiness</li>
//   <li>Getting a note's version history (NoteStore.listNoteVersions,
//     NoteStore.getNoteVersion)</li>
// </ul>
// 
// When a client has permission to update a note's title or content, it may also update the
// Note.updated timestamp.
// 
// <b>This structure reflects only the privileges / restrictions conveyed by the SharedNote.</b>
// It does not incorporate privileges conveyed by a potential SharedNotebook to the same
// recipient. As such, the actual permissions that the recipient has on the note may differ from
// the permissions expressed in this structure.
// 
// For example, consider a user with read-only access to a shared notebook, and a read-write share
// of a specific note in the notebook. The note restrictions would contain noUpdateTitle = false,
// while the notebook restrictions would contain noUpdateNotes = true. In this case, the user is
// allowed to update the note title based on the note restrictions.
// 
// Alternatively, consider a user with read-write access to a shared notebook, and a read-only
// share of a specific note in that notebook. The note restrictions would contain
// noUpdateTitle = true, while the notebook restrictions would contain noUpdateNotes = false. In
// this case, the user would have full edit permissions on the note based on the notebook
// restrictions.
// 
// <dl>
//   <dt>noUpdateTitle</dt>
//   <dd>The client may not update the note's title (Note.title).</dd>
// 
//   <dt>noUpdateContent<dt>
//   <dd>The client may not update the note's content. Content includes Note.content
//     and Note.resources, as well as the related fields Note.contentHash and
//     Note.contentLength.</dd>
// 
//   <dt>noEmail</dt>
//   <dd>The client may not email the note (NoteStore.emailNote).</dd>
// 
//   <dt>noShare</dt>
//   <dd>The client may not share the note with specific recipients
//     (NoteStore.createOrUpdateSharedNotes).</dd>
// 
//   <dt>noSharePublicly</dt>
//   <dd>The client may not make the note public (NoteStore.shareNote).</dd>
// </dl>
// 
// Attributes:
//  - NoUpdateTitle
//  - NoUpdateContent
//  - NoEmail
//  - NoShare
//  - NoSharePublicly
type NoteRestrictions struct {
  NoUpdateTitle *bool `thrift:"noUpdateTitle,1" db:"noUpdateTitle" json:"noUpdateTitle,omitempty"`
  NoUpdateContent *bool `thrift:"noUpdateContent,2" db:"noUpdateContent" json:"noUpdateContent,omitempty"`
  NoEmail *bool `thrift:"noEmail,3" db:"noEmail" json:"noEmail,omitempty"`
  NoShare *bool `thrift:"noShare,4" db:"noShare" json:"noShare,omitempty"`
  NoSharePublicly *bool `thrift:"noSharePublicly,5" db:"noSharePublicly" json:"noSharePublicly,omitempty"`
}

func NewNoteRestrictions() *NoteRestrictions {
  return &NoteRestrictions{}
}

var NoteRestrictions_NoUpdateTitle_DEFAULT bool
func (p *NoteRestrictions) GetNoUpdateTitle() bool {
  if !p.IsSetNoUpdateTitle() {
    return NoteRestrictions_NoUpdateTitle_DEFAULT
  }
return *p.NoUpdateTitle
}
var NoteRestrictions_NoUpdateContent_DEFAULT bool
func (p *NoteRestrictions) GetNoUpdateContent() bool {
  if !p.IsSetNoUpdateContent() {
    return NoteRestrictions_NoUpdateContent_DEFAULT
  }
return *p.NoUpdateContent
}
var NoteRestrictions_NoEmail_DEFAULT bool
func (p *NoteRestrictions) GetNoEmail() bool {
  if !p.IsSetNoEmail() {
    return NoteRestrictions_NoEmail_DEFAULT
  }
return *p.NoEmail
}
var NoteRestrictions_NoShare_DEFAULT bool
func (p *NoteRestrictions) GetNoShare() bool {
  if !p.IsSetNoShare() {
    return NoteRestrictions_NoShare_DEFAULT
  }
return *p.NoShare
}
var NoteRestrictions_NoSharePublicly_DEFAULT bool
func (p *NoteRestrictions) GetNoSharePublicly() bool {
  if !p.IsSetNoSharePublicly() {
    return NoteRestrictions_NoSharePublicly_DEFAULT
  }
return *p.NoSharePublicly
}
func (p *NoteRestrictions) IsSetNoUpdateTitle() bool {
  return p.NoUpdateTitle != nil
}

func (p *NoteRestrictions) IsSetNoUpdateContent() bool {
  return p.NoUpdateContent != nil
}

func (p *NoteRestrictions) IsSetNoEmail() bool {
  return p.NoEmail != nil
}

func (p *NoteRestrictions) IsSetNoShare() bool {
  return p.NoShare != nil
}

func (p *NoteRestrictions) IsSetNoSharePublicly() bool {
  return p.NoSharePublicly != nil
}

func (p *NoteRestrictions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoteRestrictions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NoUpdateTitle = &v
}
  return nil
}

func (p *NoteRestrictions)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NoUpdateContent = &v
}
  return nil
}

func (p *NoteRestrictions)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NoEmail = &v
}
  return nil
}

func (p *NoteRestrictions)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NoShare = &v
}
  return nil
}

func (p *NoteRestrictions)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NoSharePublicly = &v
}
  return nil
}

func (p *NoteRestrictions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NoteRestrictions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoteRestrictions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoUpdateTitle() {
    if err := oprot.WriteFieldBegin("noUpdateTitle", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:noUpdateTitle: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoUpdateTitle)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noUpdateTitle (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:noUpdateTitle: ", p), err) }
  }
  return err
}

func (p *NoteRestrictions) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoUpdateContent() {
    if err := oprot.WriteFieldBegin("noUpdateContent", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noUpdateContent: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoUpdateContent)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noUpdateContent (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noUpdateContent: ", p), err) }
  }
  return err
}

func (p *NoteRestrictions) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoEmail() {
    if err := oprot.WriteFieldBegin("noEmail", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:noEmail: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noEmail (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:noEmail: ", p), err) }
  }
  return err
}

func (p *NoteRestrictions) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoShare() {
    if err := oprot.WriteFieldBegin("noShare", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:noShare: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoShare)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noShare (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:noShare: ", p), err) }
  }
  return err
}

func (p *NoteRestrictions) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoSharePublicly() {
    if err := oprot.WriteFieldBegin("noSharePublicly", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:noSharePublicly: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoSharePublicly)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noSharePublicly (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:noSharePublicly: ", p), err) }
  }
  return err
}

func (p *NoteRestrictions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoteRestrictions(%+v)", *p)
}

// Represents the owner's account related limits on a Note.
// The field uploaded represents the total number of bytes that have been uploaded
// to this account and is taken from the SyncState struct. All other fields
// represent account related limits and are taken from the AccountLimits struct.
// <p />
// See SyncState and AccountLimits struct field definitions for more details.
// 
// Attributes:
//  - NoteResourceCountMax
//  - UploadLimit
//  - ResourceSizeMax
//  - NoteSizeMax
//  - Uploaded
type NoteLimits struct {
  NoteResourceCountMax *int32 `thrift:"noteResourceCountMax,1" db:"noteResourceCountMax" json:"noteResourceCountMax,omitempty"`
  UploadLimit *int64 `thrift:"uploadLimit,2" db:"uploadLimit" json:"uploadLimit,omitempty"`
  ResourceSizeMax *int64 `thrift:"resourceSizeMax,3" db:"resourceSizeMax" json:"resourceSizeMax,omitempty"`
  NoteSizeMax *int64 `thrift:"noteSizeMax,4" db:"noteSizeMax" json:"noteSizeMax,omitempty"`
  Uploaded *int64 `thrift:"uploaded,5" db:"uploaded" json:"uploaded,omitempty"`
}

func NewNoteLimits() *NoteLimits {
  return &NoteLimits{}
}

var NoteLimits_NoteResourceCountMax_DEFAULT int32
func (p *NoteLimits) GetNoteResourceCountMax() int32 {
  if !p.IsSetNoteResourceCountMax() {
    return NoteLimits_NoteResourceCountMax_DEFAULT
  }
return *p.NoteResourceCountMax
}
var NoteLimits_UploadLimit_DEFAULT int64
func (p *NoteLimits) GetUploadLimit() int64 {
  if !p.IsSetUploadLimit() {
    return NoteLimits_UploadLimit_DEFAULT
  }
return *p.UploadLimit
}
var NoteLimits_ResourceSizeMax_DEFAULT int64
func (p *NoteLimits) GetResourceSizeMax() int64 {
  if !p.IsSetResourceSizeMax() {
    return NoteLimits_ResourceSizeMax_DEFAULT
  }
return *p.ResourceSizeMax
}
var NoteLimits_NoteSizeMax_DEFAULT int64
func (p *NoteLimits) GetNoteSizeMax() int64 {
  if !p.IsSetNoteSizeMax() {
    return NoteLimits_NoteSizeMax_DEFAULT
  }
return *p.NoteSizeMax
}
var NoteLimits_Uploaded_DEFAULT int64
func (p *NoteLimits) GetUploaded() int64 {
  if !p.IsSetUploaded() {
    return NoteLimits_Uploaded_DEFAULT
  }
return *p.Uploaded
}
func (p *NoteLimits) IsSetNoteResourceCountMax() bool {
  return p.NoteResourceCountMax != nil
}

func (p *NoteLimits) IsSetUploadLimit() bool {
  return p.UploadLimit != nil
}

func (p *NoteLimits) IsSetResourceSizeMax() bool {
  return p.ResourceSizeMax != nil
}

func (p *NoteLimits) IsSetNoteSizeMax() bool {
  return p.NoteSizeMax != nil
}

func (p *NoteLimits) IsSetUploaded() bool {
  return p.Uploaded != nil
}

func (p *NoteLimits) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoteLimits)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NoteResourceCountMax = &v
}
  return nil
}

func (p *NoteLimits)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UploadLimit = &v
}
  return nil
}

func (p *NoteLimits)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ResourceSizeMax = &v
}
  return nil
}

func (p *NoteLimits)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NoteSizeMax = &v
}
  return nil
}

func (p *NoteLimits)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Uploaded = &v
}
  return nil
}

func (p *NoteLimits) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NoteLimits"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoteLimits) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoteResourceCountMax() {
    if err := oprot.WriteFieldBegin("noteResourceCountMax", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:noteResourceCountMax: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NoteResourceCountMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noteResourceCountMax (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:noteResourceCountMax: ", p), err) }
  }
  return err
}

func (p *NoteLimits) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUploadLimit() {
    if err := oprot.WriteFieldBegin("uploadLimit", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uploadLimit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.UploadLimit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uploadLimit (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uploadLimit: ", p), err) }
  }
  return err
}

func (p *NoteLimits) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetResourceSizeMax() {
    if err := oprot.WriteFieldBegin("resourceSizeMax", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resourceSizeMax: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ResourceSizeMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourceSizeMax (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resourceSizeMax: ", p), err) }
  }
  return err
}

func (p *NoteLimits) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoteSizeMax() {
    if err := oprot.WriteFieldBegin("noteSizeMax", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:noteSizeMax: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NoteSizeMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noteSizeMax (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:noteSizeMax: ", p), err) }
  }
  return err
}

func (p *NoteLimits) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetUploaded() {
    if err := oprot.WriteFieldBegin("uploaded", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:uploaded: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Uploaded)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uploaded (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:uploaded: ", p), err) }
  }
  return err
}

func (p *NoteLimits) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoteLimits(%+v)", *p)
}

// Represents a single note in the user's account.
// 
// <dl>
// <dt>guid</dt>
//   <dd>The unique identifier of this note.  Will be set by the
//   server, but will be omitted by clients calling NoteStore.createNote()
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
// 
// <dt>title</dt>
//   <dd>The subject of the note.  Can't begin or end with a space.
//   <br/>
//   Length:  EDAM_NOTE_TITLE_LEN_MIN - EDAM_NOTE_TITLE_LEN_MAX
//   <br/>
//   Regex:  EDAM_NOTE_TITLE_REGEX
//   </dd>
// 
// <dt>content</dt>
//   <dd>The XHTML block that makes up the note.  This is
//   the canonical form of the note's contents, so will include abstract
//   Evernote tags for internal resource references.  A client may create
//   a separate transformed version of this content for internal presentation,
//   but the same canonical bytes should be used for transmission and
//   comparison unless the user chooses to modify their content.
//   <br/>
//   Length:  EDAM_NOTE_CONTENT_LEN_MIN - EDAM_NOTE_CONTENT_LEN_MAX
//   </dd>
// 
// <dt>contentHash</dt>
//   <dd>The binary MD5 checksum of the UTF-8 encoded content
//   body. This will always be set by the server, but clients may choose to omit
//   this when they submit a note with content.
//   <br/>
//   Length:  EDAM_HASH_LEN (exactly)
//   </dd>
// 
// <dt>contentLength</dt>
//   <dd>The number of Unicode characters in the content of
//   the note.  This will always be set by the service, but clients may choose
//   to omit this value when they submit a Note.
//   </dd>
// 
// <dt>created</dt>
//   <dd>The date and time when the note was created in one of the
//   clients.  In most cases, this will match the user's sense of when
//   the note was created, and ordering between notes will be based on
//   ordering of this field.  However, this is not a "reliable" timestamp
//   if a client has an incorrect clock, so it cannot provide a true absolute
//   ordering between notes.  Notes created directly through the service
//   (e.g. via the web GUI) will have an absolutely ordered "created" value.
//   </dd>
// 
// <dt>updated</dt>
//   <dd>The date and time when the note was last modified in one of
//   the clients.  In most cases, this will match the user's sense of when
//   the note was modified, but this field may not be absolutely reliable
//   due to the possibility of client clock errors.
//   </dd>
// 
// <dt>deleted</dt>
//   <dd>If present, the note is considered "deleted", and this
//   stores the date and time when the note was deleted by one of the clients.
//   In most cases, this will match the user's sense of when the note was
//   deleted, but this field may be unreliable due to the possibility of
//   client clock errors.
//   </dd>
// 
// <dt>active</dt>
//   <dd>If the note is available for normal actions and viewing,
//   this flag will be set to true.
//   </dd>
// 
// <dt>updateSequenceNum</dt>
//   <dd>A number identifying the last transaction to
//   modify the state of this note (including changes to the note's attributes
//   or resources).  The USN values are sequential within an account,
//   and can be used to compare the order of modifications within the service.
//   </dd>
// 
// <dt>notebookGuid</dt>
//   <dd>The unique identifier of the notebook that contains
//   this note.  If no notebookGuid is provided on a call to createNote(), the
//   default notebook will be used instead.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
// 
// <dt>tagGuids</dt>
//   <dd>A list of the GUID identifiers for tags that are applied to this note.
//   This may be provided in a call to createNote() to unambiguously declare
//   the tags that should be assigned to the new note.  Alternately, clients
//   may pass the names of desired tags via the 'tagNames' field during
//   note creation.
//   If the list of tags are omitted on a call to createNote(), then
//   the server will assume that no changes have been made to the resources.
//   Maximum:  EDAM_NOTE_TAGS_MAX tags per note
//   </dd>
// 
// <dt>resources</dt>
//   <dd>The list of resources that are embedded within this note.
//   If the list of resources are omitted on a call to updateNote(), then
//   the server will assume that no changes have been made to the resources.
//   The binary contents of the resources must be provided when the resource
//   is first sent to the service, but it will be omitted by the service when
//   the Note is returned in the future.
//   Maximum:  EDAM_NOTE_RESOURCES_MAX resources per note
//   </dd>
// 
// <dt>attributes</dt>
//   <dd>A list of the attributes for this note.
//   If the list of attributes are omitted on a call to updateNote(), then
//   the server will assume that no changes have been made to the resources.
//   </dd>
// 
// <dt>tagNames</dt>
//   <dd>May be provided by clients during calls to createNote() as an
//   alternative to providing the tagGuids of existing tags.  If any tagNames
//   are provided during createNote(), these will be found, or created if they
//   don't already exist.  Created tags will have no parent (they will be at
//   the top level of the tag panel).
//   </dd>
// 
// <dt>sharedNotes</dt>
//   <dd>The list of recipients with whom this note has been shared. This field will be unset if
//     the caller has access to the note via the containing notebook, but does not have activity
//     feed permission for that notebook. This field is read-only. Clients may not make changes to
//     a note's sharing state via this field.
//   </dd>
// 
//   <dt>restrictions</dt>
//   <dd>If this field is set, the user has note-level permissions that may differ from their
//     notebook-level permissions. In this case, the restrictions structure specifies
//     a set of restrictions limiting the actions that a user may take on the note based
//     on their note-level permissions. If this field is unset, then there are no
//     note-specific restrictions. However, a client may still be limited based on the user's
//     notebook permissions.</dd>
// </dl>
// 
// Attributes:
//  - GUID
//  - Title
//  - Content
//  - ContentHash
//  - ContentLength
//  - Created
//  - Updated
//  - Deleted
//  - Active
//  - UpdateSequenceNum
//  - NotebookGuid
//  - TagGuids
//  - Resources
//  - Attributes
//  - TagNames
//  - SharedNotes
//  - Restrictions
//  - Limits
type Note struct {
  GUID *GUID `thrift:"guid,1" db:"guid" json:"guid,omitempty"`
  Title *string `thrift:"title,2" db:"title" json:"title,omitempty"`
  Content *string `thrift:"content,3" db:"content" json:"content,omitempty"`
  ContentHash []byte `thrift:"contentHash,4" db:"contentHash" json:"contentHash,omitempty"`
  ContentLength *int32 `thrift:"contentLength,5" db:"contentLength" json:"contentLength,omitempty"`
  Created *Timestamp `thrift:"created,6" db:"created" json:"created,omitempty"`
  Updated *Timestamp `thrift:"updated,7" db:"updated" json:"updated,omitempty"`
  Deleted *Timestamp `thrift:"deleted,8" db:"deleted" json:"deleted,omitempty"`
  Active *bool `thrift:"active,9" db:"active" json:"active,omitempty"`
  UpdateSequenceNum *int32 `thrift:"updateSequenceNum,10" db:"updateSequenceNum" json:"updateSequenceNum,omitempty"`
  NotebookGuid *string `thrift:"notebookGuid,11" db:"notebookGuid" json:"notebookGuid,omitempty"`
  TagGuids []GUID `thrift:"tagGuids,12" db:"tagGuids" json:"tagGuids,omitempty"`
  Resources []*Resource `thrift:"resources,13" db:"resources" json:"resources,omitempty"`
  Attributes *NoteAttributes `thrift:"attributes,14" db:"attributes" json:"attributes,omitempty"`
  TagNames []string `thrift:"tagNames,15" db:"tagNames" json:"tagNames,omitempty"`
  SharedNotes []*SharedNote `thrift:"sharedNotes,16" db:"sharedNotes" json:"sharedNotes,omitempty"`
  Restrictions *NoteRestrictions `thrift:"restrictions,17" db:"restrictions" json:"restrictions,omitempty"`
  Limits *NoteLimits `thrift:"limits,18" db:"limits" json:"limits,omitempty"`
}

func NewNote() *Note {
  return &Note{}
}

var Note_GUID_DEFAULT GUID
func (p *Note) GetGUID() GUID {
  if !p.IsSetGUID() {
    return Note_GUID_DEFAULT
  }
return *p.GUID
}
var Note_Title_DEFAULT string
func (p *Note) GetTitle() string {
  if !p.IsSetTitle() {
    return Note_Title_DEFAULT
  }
return *p.Title
}
var Note_Content_DEFAULT string
func (p *Note) GetContent() string {
  if !p.IsSetContent() {
    return Note_Content_DEFAULT
  }
return *p.Content
}
var Note_ContentHash_DEFAULT []byte

func (p *Note) GetContentHash() []byte {
  return p.ContentHash
}
var Note_ContentLength_DEFAULT int32
func (p *Note) GetContentLength() int32 {
  if !p.IsSetContentLength() {
    return Note_ContentLength_DEFAULT
  }
return *p.ContentLength
}
var Note_Created_DEFAULT Timestamp
func (p *Note) GetCreated() Timestamp {
  if !p.IsSetCreated() {
    return Note_Created_DEFAULT
  }
return *p.Created
}
var Note_Updated_DEFAULT Timestamp
func (p *Note) GetUpdated() Timestamp {
  if !p.IsSetUpdated() {
    return Note_Updated_DEFAULT
  }
return *p.Updated
}
var Note_Deleted_DEFAULT Timestamp
func (p *Note) GetDeleted() Timestamp {
  if !p.IsSetDeleted() {
    return Note_Deleted_DEFAULT
  }
return *p.Deleted
}
var Note_Active_DEFAULT bool
func (p *Note) GetActive() bool {
  if !p.IsSetActive() {
    return Note_Active_DEFAULT
  }
return *p.Active
}
var Note_UpdateSequenceNum_DEFAULT int32
func (p *Note) GetUpdateSequenceNum() int32 {
  if !p.IsSetUpdateSequenceNum() {
    return Note_UpdateSequenceNum_DEFAULT
  }
return *p.UpdateSequenceNum
}
var Note_NotebookGuid_DEFAULT string
func (p *Note) GetNotebookGuid() string {
  if !p.IsSetNotebookGuid() {
    return Note_NotebookGuid_DEFAULT
  }
return *p.NotebookGuid
}
var Note_TagGuids_DEFAULT []GUID

func (p *Note) GetTagGuids() []GUID {
  return p.TagGuids
}
var Note_Resources_DEFAULT []*Resource

func (p *Note) GetResources() []*Resource {
  return p.Resources
}
var Note_Attributes_DEFAULT *NoteAttributes
func (p *Note) GetAttributes() *NoteAttributes {
  if !p.IsSetAttributes() {
    return Note_Attributes_DEFAULT
  }
return p.Attributes
}
var Note_TagNames_DEFAULT []string

func (p *Note) GetTagNames() []string {
  return p.TagNames
}
var Note_SharedNotes_DEFAULT []*SharedNote

func (p *Note) GetSharedNotes() []*SharedNote {
  return p.SharedNotes
}
var Note_Restrictions_DEFAULT *NoteRestrictions
func (p *Note) GetRestrictions() *NoteRestrictions {
  if !p.IsSetRestrictions() {
    return Note_Restrictions_DEFAULT
  }
return p.Restrictions
}
var Note_Limits_DEFAULT *NoteLimits
func (p *Note) GetLimits() *NoteLimits {
  if !p.IsSetLimits() {
    return Note_Limits_DEFAULT
  }
return p.Limits
}
func (p *Note) IsSetGUID() bool {
  return p.GUID != nil
}

func (p *Note) IsSetTitle() bool {
  return p.Title != nil
}

func (p *Note) IsSetContent() bool {
  return p.Content != nil
}

func (p *Note) IsSetContentHash() bool {
  return p.ContentHash != nil
}

func (p *Note) IsSetContentLength() bool {
  return p.ContentLength != nil
}

func (p *Note) IsSetCreated() bool {
  return p.Created != nil
}

func (p *Note) IsSetUpdated() bool {
  return p.Updated != nil
}

func (p *Note) IsSetDeleted() bool {
  return p.Deleted != nil
}

func (p *Note) IsSetActive() bool {
  return p.Active != nil
}

func (p *Note) IsSetUpdateSequenceNum() bool {
  return p.UpdateSequenceNum != nil
}

func (p *Note) IsSetNotebookGuid() bool {
  return p.NotebookGuid != nil
}

func (p *Note) IsSetTagGuids() bool {
  return p.TagGuids != nil
}

func (p *Note) IsSetResources() bool {
  return p.Resources != nil
}

func (p *Note) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *Note) IsSetTagNames() bool {
  return p.TagNames != nil
}

func (p *Note) IsSetSharedNotes() bool {
  return p.SharedNotes != nil
}

func (p *Note) IsSetRestrictions() bool {
  return p.Restrictions != nil
}

func (p *Note) IsSetLimits() bool {
  return p.Limits != nil
}

func (p *Note) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Note)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GUID(v)
  p.GUID = &temp
}
  return nil
}

func (p *Note)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = &v
}
  return nil
}

func (p *Note)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Content = &v
}
  return nil
}

func (p *Note)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ContentHash = v
}
  return nil
}

func (p *Note)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ContentLength = &v
}
  return nil
}

func (p *Note)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Timestamp(v)
  p.Created = &temp
}
  return nil
}

func (p *Note)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Timestamp(v)
  p.Updated = &temp
}
  return nil
}

func (p *Note)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Timestamp(v)
  p.Deleted = &temp
}
  return nil
}

func (p *Note)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Active = &v
}
  return nil
}

func (p *Note)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UpdateSequenceNum = &v
}
  return nil
}

func (p *Note)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.NotebookGuid = &v
}
  return nil
}

func (p *Note)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]GUID, 0, size)
  p.TagGuids =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 GUID
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := GUID(v)
    _elem7 = temp
}
    p.TagGuids = append(p.TagGuids, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Note)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Resource, 0, size)
  p.Resources =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &Resource{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Resources = append(p.Resources, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Note)  ReadField14(iprot thrift.TProtocol) error {
  p.Attributes = &NoteAttributes{}
  if err := p.Attributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attributes), err)
  }
  return nil
}

func (p *Note)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TagNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.TagNames = append(p.TagNames, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Note)  ReadField16(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SharedNote, 0, size)
  p.SharedNotes =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &SharedNote{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.SharedNotes = append(p.SharedNotes, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Note)  ReadField17(iprot thrift.TProtocol) error {
  p.Restrictions = &NoteRestrictions{}
  if err := p.Restrictions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Restrictions), err)
  }
  return nil
}

func (p *Note)  ReadField18(iprot thrift.TProtocol) error {
  p.Limits = &NoteLimits{}
  if err := p.Limits.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Limits), err)
  }
  return nil
}

func (p *Note) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Note"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Note) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetGUID() {
    if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err) }
    if err := oprot.WriteString(string(*p.GUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err) }
  }
  return err
}

func (p *Note) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTitle() {
    if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
    if err := oprot.WriteString(string(*p.Title)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  }
  return err
}

func (p *Note) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetContent() {
    if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:content: ", p), err) }
    if err := oprot.WriteString(string(*p.Content)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.content (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:content: ", p), err) }
  }
  return err
}

func (p *Note) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetContentHash() {
    if err := oprot.WriteFieldBegin("contentHash", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:contentHash: ", p), err) }
    if err := oprot.WriteBinary(p.ContentHash); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contentHash (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:contentHash: ", p), err) }
  }
  return err
}

func (p *Note) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetContentLength() {
    if err := oprot.WriteFieldBegin("contentLength", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contentLength: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ContentLength)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contentLength (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contentLength: ", p), err) }
  }
  return err
}

func (p *Note) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreated() {
    if err := oprot.WriteFieldBegin("created", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:created: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Created)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.created (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:created: ", p), err) }
  }
  return err
}

func (p *Note) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdated() {
    if err := oprot.WriteFieldBegin("updated", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:updated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Updated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updated (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:updated: ", p), err) }
  }
  return err
}

func (p *Note) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeleted() {
    if err := oprot.WriteFieldBegin("deleted", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deleted: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Deleted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deleted (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deleted: ", p), err) }
  }
  return err
}

func (p *Note) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetActive() {
    if err := oprot.WriteFieldBegin("active", thrift.BOOL, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:active: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Active)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.active (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:active: ", p), err) }
  }
  return err
}

func (p *Note) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateSequenceNum() {
    if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updateSequenceNum: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updateSequenceNum: ", p), err) }
  }
  return err
}

func (p *Note) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotebookGuid() {
    if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:notebookGuid: ", p), err) }
    if err := oprot.WriteString(string(*p.NotebookGuid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.notebookGuid (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:notebookGuid: ", p), err) }
  }
  return err
}

func (p *Note) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetTagGuids() {
    if err := oprot.WriteFieldBegin("tagGuids", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tagGuids: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.TagGuids)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TagGuids {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tagGuids: ", p), err) }
  }
  return err
}

func (p *Note) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetResources() {
    if err := oprot.WriteFieldBegin("resources", thrift.LIST, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:resources: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resources)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Resources {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:resources: ", p), err) }
  }
  return err
}

func (p *Note) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:attributes: ", p), err) }
    if err := p.Attributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:attributes: ", p), err) }
  }
  return err
}

func (p *Note) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetTagNames() {
    if err := oprot.WriteFieldBegin("tagNames", thrift.LIST, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:tagNames: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.TagNames)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TagNames {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:tagNames: ", p), err) }
  }
  return err
}

func (p *Note) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetSharedNotes() {
    if err := oprot.WriteFieldBegin("sharedNotes", thrift.LIST, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:sharedNotes: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SharedNotes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SharedNotes {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:sharedNotes: ", p), err) }
  }
  return err
}

func (p *Note) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetRestrictions() {
    if err := oprot.WriteFieldBegin("restrictions", thrift.STRUCT, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:restrictions: ", p), err) }
    if err := p.Restrictions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Restrictions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:restrictions: ", p), err) }
  }
  return err
}

func (p *Note) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimits() {
    if err := oprot.WriteFieldBegin("limits", thrift.STRUCT, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:limits: ", p), err) }
    if err := p.Limits.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Limits), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:limits: ", p), err) }
  }
  return err
}

func (p *Note) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Note(%+v)", *p)
}

// If a Notebook has been opened to the public, the Notebook will have a
// reference to one of these structures, which gives the location and optional
// description of the externally-visible public Notebook.
// <dl>
// <dt>uri</dt>
//   <dd>If this field is present, then the notebook is published for
//   mass consumption on the Internet under the provided URI, which is
//   relative to a defined base publishing URI defined by the service.
//   This field can only be modified via the web service GUI ... publishing
//   cannot be modified via an offline client.
//   <br/>
//   Length:  EDAM_PUBLISHING_URI_LEN_MIN - EDAM_PUBLISHING_URI_LEN_MAX
//   <br/>
//   Regex:  EDAM_PUBLISHING_URI_REGEX
//   </dd>
// 
// <dt>order</dt>
//   <dd>When the notes are publicly displayed, they will be sorted
//   based on the requested criteria.
//   </dd>
// 
// <dt>ascending</dt>
//   <dd>If this is set to true, then the public notes will be
//   displayed in ascending order (e.g. from oldest to newest).  Otherwise,
//   the notes will be displayed in descending order (e.g. newest to oldest).
//   </dd>
// 
// <dt>publicDescription</dt>
//   <dd>This field may be used to provide a short
//   description of the notebook, which may be displayed when (e.g.) the
//   notebook is shown in a public view.  Can't begin or end with a space.
//   <br/>
//   Length:  EDAM_PUBLISHING_DESCRIPTION_LEN_MIN -
//            EDAM_PUBLISHING_DESCRIPTION_LEN_MAX
//   <br/>
//   Regex:  EDAM_PUBLISHING_DESCRIPTION_REGEX
//   </dd>
// 
// </dl>
// 
// Attributes:
//  - URI
//  - Order
//  - Ascending
//  - PublicDescription
type Publishing struct {
  URI *string `thrift:"uri,1" db:"uri" json:"uri,omitempty"`
  Order *NoteSortOrder `thrift:"order,2" db:"order" json:"order,omitempty"`
  Ascending *bool `thrift:"ascending,3" db:"ascending" json:"ascending,omitempty"`
  PublicDescription *string `thrift:"publicDescription,4" db:"publicDescription" json:"publicDescription,omitempty"`
}

func NewPublishing() *Publishing {
  return &Publishing{}
}

var Publishing_URI_DEFAULT string
func (p *Publishing) GetURI() string {
  if !p.IsSetURI() {
    return Publishing_URI_DEFAULT
  }
return *p.URI
}
var Publishing_Order_DEFAULT NoteSortOrder
func (p *Publishing) GetOrder() NoteSortOrder {
  if !p.IsSetOrder() {
    return Publishing_Order_DEFAULT
  }
return *p.Order
}
var Publishing_Ascending_DEFAULT bool
func (p *Publishing) GetAscending() bool {
  if !p.IsSetAscending() {
    return Publishing_Ascending_DEFAULT
  }
return *p.Ascending
}
var Publishing_PublicDescription_DEFAULT string
func (p *Publishing) GetPublicDescription() string {
  if !p.IsSetPublicDescription() {
    return Publishing_PublicDescription_DEFAULT
  }
return *p.PublicDescription
}
func (p *Publishing) IsSetURI() bool {
  return p.URI != nil
}

func (p *Publishing) IsSetOrder() bool {
  return p.Order != nil
}

func (p *Publishing) IsSetAscending() bool {
  return p.Ascending != nil
}

func (p *Publishing) IsSetPublicDescription() bool {
  return p.PublicDescription != nil
}

func (p *Publishing) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Publishing)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URI = &v
}
  return nil
}

func (p *Publishing)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := NoteSortOrder(v)
  p.Order = &temp
}
  return nil
}

func (p *Publishing)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ascending = &v
}
  return nil
}

func (p *Publishing)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PublicDescription = &v
}
  return nil
}

func (p *Publishing) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Publishing"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Publishing) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetURI() {
    if err := oprot.WriteFieldBegin("uri", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uri: ", p), err) }
    if err := oprot.WriteString(string(*p.URI)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uri (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uri: ", p), err) }
  }
  return err
}

func (p *Publishing) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetOrder() {
    if err := oprot.WriteFieldBegin("order", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:order: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Order)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.order (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:order: ", p), err) }
  }
  return err
}

func (p *Publishing) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAscending() {
    if err := oprot.WriteFieldBegin("ascending", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ascending: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Ascending)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ascending (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ascending: ", p), err) }
  }
  return err
}

func (p *Publishing) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublicDescription() {
    if err := oprot.WriteFieldBegin("publicDescription", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:publicDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.PublicDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.publicDescription (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:publicDescription: ", p), err) }
  }
  return err
}

func (p *Publishing) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Publishing(%+v)", *p)
}

// If a Notebook contained in an Evernote Business account has been published
// the to business library, the Notebook will have a reference to one of these
// structures, which specifies how the Notebook will be represented in the
// library.
// 
// <dl>
// <dt>notebookDescription</dt>
//   <dd>A short description of the notebook's content that will be displayed
//       in the business library user interface. The description may not begin
//       or end with whitespace.
//   <br/>
//   Length: EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MIN -
//           EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MAX
//   <br/>
//   Regex:  EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_REGEX
//   </dd>
// 
// <dt>privilege</dt>
//   <dd>The privileges that will be granted to users who join the notebook through
//       the business library.
//   </dd>
// 
// <dt>recommended</dt>
//   <dd>Whether the notebook should be "recommended" when displayed in the business
//       library user interface.
//   </dd>
// </dl>
// 
// Attributes:
//  - NotebookDescription
//  - Privilege
//  - Recommended
type BusinessNotebook struct {
  NotebookDescription *string `thrift:"notebookDescription,1" db:"notebookDescription" json:"notebookDescription,omitempty"`
  Privilege *SharedNotebookPrivilegeLevel `thrift:"privilege,2" db:"privilege" json:"privilege,omitempty"`
  Recommended *bool `thrift:"recommended,3" db:"recommended" json:"recommended,omitempty"`
}

func NewBusinessNotebook() *BusinessNotebook {
  return &BusinessNotebook{}
}

var BusinessNotebook_NotebookDescription_DEFAULT string
func (p *BusinessNotebook) GetNotebookDescription() string {
  if !p.IsSetNotebookDescription() {
    return BusinessNotebook_NotebookDescription_DEFAULT
  }
return *p.NotebookDescription
}
var BusinessNotebook_Privilege_DEFAULT SharedNotebookPrivilegeLevel
func (p *BusinessNotebook) GetPrivilege() SharedNotebookPrivilegeLevel {
  if !p.IsSetPrivilege() {
    return BusinessNotebook_Privilege_DEFAULT
  }
return *p.Privilege
}
var BusinessNotebook_Recommended_DEFAULT bool
func (p *BusinessNotebook) GetRecommended() bool {
  if !p.IsSetRecommended() {
    return BusinessNotebook_Recommended_DEFAULT
  }
return *p.Recommended
}
func (p *BusinessNotebook) IsSetNotebookDescription() bool {
  return p.NotebookDescription != nil
}

func (p *BusinessNotebook) IsSetPrivilege() bool {
  return p.Privilege != nil
}

func (p *BusinessNotebook) IsSetRecommended() bool {
  return p.Recommended != nil
}

func (p *BusinessNotebook) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BusinessNotebook)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NotebookDescription = &v
}
  return nil
}

func (p *BusinessNotebook)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SharedNotebookPrivilegeLevel(v)
  p.Privilege = &temp
}
  return nil
}

func (p *BusinessNotebook)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Recommended = &v
}
  return nil
}

func (p *BusinessNotebook) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BusinessNotebook"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BusinessNotebook) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotebookDescription() {
    if err := oprot.WriteFieldBegin("notebookDescription", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notebookDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.NotebookDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.notebookDescription (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notebookDescription: ", p), err) }
  }
  return err
}

func (p *BusinessNotebook) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivilege() {
    if err := oprot.WriteFieldBegin("privilege", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privilege: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.privilege (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privilege: ", p), err) }
  }
  return err
}

func (p *BusinessNotebook) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecommended() {
    if err := oprot.WriteFieldBegin("recommended", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommended: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Recommended)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recommended (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommended: ", p), err) }
  }
  return err
}

func (p *BusinessNotebook) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BusinessNotebook(%+v)", *p)
}

// A structure defining the scope of a SavedSearch.
// 
// <dl>
//   <dt>includeAccount</dt>
//   <dd>The search should include notes from the account that contains the SavedSearch.</dd>
// 
//   <dt>includePersonalLinkedNotebooks</dt>
//   <dd>The search should include notes within those shared notebooks
//   that the user has joined that are NOT business notebooks.</dd>
// 
//   <dt>includeBusinessLinkedNotebooks</dt>
//   <dd>The search should include notes within those shared notebooks
//   that the user has joined that are business notebooks in the business that
//   the user is currently a member of.</dd>
// </dl>
// 
// Attributes:
//  - IncludeAccount
//  - IncludePersonalLinkedNotebooks
//  - IncludeBusinessLinkedNotebooks
type SavedSearchScope struct {
  IncludeAccount *bool `thrift:"includeAccount,1" db:"includeAccount" json:"includeAccount,omitempty"`
  IncludePersonalLinkedNotebooks *bool `thrift:"includePersonalLinkedNotebooks,2" db:"includePersonalLinkedNotebooks" json:"includePersonalLinkedNotebooks,omitempty"`
  IncludeBusinessLinkedNotebooks *bool `thrift:"includeBusinessLinkedNotebooks,3" db:"includeBusinessLinkedNotebooks" json:"includeBusinessLinkedNotebooks,omitempty"`
}

func NewSavedSearchScope() *SavedSearchScope {
  return &SavedSearchScope{}
}

var SavedSearchScope_IncludeAccount_DEFAULT bool
func (p *SavedSearchScope) GetIncludeAccount() bool {
  if !p.IsSetIncludeAccount() {
    return SavedSearchScope_IncludeAccount_DEFAULT
  }
return *p.IncludeAccount
}
var SavedSearchScope_IncludePersonalLinkedNotebooks_DEFAULT bool
func (p *SavedSearchScope) GetIncludePersonalLinkedNotebooks() bool {
  if !p.IsSetIncludePersonalLinkedNotebooks() {
    return SavedSearchScope_IncludePersonalLinkedNotebooks_DEFAULT
  }
return *p.IncludePersonalLinkedNotebooks
}
var SavedSearchScope_IncludeBusinessLinkedNotebooks_DEFAULT bool
func (p *SavedSearchScope) GetIncludeBusinessLinkedNotebooks() bool {
  if !p.IsSetIncludeBusinessLinkedNotebooks() {
    return SavedSearchScope_IncludeBusinessLinkedNotebooks_DEFAULT
  }
return *p.IncludeBusinessLinkedNotebooks
}
func (p *SavedSearchScope) IsSetIncludeAccount() bool {
  return p.IncludeAccount != nil
}

func (p *SavedSearchScope) IsSetIncludePersonalLinkedNotebooks() bool {
  return p.IncludePersonalLinkedNotebooks != nil
}

func (p *SavedSearchScope) IsSetIncludeBusinessLinkedNotebooks() bool {
  return p.IncludeBusinessLinkedNotebooks != nil
}

func (p *SavedSearchScope) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SavedSearchScope)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IncludeAccount = &v
}
  return nil
}

func (p *SavedSearchScope)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IncludePersonalLinkedNotebooks = &v
}
  return nil
}

func (p *SavedSearchScope)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IncludeBusinessLinkedNotebooks = &v
}
  return nil
}

func (p *SavedSearchScope) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SavedSearchScope"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SavedSearchScope) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncludeAccount() {
    if err := oprot.WriteFieldBegin("includeAccount", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:includeAccount: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IncludeAccount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.includeAccount (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:includeAccount: ", p), err) }
  }
  return err
}

func (p *SavedSearchScope) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncludePersonalLinkedNotebooks() {
    if err := oprot.WriteFieldBegin("includePersonalLinkedNotebooks", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:includePersonalLinkedNotebooks: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IncludePersonalLinkedNotebooks)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.includePersonalLinkedNotebooks (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:includePersonalLinkedNotebooks: ", p), err) }
  }
  return err
}

func (p *SavedSearchScope) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncludeBusinessLinkedNotebooks() {
    if err := oprot.WriteFieldBegin("includeBusinessLinkedNotebooks", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:includeBusinessLinkedNotebooks: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IncludeBusinessLinkedNotebooks)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.includeBusinessLinkedNotebooks (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:includeBusinessLinkedNotebooks: ", p), err) }
  }
  return err
}

func (p *SavedSearchScope) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SavedSearchScope(%+v)", *p)
}

// A named search associated with the account that can be quickly re-used.
// <dl>
// <dt>guid</dt>
//   <dd>The unique identifier of this search.  Will be set by the
//   service, so may be omitted by the client when creating.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
// 
// <dt>name</dt>
//   <dd>The name of the saved search to display in the GUI.  The
//   account may only contain one search with a given name (case-insensitive
//   compare). Can't begin or end with a space.
//   <br/>
//   Length:  EDAM_SAVED_SEARCH_NAME_LEN_MIN - EDAM_SAVED_SEARCH_NAME_LEN_MAX
//   <br/>
//   Regex:  EDAM_SAVED_SEARCH_NAME_REGEX
//   </dd>
// 
// <dt>query</dt>
//   <dd>A string expressing the search to be performed.
//   <br/>
//   Length:  EDAM_SAVED_SEARCH_QUERY_LEN_MIN - EDAM_SAVED_SEARCH_QUERY_LEN_MAX
//   </dd>
// 
// <dt>format</dt>
//   <dd>The format of the query string, to determine how to parse
//   and process it.
//   </dd>
// 
// <dt>updateSequenceNum</dt>
//   <dd>A number identifying the last transaction to
//   modify the state of this object.  The USN values are sequential within an
//   account, and can be used to compare the order of modifications within the
//   service.
//   </dd>
// 
// <dt>scope</dt>
//   <dd><p>Specifies the set of notes that should be included in the search, if
//    possible.</p>
//    <p>Clients are expected to search as much of the desired scope as possible,
//    with the understanding that a given client may not be able to cover the full
//    specified scope. For example, when executing a search that includes notes in both
//    the owner's account and business notebooks, a mobile client may choose to only
//    search within the user's account because it is not capable of searching both
//    scopes simultaneously. When a search across multiple scopes is not possible,
//    a client may choose which scope to search based on the current application
//    context. If a client cannot search any of the desired scopes, it should refuse
//    to execute the search.</p>
//    </dd>
// </dl>
// 
// Attributes:
//  - GUID
//  - Name
//  - Query
//  - Format
//  - UpdateSequenceNum
//  - Scope
type SavedSearch struct {
  GUID *GUID `thrift:"guid,1" db:"guid" json:"guid,omitempty"`
  Name *string `thrift:"name,2" db:"name" json:"name,omitempty"`
  Query *string `thrift:"query,3" db:"query" json:"query,omitempty"`
  Format *QueryFormat `thrift:"format,4" db:"format" json:"format,omitempty"`
  UpdateSequenceNum *int32 `thrift:"updateSequenceNum,5" db:"updateSequenceNum" json:"updateSequenceNum,omitempty"`
  Scope *SavedSearchScope `thrift:"scope,6" db:"scope" json:"scope,omitempty"`
}

func NewSavedSearch() *SavedSearch {
  return &SavedSearch{}
}

var SavedSearch_GUID_DEFAULT GUID
func (p *SavedSearch) GetGUID() GUID {
  if !p.IsSetGUID() {
    return SavedSearch_GUID_DEFAULT
  }
return *p.GUID
}
var SavedSearch_Name_DEFAULT string
func (p *SavedSearch) GetName() string {
  if !p.IsSetName() {
    return SavedSearch_Name_DEFAULT
  }
return *p.Name
}
var SavedSearch_Query_DEFAULT string
func (p *SavedSearch) GetQuery() string {
  if !p.IsSetQuery() {
    return SavedSearch_Query_DEFAULT
  }
return *p.Query
}
var SavedSearch_Format_DEFAULT QueryFormat
func (p *SavedSearch) GetFormat() QueryFormat {
  if !p.IsSetFormat() {
    return SavedSearch_Format_DEFAULT
  }
return *p.Format
}
var SavedSearch_UpdateSequenceNum_DEFAULT int32
func (p *SavedSearch) GetUpdateSequenceNum() int32 {
  if !p.IsSetUpdateSequenceNum() {
    return SavedSearch_UpdateSequenceNum_DEFAULT
  }
return *p.UpdateSequenceNum
}
var SavedSearch_Scope_DEFAULT *SavedSearchScope
func (p *SavedSearch) GetScope() *SavedSearchScope {
  if !p.IsSetScope() {
    return SavedSearch_Scope_DEFAULT
  }
return p.Scope
}
func (p *SavedSearch) IsSetGUID() bool {
  return p.GUID != nil
}

func (p *SavedSearch) IsSetName() bool {
  return p.Name != nil
}

func (p *SavedSearch) IsSetQuery() bool {
  return p.Query != nil
}

func (p *SavedSearch) IsSetFormat() bool {
  return p.Format != nil
}

func (p *SavedSearch) IsSetUpdateSequenceNum() bool {
  return p.UpdateSequenceNum != nil
}

func (p *SavedSearch) IsSetScope() bool {
  return p.Scope != nil
}

func (p *SavedSearch) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SavedSearch)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GUID(v)
  p.GUID = &temp
}
  return nil
}

func (p *SavedSearch)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *SavedSearch)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Query = &v
}
  return nil
}

func (p *SavedSearch)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := QueryFormat(v)
  p.Format = &temp
}
  return nil
}

func (p *SavedSearch)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UpdateSequenceNum = &v
}
  return nil
}

func (p *SavedSearch)  ReadField6(iprot thrift.TProtocol) error {
  p.Scope = &SavedSearchScope{}
  if err := p.Scope.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Scope), err)
  }
  return nil
}

func (p *SavedSearch) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SavedSearch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SavedSearch) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetGUID() {
    if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err) }
    if err := oprot.WriteString(string(*p.GUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err) }
  }
  return err
}

func (p *SavedSearch) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  }
  return err
}

func (p *SavedSearch) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetQuery() {
    if err := oprot.WriteFieldBegin("query", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:query: ", p), err) }
    if err := oprot.WriteString(string(*p.Query)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.query (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:query: ", p), err) }
  }
  return err
}

func (p *SavedSearch) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetFormat() {
    if err := oprot.WriteFieldBegin("format", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:format: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Format)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.format (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:format: ", p), err) }
  }
  return err
}

func (p *SavedSearch) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateSequenceNum() {
    if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:updateSequenceNum: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:updateSequenceNum: ", p), err) }
  }
  return err
}

func (p *SavedSearch) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetScope() {
    if err := oprot.WriteFieldBegin("scope", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:scope: ", p), err) }
    if err := p.Scope.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Scope), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:scope: ", p), err) }
  }
  return err
}

func (p *SavedSearch) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SavedSearch(%+v)", *p)
}

// Settings meant for the recipient of a shared notebook, such as
// for indicating which types of notifications the recipient wishes
// for reminders, etc.
// 
// The reminderNotifyEmail and reminderNotifyInApp fields have a
// 3-state read value but a 2-state write value.  On read, it is
// possible to observe "unset", true, or false.  The initial state is
// "unset".  When you choose to set a value, you may set it to either
// true or false, but you cannot unset the value.  Once one of these
// members has a true/false value, it will always have a true/false
// value.
// 
// <dl>
// <dt>reminderNotifyEmail</dt>
// <dd>Indicates that the user wishes to receive daily e-mail notifications
//     for reminders associated with the notebook. This may be true only for
//     business notebooks that belong to the business of which the user is a
//     member. You may only set this value on a notebook in your business.</dd>
// <dt>reminderNotifyInApp</dt>
// <dd>Indicates that the user wishes to receive notifications for
//     reminders by applications that support providing such
//     notifications.  The exact nature of the notification is defined
//     by the individual applications.</dd>
// </dl>
// 
// 
// Attributes:
//  - ReminderNotifyEmail
//  - ReminderNotifyInApp
type SharedNotebookRecipientSettings struct {
  ReminderNotifyEmail *bool `thrift:"reminderNotifyEmail,1" db:"reminderNotifyEmail" json:"reminderNotifyEmail,omitempty"`
  ReminderNotifyInApp *bool `thrift:"reminderNotifyInApp,2" db:"reminderNotifyInApp" json:"reminderNotifyInApp,omitempty"`
}

func NewSharedNotebookRecipientSettings() *SharedNotebookRecipientSettings {
  return &SharedNotebookRecipientSettings{}
}

var SharedNotebookRecipientSettings_ReminderNotifyEmail_DEFAULT bool
func (p *SharedNotebookRecipientSettings) GetReminderNotifyEmail() bool {
  if !p.IsSetReminderNotifyEmail() {
    return SharedNotebookRecipientSettings_ReminderNotifyEmail_DEFAULT
  }
return *p.ReminderNotifyEmail
}
var SharedNotebookRecipientSettings_ReminderNotifyInApp_DEFAULT bool
func (p *SharedNotebookRecipientSettings) GetReminderNotifyInApp() bool {
  if !p.IsSetReminderNotifyInApp() {
    return SharedNotebookRecipientSettings_ReminderNotifyInApp_DEFAULT
  }
return *p.ReminderNotifyInApp
}
func (p *SharedNotebookRecipientSettings) IsSetReminderNotifyEmail() bool {
  return p.ReminderNotifyEmail != nil
}

func (p *SharedNotebookRecipientSettings) IsSetReminderNotifyInApp() bool {
  return p.ReminderNotifyInApp != nil
}

func (p *SharedNotebookRecipientSettings) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharedNotebookRecipientSettings)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReminderNotifyEmail = &v
}
  return nil
}

func (p *SharedNotebookRecipientSettings)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReminderNotifyInApp = &v
}
  return nil
}

func (p *SharedNotebookRecipientSettings) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SharedNotebookRecipientSettings"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharedNotebookRecipientSettings) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetReminderNotifyEmail() {
    if err := oprot.WriteFieldBegin("reminderNotifyEmail", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reminderNotifyEmail: ", p), err) }
    if err := oprot.WriteBool(bool(*p.ReminderNotifyEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reminderNotifyEmail (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reminderNotifyEmail: ", p), err) }
  }
  return err
}

func (p *SharedNotebookRecipientSettings) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetReminderNotifyInApp() {
    if err := oprot.WriteFieldBegin("reminderNotifyInApp", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reminderNotifyInApp: ", p), err) }
    if err := oprot.WriteBool(bool(*p.ReminderNotifyInApp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reminderNotifyInApp (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reminderNotifyInApp: ", p), err) }
  }
  return err
}

func (p *SharedNotebookRecipientSettings) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharedNotebookRecipientSettings(%+v)", *p)
}

// Settings meant for the recipient of a notebook share.
// 
// Some of these fields have a 3-state read value but a 2-state write value.
// On read, it is possible to observe "unset", true, or false. The initial
// state is "unset". When you choose to set a value, you may set it to either
// true or false, but you cannot unset the value. Once one of these members
// has a true/false value, it will always have a true/false value.
// 
// <dl>
// <dt>reminderNotifyEmail</dt>
// <dd>Indicates that the user wishes to receive daily e-mail notifications
//     for reminders associated with the notebook. This may be
//     true only for business notebooks that belong to the business of
//     which the user is a member. You may only set this value on a
//     notebook in your business. This value will initially be unset.</dd>
// <dt>reminderNotifyInApp</dt>
// <dd>Indicates that the user wishes to receive notifications for
//     reminders by applications that support providing such
//     notifications.  The exact nature of the notification is defined
//     by the individual applications. This value will initially be unset.</dd>
// </dl>
// <dt>inMyList</dt>
// <dd>DEPRECATED: Use recipientStatus instead.
//     The notebook is on the recipient's notebook list (formerly, we would say
//     that the recipient has "joined" the notebook)</dd>
// <dt>recipientStatus</dt>
// <dd>The notebook is on/off the recipient's notebook list (formerly, we would say
//     that the recipient has "joined" the notebook) and perhaps also their
//     default notebook</dd>
// <dt>stack</dt>
// <dd>The stack the recipient has put this notebook into. See Notebook.stack
// for a definition. Every recipient can have their own stack value for the same
// notebook.</dd>
// </dl>
// 
// 
// Attributes:
//  - ReminderNotifyEmail
//  - ReminderNotifyInApp
//  - InMyList
//  - Stack
//  - RecipientStatus
type NotebookRecipientSettings struct {
  ReminderNotifyEmail *bool `thrift:"reminderNotifyEmail,1" db:"reminderNotifyEmail" json:"reminderNotifyEmail,omitempty"`
  ReminderNotifyInApp *bool `thrift:"reminderNotifyInApp,2" db:"reminderNotifyInApp" json:"reminderNotifyInApp,omitempty"`
  InMyList *bool `thrift:"inMyList,3" db:"inMyList" json:"inMyList,omitempty"`
  Stack *string `thrift:"stack,4" db:"stack" json:"stack,omitempty"`
  RecipientStatus *RecipientStatus `thrift:"recipientStatus,5" db:"recipientStatus" json:"recipientStatus,omitempty"`
}

func NewNotebookRecipientSettings() *NotebookRecipientSettings {
  return &NotebookRecipientSettings{}
}

var NotebookRecipientSettings_ReminderNotifyEmail_DEFAULT bool
func (p *NotebookRecipientSettings) GetReminderNotifyEmail() bool {
  if !p.IsSetReminderNotifyEmail() {
    return NotebookRecipientSettings_ReminderNotifyEmail_DEFAULT
  }
return *p.ReminderNotifyEmail
}
var NotebookRecipientSettings_ReminderNotifyInApp_DEFAULT bool
func (p *NotebookRecipientSettings) GetReminderNotifyInApp() bool {
  if !p.IsSetReminderNotifyInApp() {
    return NotebookRecipientSettings_ReminderNotifyInApp_DEFAULT
  }
return *p.ReminderNotifyInApp
}
var NotebookRecipientSettings_InMyList_DEFAULT bool
func (p *NotebookRecipientSettings) GetInMyList() bool {
  if !p.IsSetInMyList() {
    return NotebookRecipientSettings_InMyList_DEFAULT
  }
return *p.InMyList
}
var NotebookRecipientSettings_Stack_DEFAULT string
func (p *NotebookRecipientSettings) GetStack() string {
  if !p.IsSetStack() {
    return NotebookRecipientSettings_Stack_DEFAULT
  }
return *p.Stack
}
var NotebookRecipientSettings_RecipientStatus_DEFAULT RecipientStatus
func (p *NotebookRecipientSettings) GetRecipientStatus() RecipientStatus {
  if !p.IsSetRecipientStatus() {
    return NotebookRecipientSettings_RecipientStatus_DEFAULT
  }
return *p.RecipientStatus
}
func (p *NotebookRecipientSettings) IsSetReminderNotifyEmail() bool {
  return p.ReminderNotifyEmail != nil
}

func (p *NotebookRecipientSettings) IsSetReminderNotifyInApp() bool {
  return p.ReminderNotifyInApp != nil
}

func (p *NotebookRecipientSettings) IsSetInMyList() bool {
  return p.InMyList != nil
}

func (p *NotebookRecipientSettings) IsSetStack() bool {
  return p.Stack != nil
}

func (p *NotebookRecipientSettings) IsSetRecipientStatus() bool {
  return p.RecipientStatus != nil
}

func (p *NotebookRecipientSettings) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotebookRecipientSettings)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReminderNotifyEmail = &v
}
  return nil
}

func (p *NotebookRecipientSettings)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReminderNotifyInApp = &v
}
  return nil
}

func (p *NotebookRecipientSettings)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InMyList = &v
}
  return nil
}

func (p *NotebookRecipientSettings)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Stack = &v
}
  return nil
}

func (p *NotebookRecipientSettings)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := RecipientStatus(v)
  p.RecipientStatus = &temp
}
  return nil
}

func (p *NotebookRecipientSettings) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NotebookRecipientSettings"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotebookRecipientSettings) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetReminderNotifyEmail() {
    if err := oprot.WriteFieldBegin("reminderNotifyEmail", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reminderNotifyEmail: ", p), err) }
    if err := oprot.WriteBool(bool(*p.ReminderNotifyEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reminderNotifyEmail (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reminderNotifyEmail: ", p), err) }
  }
  return err
}

func (p *NotebookRecipientSettings) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetReminderNotifyInApp() {
    if err := oprot.WriteFieldBegin("reminderNotifyInApp", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reminderNotifyInApp: ", p), err) }
    if err := oprot.WriteBool(bool(*p.ReminderNotifyInApp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reminderNotifyInApp (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reminderNotifyInApp: ", p), err) }
  }
  return err
}

func (p *NotebookRecipientSettings) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInMyList() {
    if err := oprot.WriteFieldBegin("inMyList", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inMyList: ", p), err) }
    if err := oprot.WriteBool(bool(*p.InMyList)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.inMyList (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inMyList: ", p), err) }
  }
  return err
}

func (p *NotebookRecipientSettings) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetStack() {
    if err := oprot.WriteFieldBegin("stack", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stack: ", p), err) }
    if err := oprot.WriteString(string(*p.Stack)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stack (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stack: ", p), err) }
  }
  return err
}

func (p *NotebookRecipientSettings) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecipientStatus() {
    if err := oprot.WriteFieldBegin("recipientStatus", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:recipientStatus: ", p), err) }
    if err := oprot.WriteI32(int32(*p.RecipientStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recipientStatus (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:recipientStatus: ", p), err) }
  }
  return err
}

func (p *NotebookRecipientSettings) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotebookRecipientSettings(%+v)", *p)
}

// Shared notebooks represent a relationship between a notebook and a single
// share invitation recipient.
// <dl>
// <dt>id</dt>
// <dd>The primary identifier of the share, which is not globally unique.</dd>
// 
// <dt>userId</dt>
// <dd>The user id of the owner of the notebook.</dd>
// 
// <dt>notebookGuid</dt>
// <dd>The GUID of the notebook that has been shared.</dd>
// 
// <dt>email</dt>
// <dd>A string containing a display name for the recipient of the share. This may
//     be an email address, a phone number, a full name, or some other descriptive
//     string This field is read-only to clients. It will be filled in by the service
//     when returning shared notebooks.
// </dd>
// 
// <dt>recipientIdentityId</dt>
// <dd>The IdentityID of the share recipient. If present, only the user who has
//     claimed that identity may access this share.
// </dd>
// 
// <dt>notebookModifiable</dt>
// <dd>DEPRECATED</dd>
// 
// <dt>serviceCreated</dt>
// <dd>The date that the owner first created the share with the specific email
//   address.</dd>
// 
// <dt>serviceUpdated</dt>
// <dd>The date the shared notebook was last updated on the service.  This
//     will be updated when authenticateToSharedNotebook is called the first
//     time with a shared notebook (i.e. when the username is bound to that
//     shared notebook), and also when the SharedNotebook privilege is updated
//     as part of a shareNotebook(...) call, as well as on any calls to
//     updateSharedNotebook(...).
// </dd>
// 
// <dt>username</dt>
// <dd>DEPRECATED. The username of the user who can access this share. This
//     value is read-only to clients. It will be filled in by the service when
//     returning shared notebooks.
// </dd>
// 
// <dt>privilege</dt>
// <dd>The privilege level granted to the notebook, activity stream, and
//     invitations.  See the corresponding enumeration for details.
// </dd>
// 
// <dt>recipientSettings</dt>
// <dd>Settings intended for use only by the recipient of this shared
//     notebook.  You should skip setting this value unless you want
//     to change the value contained inside the structure, and only if
//     you are the recipient.</dd>
// 
// <dt>globalId</dt>
// <dd>An immutable, opaque string that acts as a globally unique
//     identifier for this shared notebook record.  You can use this field to
//     match linked notebook and shared notebook records as well as to
//     create new LinkedNotebook records.  This field replaces the deprecated
//     shareKey field.
// </dd>
// 
// <dt>sharerUserId</dt>
// <dd>The user id of the user who shared a notebook via this shared notebook
//     instance. This may not be the same as userId, since a user with full
//     access to a notebook may have created a new share for that notebook. For
//     Business, this represents the user who shared the business notebook. This
//     field is currently unset for a SharedNotebook created by joining a
//     notebook that has been published to the business.
// </dd>
// 
// <dt>recipientUsername</dt>
// <dd>The username of the user who can access this share. This is the username
//     for the user with the id in recipientUserId. This value can be set
//     by clients when calling shareNotebook(...), and that will result in the
//     created SharedNotebook being assigned to a user. This value is always set
//     if serviceAssigned is set.
// </dd>
// 
// <dt>recipientUserId</dt>
// <dd>The id of the user who can access this share. This is the id for the user
//     with the username in recipientUsername. This value is read-only and set
//     by the service. Value set by clients will be ignored. This field may be unset
//     for unjoined notebooks and is always set if serviceAssigned is set. Clients should
//     prefer this field over recipientUsername unless they need to use usernames
//     directly.
// </dd>
// 
// <dt>serviceAssigned</dt>
// <dd>The date this SharedNotebook was assigned (i.e. has been associated with an
//     Evernote user whose user ID is set in recipientUserId). Unset if the SharedNotebook
//     is not assigned. This field is a read-only value that is set by the service.
// </dd>
// </dl>
// 
// Attributes:
//  - ID
//  - UserId
//  - NotebookGuid
//  - Email
//  - RecipientIdentityId
//  - NotebookModifiable
//  - ServiceCreated
//  - ServiceUpdated
//  - GlobalId
//  - Username
//  - Privilege
//  - RecipientSettings
//  - SharerUserId
//  - RecipientUsername
//  - RecipientUserId
//  - ServiceAssigned
type SharedNotebook struct {
  ID *int64 `thrift:"id,1" db:"id" json:"id,omitempty"`
  UserId *UserID `thrift:"userId,2" db:"userId" json:"userId,omitempty"`
  NotebookGuid *GUID `thrift:"notebookGuid,3" db:"notebookGuid" json:"notebookGuid,omitempty"`
  Email *string `thrift:"email,4" db:"email" json:"email,omitempty"`
  NotebookModifiable *bool `thrift:"notebookModifiable,5" db:"notebookModifiable" json:"notebookModifiable,omitempty"`
  // unused field # 6
  ServiceCreated *Timestamp `thrift:"serviceCreated,7" db:"serviceCreated" json:"serviceCreated,omitempty"`
  GlobalId *string `thrift:"globalId,8" db:"globalId" json:"globalId,omitempty"`
  Username *string `thrift:"username,9" db:"username" json:"username,omitempty"`
  ServiceUpdated *Timestamp `thrift:"serviceUpdated,10" db:"serviceUpdated" json:"serviceUpdated,omitempty"`
  Privilege *SharedNotebookPrivilegeLevel `thrift:"privilege,11" db:"privilege" json:"privilege,omitempty"`
  // unused field # 12
  RecipientSettings *SharedNotebookRecipientSettings `thrift:"recipientSettings,13" db:"recipientSettings" json:"recipientSettings,omitempty"`
  SharerUserId *UserID `thrift:"sharerUserId,14" db:"sharerUserId" json:"sharerUserId,omitempty"`
  RecipientUsername *string `thrift:"recipientUsername,15" db:"recipientUsername" json:"recipientUsername,omitempty"`
  ServiceAssigned *Timestamp `thrift:"serviceAssigned,16" db:"serviceAssigned" json:"serviceAssigned,omitempty"`
  RecipientUserId *UserID `thrift:"recipientUserId,17" db:"recipientUserId" json:"recipientUserId,omitempty"`
  RecipientIdentityId *IdentityID `thrift:"recipientIdentityId,18" db:"recipientIdentityId" json:"recipientIdentityId,omitempty"`
}

func NewSharedNotebook() *SharedNotebook {
  return &SharedNotebook{}
}

var SharedNotebook_ID_DEFAULT int64
func (p *SharedNotebook) GetID() int64 {
  if !p.IsSetID() {
    return SharedNotebook_ID_DEFAULT
  }
return *p.ID
}
var SharedNotebook_UserId_DEFAULT UserID
func (p *SharedNotebook) GetUserId() UserID {
  if !p.IsSetUserId() {
    return SharedNotebook_UserId_DEFAULT
  }
return *p.UserId
}
var SharedNotebook_NotebookGuid_DEFAULT GUID
func (p *SharedNotebook) GetNotebookGuid() GUID {
  if !p.IsSetNotebookGuid() {
    return SharedNotebook_NotebookGuid_DEFAULT
  }
return *p.NotebookGuid
}
var SharedNotebook_Email_DEFAULT string
func (p *SharedNotebook) GetEmail() string {
  if !p.IsSetEmail() {
    return SharedNotebook_Email_DEFAULT
  }
return *p.Email
}
var SharedNotebook_RecipientIdentityId_DEFAULT IdentityID
func (p *SharedNotebook) GetRecipientIdentityId() IdentityID {
  if !p.IsSetRecipientIdentityId() {
    return SharedNotebook_RecipientIdentityId_DEFAULT
  }
return *p.RecipientIdentityId
}
var SharedNotebook_NotebookModifiable_DEFAULT bool
func (p *SharedNotebook) GetNotebookModifiable() bool {
  if !p.IsSetNotebookModifiable() {
    return SharedNotebook_NotebookModifiable_DEFAULT
  }
return *p.NotebookModifiable
}
var SharedNotebook_ServiceCreated_DEFAULT Timestamp
func (p *SharedNotebook) GetServiceCreated() Timestamp {
  if !p.IsSetServiceCreated() {
    return SharedNotebook_ServiceCreated_DEFAULT
  }
return *p.ServiceCreated
}
var SharedNotebook_ServiceUpdated_DEFAULT Timestamp
func (p *SharedNotebook) GetServiceUpdated() Timestamp {
  if !p.IsSetServiceUpdated() {
    return SharedNotebook_ServiceUpdated_DEFAULT
  }
return *p.ServiceUpdated
}
var SharedNotebook_GlobalId_DEFAULT string
func (p *SharedNotebook) GetGlobalId() string {
  if !p.IsSetGlobalId() {
    return SharedNotebook_GlobalId_DEFAULT
  }
return *p.GlobalId
}
var SharedNotebook_Username_DEFAULT string
func (p *SharedNotebook) GetUsername() string {
  if !p.IsSetUsername() {
    return SharedNotebook_Username_DEFAULT
  }
return *p.Username
}
var SharedNotebook_Privilege_DEFAULT SharedNotebookPrivilegeLevel
func (p *SharedNotebook) GetPrivilege() SharedNotebookPrivilegeLevel {
  if !p.IsSetPrivilege() {
    return SharedNotebook_Privilege_DEFAULT
  }
return *p.Privilege
}
var SharedNotebook_RecipientSettings_DEFAULT *SharedNotebookRecipientSettings
func (p *SharedNotebook) GetRecipientSettings() *SharedNotebookRecipientSettings {
  if !p.IsSetRecipientSettings() {
    return SharedNotebook_RecipientSettings_DEFAULT
  }
return p.RecipientSettings
}
var SharedNotebook_SharerUserId_DEFAULT UserID
func (p *SharedNotebook) GetSharerUserId() UserID {
  if !p.IsSetSharerUserId() {
    return SharedNotebook_SharerUserId_DEFAULT
  }
return *p.SharerUserId
}
var SharedNotebook_RecipientUsername_DEFAULT string
func (p *SharedNotebook) GetRecipientUsername() string {
  if !p.IsSetRecipientUsername() {
    return SharedNotebook_RecipientUsername_DEFAULT
  }
return *p.RecipientUsername
}
var SharedNotebook_RecipientUserId_DEFAULT UserID
func (p *SharedNotebook) GetRecipientUserId() UserID {
  if !p.IsSetRecipientUserId() {
    return SharedNotebook_RecipientUserId_DEFAULT
  }
return *p.RecipientUserId
}
var SharedNotebook_ServiceAssigned_DEFAULT Timestamp
func (p *SharedNotebook) GetServiceAssigned() Timestamp {
  if !p.IsSetServiceAssigned() {
    return SharedNotebook_ServiceAssigned_DEFAULT
  }
return *p.ServiceAssigned
}
func (p *SharedNotebook) IsSetID() bool {
  return p.ID != nil
}

func (p *SharedNotebook) IsSetUserId() bool {
  return p.UserId != nil
}

func (p *SharedNotebook) IsSetNotebookGuid() bool {
  return p.NotebookGuid != nil
}

func (p *SharedNotebook) IsSetEmail() bool {
  return p.Email != nil
}

func (p *SharedNotebook) IsSetRecipientIdentityId() bool {
  return p.RecipientIdentityId != nil
}

func (p *SharedNotebook) IsSetNotebookModifiable() bool {
  return p.NotebookModifiable != nil
}

func (p *SharedNotebook) IsSetServiceCreated() bool {
  return p.ServiceCreated != nil
}

func (p *SharedNotebook) IsSetServiceUpdated() bool {
  return p.ServiceUpdated != nil
}

func (p *SharedNotebook) IsSetGlobalId() bool {
  return p.GlobalId != nil
}

func (p *SharedNotebook) IsSetUsername() bool {
  return p.Username != nil
}

func (p *SharedNotebook) IsSetPrivilege() bool {
  return p.Privilege != nil
}

func (p *SharedNotebook) IsSetRecipientSettings() bool {
  return p.RecipientSettings != nil
}

func (p *SharedNotebook) IsSetSharerUserId() bool {
  return p.SharerUserId != nil
}

func (p *SharedNotebook) IsSetRecipientUsername() bool {
  return p.RecipientUsername != nil
}

func (p *SharedNotebook) IsSetRecipientUserId() bool {
  return p.RecipientUserId != nil
}

func (p *SharedNotebook) IsSetServiceAssigned() bool {
  return p.ServiceAssigned != nil
}

func (p *SharedNotebook) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SharedNotebook)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *SharedNotebook)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UserID(v)
  p.UserId = &temp
}
  return nil
}

func (p *SharedNotebook)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := GUID(v)
  p.NotebookGuid = &temp
}
  return nil
}

func (p *SharedNotebook)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Email = &v
}
  return nil
}

func (p *SharedNotebook)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  temp := IdentityID(v)
  p.RecipientIdentityId = &temp
}
  return nil
}

func (p *SharedNotebook)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NotebookModifiable = &v
}
  return nil
}

func (p *SharedNotebook)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Timestamp(v)
  p.ServiceCreated = &temp
}
  return nil
}

func (p *SharedNotebook)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := Timestamp(v)
  p.ServiceUpdated = &temp
}
  return nil
}

func (p *SharedNotebook)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.GlobalId = &v
}
  return nil
}

func (p *SharedNotebook)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Username = &v
}
  return nil
}

func (p *SharedNotebook)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := SharedNotebookPrivilegeLevel(v)
  p.Privilege = &temp
}
  return nil
}

func (p *SharedNotebook)  ReadField13(iprot thrift.TProtocol) error {
  p.RecipientSettings = &SharedNotebookRecipientSettings{}
  if err := p.RecipientSettings.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RecipientSettings), err)
  }
  return nil
}

func (p *SharedNotebook)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  temp := UserID(v)
  p.SharerUserId = &temp
}
  return nil
}

func (p *SharedNotebook)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.RecipientUsername = &v
}
  return nil
}

func (p *SharedNotebook)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  temp := UserID(v)
  p.RecipientUserId = &temp
}
  return nil
}

func (p *SharedNotebook)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  temp := Timestamp(v)
  p.ServiceAssigned = &temp
}
  return nil
}

func (p *SharedNotebook) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SharedNotebook"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SharedNotebook) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserId() {
    if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotebookGuid() {
    if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notebookGuid: ", p), err) }
    if err := oprot.WriteString(string(*p.NotebookGuid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.notebookGuid (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notebookGuid: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmail() {
    if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:email: ", p), err) }
    if err := oprot.WriteString(string(*p.Email)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.email (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:email: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotebookModifiable() {
    if err := oprot.WriteFieldBegin("notebookModifiable", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:notebookModifiable: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NotebookModifiable)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.notebookModifiable (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:notebookModifiable: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceCreated() {
    if err := oprot.WriteFieldBegin("serviceCreated", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:serviceCreated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ServiceCreated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceCreated (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:serviceCreated: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetGlobalId() {
    if err := oprot.WriteFieldBegin("globalId", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:globalId: ", p), err) }
    if err := oprot.WriteString(string(*p.GlobalId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.globalId (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:globalId: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetUsername() {
    if err := oprot.WriteFieldBegin("username", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:username: ", p), err) }
    if err := oprot.WriteString(string(*p.Username)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.username (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:username: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceUpdated() {
    if err := oprot.WriteFieldBegin("serviceUpdated", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:serviceUpdated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ServiceUpdated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceUpdated (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:serviceUpdated: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivilege() {
    if err := oprot.WriteFieldBegin("privilege", thrift.I32, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:privilege: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.privilege (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:privilege: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecipientSettings() {
    if err := oprot.WriteFieldBegin("recipientSettings", thrift.STRUCT, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:recipientSettings: ", p), err) }
    if err := p.RecipientSettings.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RecipientSettings), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:recipientSettings: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetSharerUserId() {
    if err := oprot.WriteFieldBegin("sharerUserId", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:sharerUserId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SharerUserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sharerUserId (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:sharerUserId: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecipientUsername() {
    if err := oprot.WriteFieldBegin("recipientUsername", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:recipientUsername: ", p), err) }
    if err := oprot.WriteString(string(*p.RecipientUsername)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recipientUsername (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:recipientUsername: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceAssigned() {
    if err := oprot.WriteFieldBegin("serviceAssigned", thrift.I64, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:serviceAssigned: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ServiceAssigned)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceAssigned (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:serviceAssigned: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecipientUserId() {
    if err := oprot.WriteFieldBegin("recipientUserId", thrift.I32, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:recipientUserId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.RecipientUserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recipientUserId (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:recipientUserId: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecipientIdentityId() {
    if err := oprot.WriteFieldBegin("recipientIdentityId", thrift.I64, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:recipientIdentityId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.RecipientIdentityId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recipientIdentityId (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:recipientIdentityId: ", p), err) }
  }
  return err
}

func (p *SharedNotebook) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SharedNotebook(%+v)", *p)
}

// Specifies if the client can move a Notebook to a Workspace.
// 
// Attributes:
//  - CanMoveToContainer
type CanMoveToContainerRestrictions struct {
  CanMoveToContainer *CanMoveToContainerStatus `thrift:"canMoveToContainer,1" db:"canMoveToContainer" json:"canMoveToContainer,omitempty"`
}

func NewCanMoveToContainerRestrictions() *CanMoveToContainerRestrictions {
  return &CanMoveToContainerRestrictions{}
}

var CanMoveToContainerRestrictions_CanMoveToContainer_DEFAULT CanMoveToContainerStatus
func (p *CanMoveToContainerRestrictions) GetCanMoveToContainer() CanMoveToContainerStatus {
  if !p.IsSetCanMoveToContainer() {
    return CanMoveToContainerRestrictions_CanMoveToContainer_DEFAULT
  }
return *p.CanMoveToContainer
}
func (p *CanMoveToContainerRestrictions) IsSetCanMoveToContainer() bool {
  return p.CanMoveToContainer != nil
}

func (p *CanMoveToContainerRestrictions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CanMoveToContainerRestrictions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := CanMoveToContainerStatus(v)
  p.CanMoveToContainer = &temp
}
  return nil
}

func (p *CanMoveToContainerRestrictions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CanMoveToContainerRestrictions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CanMoveToContainerRestrictions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCanMoveToContainer() {
    if err := oprot.WriteFieldBegin("canMoveToContainer", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:canMoveToContainer: ", p), err) }
    if err := oprot.WriteI32(int32(*p.CanMoveToContainer)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.canMoveToContainer (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:canMoveToContainer: ", p), err) }
  }
  return err
}

func (p *CanMoveToContainerRestrictions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CanMoveToContainerRestrictions(%+v)", *p)
}

// This structure captures information about the types of operations
// that cannot be performed on a given notebook with a type of
// authenticated access and credentials.  The values filled into this
// structure are based on then-current values in the server database
// for shared notebooks and notebook publishing records, as well as
// information related to the authentication token.  Information from
// the authentication token includes the application that is accessing
// the server, as defined by the permissions granted by consumer (api)
// key, and the method used to obtain the token, for example via
// authenticateToSharedNotebook, authenticateToBusiness, etc.  Note
// that changes to values in this structure that are the result of
// shared notebook or publishing record changes are communicated to
// the client via a change in the notebook USN during sync.  It is
// important to use the same access method, parameters, and consumer
// key in order obtain correct results from the sync engine.
// 
// The server has the final say on what is allowed as values may
// change between calls to obtain NotebookRestrictions instances
// and to operate on data on the service.
// 
// If the following are set and true, then the given restriction is
// in effect, as accessed by the same authentication token from which
// the values were obtained.
// 
// <dl>
// <dt>noReadNotes</dt>
//   <dd>The client is not able to read notes from the service and
//   the notebook is write-only.
//   </dd>
// <dt>noCreateNotes</dt>
//   <dd>The client may not create new notes in the notebook.
//   </dd>
// <dt>noUpdateNotes</dt>
//   <dd>The client may not update notes currently in the notebook.
//   </dd>
// <dt>noExpungeNotes</dt>
//   <dd>The client may not expunge notes currently in the notebook.
//   </dd>
// <dt>noShareNotes</dt>
//   <dd>The client may not share notes in the notebook via the
//   shareNote or createOrUpdateSharedNotes methods.
//   </dd>
// <dt>noEmailNotes</dt>
//   <dd>The client may not e-mail notes by guid via the Evernote
//   service by using the emailNote method.  Email notes by value
//   by populating the note parameter instead.
//   </dd>
// <dt>noSendMessageToRecipients</dt>
//   <dd>The client may not send messages to the share recipients of
//   the notebook.
//   </dd>
// <dt>noUpdateNotebook</dt>
//   <dd>The client may not update the Notebook object itself, for
//   example, via the updateNotebook method.
//   </dd>
// <dt>noExpungeNotebook</dt>
//   <dd>The client may not expunge the Notebook object itself, for
//   example, via the expungeNotebook method.
//   </dd>
// <dt>noSetDefaultNotebook</dt>
//   <dd>The client may not set this notebook to be the default notebook.
//   The caller should leave Notebook.defaultNotebook unset.
//   </dd>
// <dt>noSetNotebookStack</dt>
//   <dd>If the client is able to update the Notebook, the Notebook.stack
//   value may not be set.
//   </dd>
// <dt>noPublishToPublic</dt>
//   <dd>The client may not publish the notebook to the public.
//   For example, business notebooks may not be shared publicly.
//   </dd>
// <dt>noPublishToBusinessLibrary</dt>
//   <dd>The client may not publish the notebook to the business library.
//   </dd>
// <dt>noCreateTags</dt>
//   <dd>The client may not complete an operation that results in a new tag
//   being created in the owner's account.
//   </dd>
// <dt>noUpdateTags</dt>
//   <dd>The client may not update tags in the owner's account.
//   </dd>
// <dt>noExpungeTags</dt>
//   <dd>The client may not expunge tags in the owner's account.
//   </dd>
// <dt>noSetParentTag</dt>
//   <dd>If the client is able to create or update tags in the owner's account,
//   then they will not be able to set the parent tag.  Leave the value unset.
//   </dd>
// <dt>noCreateSharedNotebooks</dt>
//   <dd>The client is unable to create shared notebooks for the notebook.
//   </dd>
// <dt>updateWhichSharedNotebookRestrictions</dt>
//   <dd>Restrictions on which shared notebook instances can be updated.  If the
//   value is not set or null, then the client can update any of the shared notebooks
//   associated with the notebook on which the NotebookRestrictions are defined.
//   See the enumeration for further details.
//   </dd>
// <dt>expungeWhichSharedNotebookRestrictions</dt>
//   <dd>Restrictions on which shared notebook instances can be expunged.  If the
//   value is not set or null, then the client can expunge any of the shared notebooks
//   associated with the notebook on which the NotebookRestrictions are defined.
//   See the enumeration for further details.
//   </dd>
// <dt>noShareNotesWithBusiness</dt>
//   <dd>The client may not share notes in the notebook via the shareNoteWithBusiness
//   method.
//   </dd>
// <dt>noRenameNotebook</dt>
//   <dd>The client may not rename this notebook.</dd>
// <dt>noSetInMyList</dt>
//   <dd>clients may not change the NotebookRecipientSettings.inMyList settings for
//   this notebook.</dd>
// <dt>noSetContact</dt>
//   <dd>The contact for this notebook may not be changed.</dd>
// </dl>
// <dt>canMoveToContainerRestrictions</dt>
//   <dd>Specifies if the client can move this notebook to a container and if not,
//   the reason why.</dd>
// <dt>noCanMoveNote</dt>
//   <dd>If set, the client cannot move a Note into or out of the Notebook.</dd>
// </dl>
// 
// Attributes:
//  - NoReadNotes
//  - NoCreateNotes
//  - NoUpdateNotes
//  - NoExpungeNotes
//  - NoShareNotes
//  - NoEmailNotes
//  - NoSendMessageToRecipients
//  - NoUpdateNotebook
//  - NoExpungeNotebook
//  - NoSetDefaultNotebook
//  - NoSetNotebookStack
//  - NoPublishToPublic
//  - NoPublishToBusinessLibrary
//  - NoCreateTags
//  - NoUpdateTags
//  - NoExpungeTags
//  - NoSetParentTag
//  - NoCreateSharedNotebooks
//  - UpdateWhichSharedNotebookRestrictions
//  - ExpungeWhichSharedNotebookRestrictions
//  - NoShareNotesWithBusiness
//  - NoRenameNotebook
//  - NoSetInMyList
//  - NoChangeContact
//  - CanMoveToContainerRestrictions
//  - NoSetReminderNotifyEmail
//  - NoSetReminderNotifyInApp
//  - NoSetRecipientSettingsStack
//  - NoCanMoveNote
type NotebookRestrictions struct {
  NoReadNotes *bool `thrift:"noReadNotes,1" db:"noReadNotes" json:"noReadNotes,omitempty"`
  NoCreateNotes *bool `thrift:"noCreateNotes,2" db:"noCreateNotes" json:"noCreateNotes,omitempty"`
  NoUpdateNotes *bool `thrift:"noUpdateNotes,3" db:"noUpdateNotes" json:"noUpdateNotes,omitempty"`
  NoExpungeNotes *bool `thrift:"noExpungeNotes,4" db:"noExpungeNotes" json:"noExpungeNotes,omitempty"`
  NoShareNotes *bool `thrift:"noShareNotes,5" db:"noShareNotes" json:"noShareNotes,omitempty"`
  NoEmailNotes *bool `thrift:"noEmailNotes,6" db:"noEmailNotes" json:"noEmailNotes,omitempty"`
  NoSendMessageToRecipients *bool `thrift:"noSendMessageToRecipients,7" db:"noSendMessageToRecipients" json:"noSendMessageToRecipients,omitempty"`
  NoUpdateNotebook *bool `thrift:"noUpdateNotebook,8" db:"noUpdateNotebook" json:"noUpdateNotebook,omitempty"`
  NoExpungeNotebook *bool `thrift:"noExpungeNotebook,9" db:"noExpungeNotebook" json:"noExpungeNotebook,omitempty"`
  NoSetDefaultNotebook *bool `thrift:"noSetDefaultNotebook,10" db:"noSetDefaultNotebook" json:"noSetDefaultNotebook,omitempty"`
  NoSetNotebookStack *bool `thrift:"noSetNotebookStack,11" db:"noSetNotebookStack" json:"noSetNotebookStack,omitempty"`
  NoPublishToPublic *bool `thrift:"noPublishToPublic,12" db:"noPublishToPublic" json:"noPublishToPublic,omitempty"`
  NoPublishToBusinessLibrary *bool `thrift:"noPublishToBusinessLibrary,13" db:"noPublishToBusinessLibrary" json:"noPublishToBusinessLibrary,omitempty"`
  NoCreateTags *bool `thrift:"noCreateTags,14" db:"noCreateTags" json:"noCreateTags,omitempty"`
  NoUpdateTags *bool `thrift:"noUpdateTags,15" db:"noUpdateTags" json:"noUpdateTags,omitempty"`
  NoExpungeTags *bool `thrift:"noExpungeTags,16" db:"noExpungeTags" json:"noExpungeTags,omitempty"`
  NoSetParentTag *bool `thrift:"noSetParentTag,17" db:"noSetParentTag" json:"noSetParentTag,omitempty"`
  NoCreateSharedNotebooks *bool `thrift:"noCreateSharedNotebooks,18" db:"noCreateSharedNotebooks" json:"noCreateSharedNotebooks,omitempty"`
  UpdateWhichSharedNotebookRestrictions *SharedNotebookInstanceRestrictions `thrift:"updateWhichSharedNotebookRestrictions,19" db:"updateWhichSharedNotebookRestrictions" json:"updateWhichSharedNotebookRestrictions,omitempty"`
  ExpungeWhichSharedNotebookRestrictions *SharedNotebookInstanceRestrictions `thrift:"expungeWhichSharedNotebookRestrictions,20" db:"expungeWhichSharedNotebookRestrictions" json:"expungeWhichSharedNotebookRestrictions,omitempty"`
  NoShareNotesWithBusiness *bool `thrift:"noShareNotesWithBusiness,21" db:"noShareNotesWithBusiness" json:"noShareNotesWithBusiness,omitempty"`
  NoRenameNotebook *bool `thrift:"noRenameNotebook,22" db:"noRenameNotebook" json:"noRenameNotebook,omitempty"`
  NoSetInMyList *bool `thrift:"noSetInMyList,23" db:"noSetInMyList" json:"noSetInMyList,omitempty"`
  NoChangeContact *bool `thrift:"noChangeContact,24" db:"noChangeContact" json:"noChangeContact,omitempty"`
  // unused field # 25
  CanMoveToContainerRestrictions *CanMoveToContainerRestrictions `thrift:"canMoveToContainerRestrictions,26" db:"canMoveToContainerRestrictions" json:"canMoveToContainerRestrictions,omitempty"`
  NoSetReminderNotifyEmail *bool `thrift:"noSetReminderNotifyEmail,27" db:"noSetReminderNotifyEmail" json:"noSetReminderNotifyEmail,omitempty"`
  NoSetReminderNotifyInApp *bool `thrift:"noSetReminderNotifyInApp,28" db:"noSetReminderNotifyInApp" json:"noSetReminderNotifyInApp,omitempty"`
  NoSetRecipientSettingsStack *bool `thrift:"noSetRecipientSettingsStack,29" db:"noSetRecipientSettingsStack" json:"noSetRecipientSettingsStack,omitempty"`
  NoCanMoveNote *bool `thrift:"noCanMoveNote,30" db:"noCanMoveNote" json:"noCanMoveNote,omitempty"`
}

func NewNotebookRestrictions() *NotebookRestrictions {
  return &NotebookRestrictions{}
}

var NotebookRestrictions_NoReadNotes_DEFAULT bool
func (p *NotebookRestrictions) GetNoReadNotes() bool {
  if !p.IsSetNoReadNotes() {
    return NotebookRestrictions_NoReadNotes_DEFAULT
  }
return *p.NoReadNotes
}
var NotebookRestrictions_NoCreateNotes_DEFAULT bool
func (p *NotebookRestrictions) GetNoCreateNotes() bool {
  if !p.IsSetNoCreateNotes() {
    return NotebookRestrictions_NoCreateNotes_DEFAULT
  }
return *p.NoCreateNotes
}
var NotebookRestrictions_NoUpdateNotes_DEFAULT bool
func (p *NotebookRestrictions) GetNoUpdateNotes() bool {
  if !p.IsSetNoUpdateNotes() {
    return NotebookRestrictions_NoUpdateNotes_DEFAULT
  }
return *p.NoUpdateNotes
}
var NotebookRestrictions_NoExpungeNotes_DEFAULT bool
func (p *NotebookRestrictions) GetNoExpungeNotes() bool {
  if !p.IsSetNoExpungeNotes() {
    return NotebookRestrictions_NoExpungeNotes_DEFAULT
  }
return *p.NoExpungeNotes
}
var NotebookRestrictions_NoShareNotes_DEFAULT bool
func (p *NotebookRestrictions) GetNoShareNotes() bool {
  if !p.IsSetNoShareNotes() {
    return NotebookRestrictions_NoShareNotes_DEFAULT
  }
return *p.NoShareNotes
}
var NotebookRestrictions_NoEmailNotes_DEFAULT bool
func (p *NotebookRestrictions) GetNoEmailNotes() bool {
  if !p.IsSetNoEmailNotes() {
    return NotebookRestrictions_NoEmailNotes_DEFAULT
  }
return *p.NoEmailNotes
}
var NotebookRestrictions_NoSendMessageToRecipients_DEFAULT bool
func (p *NotebookRestrictions) GetNoSendMessageToRecipients() bool {
  if !p.IsSetNoSendMessageToRecipients() {
    return NotebookRestrictions_NoSendMessageToRecipients_DEFAULT
  }
return *p.NoSendMessageToRecipients
}
var NotebookRestrictions_NoUpdateNotebook_DEFAULT bool
func (p *NotebookRestrictions) GetNoUpdateNotebook() bool {
  if !p.IsSetNoUpdateNotebook() {
    return NotebookRestrictions_NoUpdateNotebook_DEFAULT
  }
return *p.NoUpdateNotebook
}
var NotebookRestrictions_NoExpungeNotebook_DEFAULT bool
func (p *NotebookRestrictions) GetNoExpungeNotebook() bool {
  if !p.IsSetNoExpungeNotebook() {
    return NotebookRestrictions_NoExpungeNotebook_DEFAULT
  }
return *p.NoExpungeNotebook
}
var NotebookRestrictions_NoSetDefaultNotebook_DEFAULT bool
func (p *NotebookRestrictions) GetNoSetDefaultNotebook() bool {
  if !p.IsSetNoSetDefaultNotebook() {
    return NotebookRestrictions_NoSetDefaultNotebook_DEFAULT
  }
return *p.NoSetDefaultNotebook
}
var NotebookRestrictions_NoSetNotebookStack_DEFAULT bool
func (p *NotebookRestrictions) GetNoSetNotebookStack() bool {
  if !p.IsSetNoSetNotebookStack() {
    return NotebookRestrictions_NoSetNotebookStack_DEFAULT
  }
return *p.NoSetNotebookStack
}
var NotebookRestrictions_NoPublishToPublic_DEFAULT bool
func (p *NotebookRestrictions) GetNoPublishToPublic() bool {
  if !p.IsSetNoPublishToPublic() {
    return NotebookRestrictions_NoPublishToPublic_DEFAULT
  }
return *p.NoPublishToPublic
}
var NotebookRestrictions_NoPublishToBusinessLibrary_DEFAULT bool
func (p *NotebookRestrictions) GetNoPublishToBusinessLibrary() bool {
  if !p.IsSetNoPublishToBusinessLibrary() {
    return NotebookRestrictions_NoPublishToBusinessLibrary_DEFAULT
  }
return *p.NoPublishToBusinessLibrary
}
var NotebookRestrictions_NoCreateTags_DEFAULT bool
func (p *NotebookRestrictions) GetNoCreateTags() bool {
  if !p.IsSetNoCreateTags() {
    return NotebookRestrictions_NoCreateTags_DEFAULT
  }
return *p.NoCreateTags
}
var NotebookRestrictions_NoUpdateTags_DEFAULT bool
func (p *NotebookRestrictions) GetNoUpdateTags() bool {
  if !p.IsSetNoUpdateTags() {
    return NotebookRestrictions_NoUpdateTags_DEFAULT
  }
return *p.NoUpdateTags
}
var NotebookRestrictions_NoExpungeTags_DEFAULT bool
func (p *NotebookRestrictions) GetNoExpungeTags() bool {
  if !p.IsSetNoExpungeTags() {
    return NotebookRestrictions_NoExpungeTags_DEFAULT
  }
return *p.NoExpungeTags
}
var NotebookRestrictions_NoSetParentTag_DEFAULT bool
func (p *NotebookRestrictions) GetNoSetParentTag() bool {
  if !p.IsSetNoSetParentTag() {
    return NotebookRestrictions_NoSetParentTag_DEFAULT
  }
return *p.NoSetParentTag
}
var NotebookRestrictions_NoCreateSharedNotebooks_DEFAULT bool
func (p *NotebookRestrictions) GetNoCreateSharedNotebooks() bool {
  if !p.IsSetNoCreateSharedNotebooks() {
    return NotebookRestrictions_NoCreateSharedNotebooks_DEFAULT
  }
return *p.NoCreateSharedNotebooks
}
var NotebookRestrictions_UpdateWhichSharedNotebookRestrictions_DEFAULT SharedNotebookInstanceRestrictions
func (p *NotebookRestrictions) GetUpdateWhichSharedNotebookRestrictions() SharedNotebookInstanceRestrictions {
  if !p.IsSetUpdateWhichSharedNotebookRestrictions() {
    return NotebookRestrictions_UpdateWhichSharedNotebookRestrictions_DEFAULT
  }
return *p.UpdateWhichSharedNotebookRestrictions
}
var NotebookRestrictions_ExpungeWhichSharedNotebookRestrictions_DEFAULT SharedNotebookInstanceRestrictions
func (p *NotebookRestrictions) GetExpungeWhichSharedNotebookRestrictions() SharedNotebookInstanceRestrictions {
  if !p.IsSetExpungeWhichSharedNotebookRestrictions() {
    return NotebookRestrictions_ExpungeWhichSharedNotebookRestrictions_DEFAULT
  }
return *p.ExpungeWhichSharedNotebookRestrictions
}
var NotebookRestrictions_NoShareNotesWithBusiness_DEFAULT bool
func (p *NotebookRestrictions) GetNoShareNotesWithBusiness() bool {
  if !p.IsSetNoShareNotesWithBusiness() {
    return NotebookRestrictions_NoShareNotesWithBusiness_DEFAULT
  }
return *p.NoShareNotesWithBusiness
}
var NotebookRestrictions_NoRenameNotebook_DEFAULT bool
func (p *NotebookRestrictions) GetNoRenameNotebook() bool {
  if !p.IsSetNoRenameNotebook() {
    return NotebookRestrictions_NoRenameNotebook_DEFAULT
  }
return *p.NoRenameNotebook
}
var NotebookRestrictions_NoSetInMyList_DEFAULT bool
func (p *NotebookRestrictions) GetNoSetInMyList() bool {
  if !p.IsSetNoSetInMyList() {
    return NotebookRestrictions_NoSetInMyList_DEFAULT
  }
return *p.NoSetInMyList
}
var NotebookRestrictions_NoChangeContact_DEFAULT bool
func (p *NotebookRestrictions) GetNoChangeContact() bool {
  if !p.IsSetNoChangeContact() {
    return NotebookRestrictions_NoChangeContact_DEFAULT
  }
return *p.NoChangeContact
}
var NotebookRestrictions_CanMoveToContainerRestrictions_DEFAULT *CanMoveToContainerRestrictions
func (p *NotebookRestrictions) GetCanMoveToContainerRestrictions() *CanMoveToContainerRestrictions {
  if !p.IsSetCanMoveToContainerRestrictions() {
    return NotebookRestrictions_CanMoveToContainerRestrictions_DEFAULT
  }
return p.CanMoveToContainerRestrictions
}
var NotebookRestrictions_NoSetReminderNotifyEmail_DEFAULT bool
func (p *NotebookRestrictions) GetNoSetReminderNotifyEmail() bool {
  if !p.IsSetNoSetReminderNotifyEmail() {
    return NotebookRestrictions_NoSetReminderNotifyEmail_DEFAULT
  }
return *p.NoSetReminderNotifyEmail
}
var NotebookRestrictions_NoSetReminderNotifyInApp_DEFAULT bool
func (p *NotebookRestrictions) GetNoSetReminderNotifyInApp() bool {
  if !p.IsSetNoSetReminderNotifyInApp() {
    return NotebookRestrictions_NoSetReminderNotifyInApp_DEFAULT
  }
return *p.NoSetReminderNotifyInApp
}
var NotebookRestrictions_NoSetRecipientSettingsStack_DEFAULT bool
func (p *NotebookRestrictions) GetNoSetRecipientSettingsStack() bool {
  if !p.IsSetNoSetRecipientSettingsStack() {
    return NotebookRestrictions_NoSetRecipientSettingsStack_DEFAULT
  }
return *p.NoSetRecipientSettingsStack
}
var NotebookRestrictions_NoCanMoveNote_DEFAULT bool
func (p *NotebookRestrictions) GetNoCanMoveNote() bool {
  if !p.IsSetNoCanMoveNote() {
    return NotebookRestrictions_NoCanMoveNote_DEFAULT
  }
return *p.NoCanMoveNote
}
func (p *NotebookRestrictions) IsSetNoReadNotes() bool {
  return p.NoReadNotes != nil
}

func (p *NotebookRestrictions) IsSetNoCreateNotes() bool {
  return p.NoCreateNotes != nil
}

func (p *NotebookRestrictions) IsSetNoUpdateNotes() bool {
  return p.NoUpdateNotes != nil
}

func (p *NotebookRestrictions) IsSetNoExpungeNotes() bool {
  return p.NoExpungeNotes != nil
}

func (p *NotebookRestrictions) IsSetNoShareNotes() bool {
  return p.NoShareNotes != nil
}

func (p *NotebookRestrictions) IsSetNoEmailNotes() bool {
  return p.NoEmailNotes != nil
}

func (p *NotebookRestrictions) IsSetNoSendMessageToRecipients() bool {
  return p.NoSendMessageToRecipients != nil
}

func (p *NotebookRestrictions) IsSetNoUpdateNotebook() bool {
  return p.NoUpdateNotebook != nil
}

func (p *NotebookRestrictions) IsSetNoExpungeNotebook() bool {
  return p.NoExpungeNotebook != nil
}

func (p *NotebookRestrictions) IsSetNoSetDefaultNotebook() bool {
  return p.NoSetDefaultNotebook != nil
}

func (p *NotebookRestrictions) IsSetNoSetNotebookStack() bool {
  return p.NoSetNotebookStack != nil
}

func (p *NotebookRestrictions) IsSetNoPublishToPublic() bool {
  return p.NoPublishToPublic != nil
}

func (p *NotebookRestrictions) IsSetNoPublishToBusinessLibrary() bool {
  return p.NoPublishToBusinessLibrary != nil
}

func (p *NotebookRestrictions) IsSetNoCreateTags() bool {
  return p.NoCreateTags != nil
}

func (p *NotebookRestrictions) IsSetNoUpdateTags() bool {
  return p.NoUpdateTags != nil
}

func (p *NotebookRestrictions) IsSetNoExpungeTags() bool {
  return p.NoExpungeTags != nil
}

func (p *NotebookRestrictions) IsSetNoSetParentTag() bool {
  return p.NoSetParentTag != nil
}

func (p *NotebookRestrictions) IsSetNoCreateSharedNotebooks() bool {
  return p.NoCreateSharedNotebooks != nil
}

func (p *NotebookRestrictions) IsSetUpdateWhichSharedNotebookRestrictions() bool {
  return p.UpdateWhichSharedNotebookRestrictions != nil
}

func (p *NotebookRestrictions) IsSetExpungeWhichSharedNotebookRestrictions() bool {
  return p.ExpungeWhichSharedNotebookRestrictions != nil
}

func (p *NotebookRestrictions) IsSetNoShareNotesWithBusiness() bool {
  return p.NoShareNotesWithBusiness != nil
}

func (p *NotebookRestrictions) IsSetNoRenameNotebook() bool {
  return p.NoRenameNotebook != nil
}

func (p *NotebookRestrictions) IsSetNoSetInMyList() bool {
  return p.NoSetInMyList != nil
}

func (p *NotebookRestrictions) IsSetNoChangeContact() bool {
  return p.NoChangeContact != nil
}

func (p *NotebookRestrictions) IsSetCanMoveToContainerRestrictions() bool {
  return p.CanMoveToContainerRestrictions != nil
}

func (p *NotebookRestrictions) IsSetNoSetReminderNotifyEmail() bool {
  return p.NoSetReminderNotifyEmail != nil
}

func (p *NotebookRestrictions) IsSetNoSetReminderNotifyInApp() bool {
  return p.NoSetReminderNotifyInApp != nil
}

func (p *NotebookRestrictions) IsSetNoSetRecipientSettingsStack() bool {
  return p.NoSetRecipientSettingsStack != nil
}

func (p *NotebookRestrictions) IsSetNoCanMoveNote() bool {
  return p.NoCanMoveNote != nil
}

func (p *NotebookRestrictions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField29(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotebookRestrictions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NoReadNotes = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NoCreateNotes = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NoUpdateNotes = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NoExpungeNotes = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NoShareNotes = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NoEmailNotes = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NoSendMessageToRecipients = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.NoUpdateNotebook = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.NoExpungeNotebook = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NoSetDefaultNotebook = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.NoSetNotebookStack = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.NoPublishToPublic = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NoPublishToBusinessLibrary = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.NoCreateTags = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.NoUpdateTags = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.NoExpungeTags = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.NoSetParentTag = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.NoCreateSharedNotebooks = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  temp := SharedNotebookInstanceRestrictions(v)
  p.UpdateWhichSharedNotebookRestrictions = &temp
}
  return nil
}

func (p *NotebookRestrictions)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := SharedNotebookInstanceRestrictions(v)
  p.ExpungeWhichSharedNotebookRestrictions = &temp
}
  return nil
}

func (p *NotebookRestrictions)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.NoShareNotesWithBusiness = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.NoRenameNotebook = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.NoSetInMyList = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.NoChangeContact = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField26(iprot thrift.TProtocol) error {
  p.CanMoveToContainerRestrictions = &CanMoveToContainerRestrictions{}
  if err := p.CanMoveToContainerRestrictions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CanMoveToContainerRestrictions), err)
  }
  return nil
}

func (p *NotebookRestrictions)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.NoSetReminderNotifyEmail = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.NoSetReminderNotifyInApp = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField29(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.NoSetRecipientSettingsStack = &v
}
  return nil
}

func (p *NotebookRestrictions)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.NoCanMoveNote = &v
}
  return nil
}

func (p *NotebookRestrictions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NotebookRestrictions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotebookRestrictions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoReadNotes() {
    if err := oprot.WriteFieldBegin("noReadNotes", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:noReadNotes: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoReadNotes)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noReadNotes (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:noReadNotes: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoCreateNotes() {
    if err := oprot.WriteFieldBegin("noCreateNotes", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noCreateNotes: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoCreateNotes)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noCreateNotes (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noCreateNotes: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoUpdateNotes() {
    if err := oprot.WriteFieldBegin("noUpdateNotes", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:noUpdateNotes: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoUpdateNotes)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noUpdateNotes (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:noUpdateNotes: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoExpungeNotes() {
    if err := oprot.WriteFieldBegin("noExpungeNotes", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:noExpungeNotes: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoExpungeNotes)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noExpungeNotes (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:noExpungeNotes: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoShareNotes() {
    if err := oprot.WriteFieldBegin("noShareNotes", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:noShareNotes: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoShareNotes)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noShareNotes (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:noShareNotes: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoEmailNotes() {
    if err := oprot.WriteFieldBegin("noEmailNotes", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:noEmailNotes: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoEmailNotes)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noEmailNotes (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:noEmailNotes: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoSendMessageToRecipients() {
    if err := oprot.WriteFieldBegin("noSendMessageToRecipients", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:noSendMessageToRecipients: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoSendMessageToRecipients)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noSendMessageToRecipients (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:noSendMessageToRecipients: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoUpdateNotebook() {
    if err := oprot.WriteFieldBegin("noUpdateNotebook", thrift.BOOL, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:noUpdateNotebook: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoUpdateNotebook)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noUpdateNotebook (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:noUpdateNotebook: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoExpungeNotebook() {
    if err := oprot.WriteFieldBegin("noExpungeNotebook", thrift.BOOL, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:noExpungeNotebook: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoExpungeNotebook)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noExpungeNotebook (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:noExpungeNotebook: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoSetDefaultNotebook() {
    if err := oprot.WriteFieldBegin("noSetDefaultNotebook", thrift.BOOL, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:noSetDefaultNotebook: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoSetDefaultNotebook)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noSetDefaultNotebook (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:noSetDefaultNotebook: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoSetNotebookStack() {
    if err := oprot.WriteFieldBegin("noSetNotebookStack", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:noSetNotebookStack: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoSetNotebookStack)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noSetNotebookStack (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:noSetNotebookStack: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoPublishToPublic() {
    if err := oprot.WriteFieldBegin("noPublishToPublic", thrift.BOOL, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:noPublishToPublic: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoPublishToPublic)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noPublishToPublic (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:noPublishToPublic: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoPublishToBusinessLibrary() {
    if err := oprot.WriteFieldBegin("noPublishToBusinessLibrary", thrift.BOOL, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:noPublishToBusinessLibrary: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoPublishToBusinessLibrary)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noPublishToBusinessLibrary (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:noPublishToBusinessLibrary: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoCreateTags() {
    if err := oprot.WriteFieldBegin("noCreateTags", thrift.BOOL, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:noCreateTags: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoCreateTags)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noCreateTags (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:noCreateTags: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoUpdateTags() {
    if err := oprot.WriteFieldBegin("noUpdateTags", thrift.BOOL, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:noUpdateTags: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoUpdateTags)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noUpdateTags (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:noUpdateTags: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoExpungeTags() {
    if err := oprot.WriteFieldBegin("noExpungeTags", thrift.BOOL, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:noExpungeTags: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoExpungeTags)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noExpungeTags (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:noExpungeTags: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoSetParentTag() {
    if err := oprot.WriteFieldBegin("noSetParentTag", thrift.BOOL, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:noSetParentTag: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoSetParentTag)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noSetParentTag (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:noSetParentTag: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoCreateSharedNotebooks() {
    if err := oprot.WriteFieldBegin("noCreateSharedNotebooks", thrift.BOOL, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:noCreateSharedNotebooks: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoCreateSharedNotebooks)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noCreateSharedNotebooks (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:noCreateSharedNotebooks: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateWhichSharedNotebookRestrictions() {
    if err := oprot.WriteFieldBegin("updateWhichSharedNotebookRestrictions", thrift.I32, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:updateWhichSharedNotebookRestrictions: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UpdateWhichSharedNotebookRestrictions)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateWhichSharedNotebookRestrictions (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:updateWhichSharedNotebookRestrictions: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetExpungeWhichSharedNotebookRestrictions() {
    if err := oprot.WriteFieldBegin("expungeWhichSharedNotebookRestrictions", thrift.I32, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:expungeWhichSharedNotebookRestrictions: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ExpungeWhichSharedNotebookRestrictions)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.expungeWhichSharedNotebookRestrictions (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:expungeWhichSharedNotebookRestrictions: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoShareNotesWithBusiness() {
    if err := oprot.WriteFieldBegin("noShareNotesWithBusiness", thrift.BOOL, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:noShareNotesWithBusiness: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoShareNotesWithBusiness)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noShareNotesWithBusiness (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:noShareNotesWithBusiness: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField22(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoRenameNotebook() {
    if err := oprot.WriteFieldBegin("noRenameNotebook", thrift.BOOL, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:noRenameNotebook: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoRenameNotebook)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noRenameNotebook (22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:noRenameNotebook: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField23(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoSetInMyList() {
    if err := oprot.WriteFieldBegin("noSetInMyList", thrift.BOOL, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:noSetInMyList: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoSetInMyList)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noSetInMyList (23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:noSetInMyList: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField24(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoChangeContact() {
    if err := oprot.WriteFieldBegin("noChangeContact", thrift.BOOL, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:noChangeContact: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoChangeContact)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noChangeContact (24) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:noChangeContact: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField26(oprot thrift.TProtocol) (err error) {
  if p.IsSetCanMoveToContainerRestrictions() {
    if err := oprot.WriteFieldBegin("canMoveToContainerRestrictions", thrift.STRUCT, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:canMoveToContainerRestrictions: ", p), err) }
    if err := p.CanMoveToContainerRestrictions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CanMoveToContainerRestrictions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:canMoveToContainerRestrictions: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField27(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoSetReminderNotifyEmail() {
    if err := oprot.WriteFieldBegin("noSetReminderNotifyEmail", thrift.BOOL, 27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:noSetReminderNotifyEmail: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoSetReminderNotifyEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noSetReminderNotifyEmail (27) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 27:noSetReminderNotifyEmail: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField28(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoSetReminderNotifyInApp() {
    if err := oprot.WriteFieldBegin("noSetReminderNotifyInApp", thrift.BOOL, 28); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:noSetReminderNotifyInApp: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoSetReminderNotifyInApp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noSetReminderNotifyInApp (28) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 28:noSetReminderNotifyInApp: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField29(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoSetRecipientSettingsStack() {
    if err := oprot.WriteFieldBegin("noSetRecipientSettingsStack", thrift.BOOL, 29); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:noSetRecipientSettingsStack: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoSetRecipientSettingsStack)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noSetRecipientSettingsStack (29) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 29:noSetRecipientSettingsStack: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoCanMoveNote() {
    if err := oprot.WriteFieldBegin("noCanMoveNote", thrift.BOOL, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:noCanMoveNote: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoCanMoveNote)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noCanMoveNote (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:noCanMoveNote: ", p), err) }
  }
  return err
}

func (p *NotebookRestrictions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotebookRestrictions(%+v)", *p)
}

// A unique container for a set of notes.
// <dl>
// <dt>guid</dt>
//   <dd>The unique identifier of this notebook.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
// 
// <dt>name</dt>
//   <dd>A sequence of characters representing the name of the
//   notebook.  May be changed by clients, but the account may not contain two
//   notebooks with names that are equal via a case-insensitive comparison.
//   Can't begin or end with a space.
//   <br/>
//   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
//   <br/>
//   Regex:  EDAM_NOTEBOOK_NAME_REGEX
//   </dd>
// 
// <dt>updateSequenceNum</dt>
//   <dd>A number identifying the last transaction to
//   modify the state of this object.  The USN values are sequential within an
//   account, and can be used to compare the order of modifications within the
//   service.
//   </dd>
// 
// <dt>defaultNotebook</dt>
//   <dd>If true, this notebook should be used for new notes
//   whenever the user has not (or cannot) specify a desired target notebook.
//   For example, if a note is submitted via SMTP email.
//   The service will maintain at most one defaultNotebook per account.
//   If a second notebook is created or updated with defaultNotebook set to
//   true, the service will automatically update the prior notebook's
//   defaultNotebook field to false.  If the default notebook is deleted
//   (i.e. "active" set to false), the "defaultNotebook" field will be
//   set to false by the service.  If the account has no default notebook
//   set, the service will use the most recent notebook as the default.
//   </dd>
// 
// <dt>serviceCreated</dt>
//   <dd>The time when this notebook was created on the
//   service. This will be set on the service during creation, and the service
//   will provide this value when it returns a Notebook to a client.
//   The service will ignore this value if it is sent by clients.
//   </dd>
// 
// <dt>serviceUpdated</dt>
//   <dd>The time when this notebook was last modified on the
//   service.  This will be set on the service during creation, and the service
//   will provide this value when it returns a Notebook to a client.
//   The service will ignore this value if it is sent by clients.
//   </dd>
// 
// <dt>publishing</dt>
//   <dd>If the Notebook has been opened for public access, then this will point to the set of
//   publishing information for the Notebook (URI, description, etc.). A Notebook cannot be
//   published without providing this information, but it will persist for later use if publishing
//   is ever disabled on the Notebook. Clients that do not wish to change the publishing behavior
//   of a Notebook should not set this value when calling NoteStore.updateNotebook().
//   Note that this structure is never populated for business notebooks, see the businessNotebook
//   field.
//   </dd>
// 
// <dt>published</dt>
//   <dd>If this is set to true, then the Notebook will be
//   accessible either to the public, or for business users to their business,
//   via the 'publishing' or 'businessNotebook' specifications, which must also be set. If this is
//   set to false, the Notebook will not be available to the public (or business).
//   Clients that do not wish to change the publishing behavior of a Notebook
//   should not set this value when calling NoteStore.updateNotebook().
//   </dd>
// 
// <dt>stack</dt>
//   <dd>If this is set, then the notebook is visually contained within a stack
//   of notebooks with this name.  All notebooks in the same account with the
//   same 'stack' field are considered to be in the same stack.
//   Notebooks with no stack set are "top level" and not contained within a
//   stack.
//   </dd>
// 
// <dt>sharedNotebookIds</dt>
//   <dd><i>DEPRECATED</i> - replaced by sharedNotebooks.</dd>
// 
// <dt>sharedNotebooks</dt>
//   <dd>The list of recipients to whom this notebook has been shared
//   (one SharedNotebook object per recipient email address). This field will
//   be unset if you do not have permission to access this data. If you are
//   accessing the notebook as the owner or via a shared notebook that is
//   modifiable, then you have access to this data and the value will be set.
//   This field is read-only. Clients may not make changes to shared notebooks
//   via this field.
//   </dd>
// 
// <dt>businessNotebook</dt>
//   <dd>If the notebook is part of a business account and has been shared with the entire
//   business, this will contain sharing information. The presence or absence of this field
//   is not a reliable test of whether a given notebook is in fact a business notebook - the
//   field is only used when a notebook is or has been shared with the entire business.
//   </dd>
// 
// <dt>contact</dt>
//   <dd>Intended for use with Business accounts, this field identifies the user who
//   has been designated as the "contact".  For notebooks created in business
//   accounts, the server will automatically set this value to the user who created
//   the notebook unless Notebook.contact.username has been set, in which that value
//   will be used.  When updating a notebook, it is common to leave Notebook.contact
//   field unset, indicating that no change to the value is being requested and that
//   the existing value, if any, should be preserved.
//   </dd>
// 
// <dt>recipientSettings</dt>
//   <dd>This represents the preferences/settings that a recipient has set for this
//   notebook. These are intended to be changed only by the recipient, and each
//   recipient has their own recipient settings.
//   </dd>
// </dl>
// 
// Attributes:
//  - GUID
//  - Name
//  - UpdateSequenceNum
//  - DefaultNotebook
//  - ServiceCreated
//  - ServiceUpdated
//  - Publishing
//  - Published
//  - Stack
//  - SharedNotebookIds
//  - SharedNotebooks
//  - BusinessNotebook
//  - Contact
//  - Restrictions
//  - RecipientSettings
type Notebook struct {
  GUID *GUID `thrift:"guid,1" db:"guid" json:"guid,omitempty"`
  Name *string `thrift:"name,2" db:"name" json:"name,omitempty"`
  // unused fields # 3 to 4
  UpdateSequenceNum *int32 `thrift:"updateSequenceNum,5" db:"updateSequenceNum" json:"updateSequenceNum,omitempty"`
  DefaultNotebook *bool `thrift:"defaultNotebook,6" db:"defaultNotebook" json:"defaultNotebook,omitempty"`
  ServiceCreated *Timestamp `thrift:"serviceCreated,7" db:"serviceCreated" json:"serviceCreated,omitempty"`
  ServiceUpdated *Timestamp `thrift:"serviceUpdated,8" db:"serviceUpdated" json:"serviceUpdated,omitempty"`
  // unused field # 9
  Publishing *Publishing `thrift:"publishing,10" db:"publishing" json:"publishing,omitempty"`
  Published *bool `thrift:"published,11" db:"published" json:"published,omitempty"`
  Stack *string `thrift:"stack,12" db:"stack" json:"stack,omitempty"`
  SharedNotebookIds []int64 `thrift:"sharedNotebookIds,13" db:"sharedNotebookIds" json:"sharedNotebookIds,omitempty"`
  SharedNotebooks []*SharedNotebook `thrift:"sharedNotebooks,14" db:"sharedNotebooks" json:"sharedNotebooks,omitempty"`
  BusinessNotebook *BusinessNotebook `thrift:"businessNotebook,15" db:"businessNotebook" json:"businessNotebook,omitempty"`
  Contact *User `thrift:"contact,16" db:"contact" json:"contact,omitempty"`
  Restrictions *NotebookRestrictions `thrift:"restrictions,17" db:"restrictions" json:"restrictions,omitempty"`
  RecipientSettings *NotebookRecipientSettings `thrift:"recipientSettings,18" db:"recipientSettings" json:"recipientSettings,omitempty"`
}

func NewNotebook() *Notebook {
  return &Notebook{}
}

var Notebook_GUID_DEFAULT GUID
func (p *Notebook) GetGUID() GUID {
  if !p.IsSetGUID() {
    return Notebook_GUID_DEFAULT
  }
return *p.GUID
}
var Notebook_Name_DEFAULT string
func (p *Notebook) GetName() string {
  if !p.IsSetName() {
    return Notebook_Name_DEFAULT
  }
return *p.Name
}
var Notebook_UpdateSequenceNum_DEFAULT int32
func (p *Notebook) GetUpdateSequenceNum() int32 {
  if !p.IsSetUpdateSequenceNum() {
    return Notebook_UpdateSequenceNum_DEFAULT
  }
return *p.UpdateSequenceNum
}
var Notebook_DefaultNotebook_DEFAULT bool
func (p *Notebook) GetDefaultNotebook() bool {
  if !p.IsSetDefaultNotebook() {
    return Notebook_DefaultNotebook_DEFAULT
  }
return *p.DefaultNotebook
}
var Notebook_ServiceCreated_DEFAULT Timestamp
func (p *Notebook) GetServiceCreated() Timestamp {
  if !p.IsSetServiceCreated() {
    return Notebook_ServiceCreated_DEFAULT
  }
return *p.ServiceCreated
}
var Notebook_ServiceUpdated_DEFAULT Timestamp
func (p *Notebook) GetServiceUpdated() Timestamp {
  if !p.IsSetServiceUpdated() {
    return Notebook_ServiceUpdated_DEFAULT
  }
return *p.ServiceUpdated
}
var Notebook_Publishing_DEFAULT *Publishing
func (p *Notebook) GetPublishing() *Publishing {
  if !p.IsSetPublishing() {
    return Notebook_Publishing_DEFAULT
  }
return p.Publishing
}
var Notebook_Published_DEFAULT bool
func (p *Notebook) GetPublished() bool {
  if !p.IsSetPublished() {
    return Notebook_Published_DEFAULT
  }
return *p.Published
}
var Notebook_Stack_DEFAULT string
func (p *Notebook) GetStack() string {
  if !p.IsSetStack() {
    return Notebook_Stack_DEFAULT
  }
return *p.Stack
}
var Notebook_SharedNotebookIds_DEFAULT []int64

func (p *Notebook) GetSharedNotebookIds() []int64 {
  return p.SharedNotebookIds
}
var Notebook_SharedNotebooks_DEFAULT []*SharedNotebook

func (p *Notebook) GetSharedNotebooks() []*SharedNotebook {
  return p.SharedNotebooks
}
var Notebook_BusinessNotebook_DEFAULT *BusinessNotebook
func (p *Notebook) GetBusinessNotebook() *BusinessNotebook {
  if !p.IsSetBusinessNotebook() {
    return Notebook_BusinessNotebook_DEFAULT
  }
return p.BusinessNotebook
}
var Notebook_Contact_DEFAULT *User
func (p *Notebook) GetContact() *User {
  if !p.IsSetContact() {
    return Notebook_Contact_DEFAULT
  }
return p.Contact
}
var Notebook_Restrictions_DEFAULT *NotebookRestrictions
func (p *Notebook) GetRestrictions() *NotebookRestrictions {
  if !p.IsSetRestrictions() {
    return Notebook_Restrictions_DEFAULT
  }
return p.Restrictions
}
var Notebook_RecipientSettings_DEFAULT *NotebookRecipientSettings
func (p *Notebook) GetRecipientSettings() *NotebookRecipientSettings {
  if !p.IsSetRecipientSettings() {
    return Notebook_RecipientSettings_DEFAULT
  }
return p.RecipientSettings
}
func (p *Notebook) IsSetGUID() bool {
  return p.GUID != nil
}

func (p *Notebook) IsSetName() bool {
  return p.Name != nil
}

func (p *Notebook) IsSetUpdateSequenceNum() bool {
  return p.UpdateSequenceNum != nil
}

func (p *Notebook) IsSetDefaultNotebook() bool {
  return p.DefaultNotebook != nil
}

func (p *Notebook) IsSetServiceCreated() bool {
  return p.ServiceCreated != nil
}

func (p *Notebook) IsSetServiceUpdated() bool {
  return p.ServiceUpdated != nil
}

func (p *Notebook) IsSetPublishing() bool {
  return p.Publishing != nil
}

func (p *Notebook) IsSetPublished() bool {
  return p.Published != nil
}

func (p *Notebook) IsSetStack() bool {
  return p.Stack != nil
}

func (p *Notebook) IsSetSharedNotebookIds() bool {
  return p.SharedNotebookIds != nil
}

func (p *Notebook) IsSetSharedNotebooks() bool {
  return p.SharedNotebooks != nil
}

func (p *Notebook) IsSetBusinessNotebook() bool {
  return p.BusinessNotebook != nil
}

func (p *Notebook) IsSetContact() bool {
  return p.Contact != nil
}

func (p *Notebook) IsSetRestrictions() bool {
  return p.Restrictions != nil
}

func (p *Notebook) IsSetRecipientSettings() bool {
  return p.RecipientSettings != nil
}

func (p *Notebook) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Notebook)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GUID(v)
  p.GUID = &temp
}
  return nil
}

func (p *Notebook)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *Notebook)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UpdateSequenceNum = &v
}
  return nil
}

func (p *Notebook)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DefaultNotebook = &v
}
  return nil
}

func (p *Notebook)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Timestamp(v)
  p.ServiceCreated = &temp
}
  return nil
}

func (p *Notebook)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Timestamp(v)
  p.ServiceUpdated = &temp
}
  return nil
}

func (p *Notebook)  ReadField10(iprot thrift.TProtocol) error {
  p.Publishing = &Publishing{}
  if err := p.Publishing.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Publishing), err)
  }
  return nil
}

func (p *Notebook)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Published = &v
}
  return nil
}

func (p *Notebook)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Stack = &v
}
  return nil
}

func (p *Notebook)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.SharedNotebookIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.SharedNotebookIds = append(p.SharedNotebookIds, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Notebook)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SharedNotebook, 0, size)
  p.SharedNotebooks =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &SharedNotebook{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.SharedNotebooks = append(p.SharedNotebooks, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Notebook)  ReadField15(iprot thrift.TProtocol) error {
  p.BusinessNotebook = &BusinessNotebook{}
  if err := p.BusinessNotebook.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BusinessNotebook), err)
  }
  return nil
}

func (p *Notebook)  ReadField16(iprot thrift.TProtocol) error {
  p.Contact = &User{}
  if err := p.Contact.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *Notebook)  ReadField17(iprot thrift.TProtocol) error {
  p.Restrictions = &NotebookRestrictions{}
  if err := p.Restrictions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Restrictions), err)
  }
  return nil
}

func (p *Notebook)  ReadField18(iprot thrift.TProtocol) error {
  p.RecipientSettings = &NotebookRecipientSettings{}
  if err := p.RecipientSettings.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RecipientSettings), err)
  }
  return nil
}

func (p *Notebook) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Notebook"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Notebook) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetGUID() {
    if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err) }
    if err := oprot.WriteString(string(*p.GUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateSequenceNum() {
    if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:updateSequenceNum: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:updateSequenceNum: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultNotebook() {
    if err := oprot.WriteFieldBegin("defaultNotebook", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:defaultNotebook: ", p), err) }
    if err := oprot.WriteBool(bool(*p.DefaultNotebook)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultNotebook (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:defaultNotebook: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceCreated() {
    if err := oprot.WriteFieldBegin("serviceCreated", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:serviceCreated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ServiceCreated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceCreated (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:serviceCreated: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceUpdated() {
    if err := oprot.WriteFieldBegin("serviceUpdated", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:serviceUpdated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ServiceUpdated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceUpdated (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:serviceUpdated: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublishing() {
    if err := oprot.WriteFieldBegin("publishing", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:publishing: ", p), err) }
    if err := p.Publishing.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Publishing), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:publishing: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublished() {
    if err := oprot.WriteFieldBegin("published", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:published: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Published)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.published (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:published: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetStack() {
    if err := oprot.WriteFieldBegin("stack", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:stack: ", p), err) }
    if err := oprot.WriteString(string(*p.Stack)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stack (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:stack: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetSharedNotebookIds() {
    if err := oprot.WriteFieldBegin("sharedNotebookIds", thrift.LIST, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:sharedNotebookIds: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.SharedNotebookIds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SharedNotebookIds {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:sharedNotebookIds: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetSharedNotebooks() {
    if err := oprot.WriteFieldBegin("sharedNotebooks", thrift.LIST, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:sharedNotebooks: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SharedNotebooks)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SharedNotebooks {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:sharedNotebooks: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessNotebook() {
    if err := oprot.WriteFieldBegin("businessNotebook", thrift.STRUCT, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:businessNotebook: ", p), err) }
    if err := p.BusinessNotebook.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BusinessNotebook), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:businessNotebook: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetContact() {
    if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:contact: ", p), err) }
    if err := p.Contact.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:contact: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetRestrictions() {
    if err := oprot.WriteFieldBegin("restrictions", thrift.STRUCT, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:restrictions: ", p), err) }
    if err := p.Restrictions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Restrictions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:restrictions: ", p), err) }
  }
  return err
}

func (p *Notebook) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecipientSettings() {
    if err := oprot.WriteFieldBegin("recipientSettings", thrift.STRUCT, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:recipientSettings: ", p), err) }
    if err := p.RecipientSettings.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RecipientSettings), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:recipientSettings: ", p), err) }
  }
  return err
}

func (p *Notebook) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Notebook(%+v)", *p)
}

// A link in a user's account that refers them to a public or
// individual shared notebook in another user's account.
// 
// <dl>
// <dt>shareName</dt>
// <dd>The display name of the shared notebook. The link owner can change this.</dd>
// 
// <dt>username</dt>
// <dd>The username of the user who owns the shared or public notebook.</dd>
// 
// <dt>shardId</dt>
// <dd>The shard ID of the notebook if the notebook is not public.</dt>
// 
// <dt>uri</dt>
// <dd>The identifier of the public notebook.</dd>
// 
// <dt>guid</dt>
//   <dd>The unique identifier of this linked notebook.  Will be set whenever
//   a linked notebook is retrieved from the service, but may be null when a client
//   is creating a linked notebook.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
// 
// <dt>updateSequenceNum</dt>
//   <dd>A number identifying the last transaction to
//   modify the state of this object.  The USN values are sequential within an
//   account, and can be used to compare the order of modifications within the
//   service.
//   </dd>
// 
// <dt>noteStoreUrl</dt>
//   <dd>
//   This field will contain the full URL that clients should use to make
//   NoteStore requests to the server shard that contains that notebook's data.
//   I.e. this is the URL that should be used to create the Thrift HTTP client
//   transport to send messages to the NoteStore service for the account.
//   </dd>
// 
// <dt>webApiUrlPrefix:</dt>
//   <dd>
//   This field will contain the initial part of the URLs that should be used
//   to make requests to Evernote's thin client "web API", which provide
//   optimized operations for clients that aren't capable of manipulating
//   the full contents of accounts via the full Thrift data model. Clients
//   should concatenate the relative path for the various servlets onto the
//   end of this string to construct the full URL, as documented on our
//   developer web site.
//   </dd>
// 
// <dt>stack</dt>
//   <dd>If this is set, then the notebook is visually contained within a stack
//   of notebooks with this name.  All notebooks in the same account with the
//   same 'stack' field are considered to be in the same stack.
//   Notebooks with no stack set are "top level" and not contained within a
//   stack.  The link owner can change this and this field is for the benefit
//   of the link owner.
//   </dd>
// 
// <dt>businessId</dt>
//   <dd>If set, this will be the unique identifier for the business that owns
//   the notebook to which the linked notebook refers.</dd>
// 
// <dt>sharedNotebookGlobalId</dt>
//   <dd>The globally unique identifier (globalId) of the shared notebook that
//   corresponds to the share key, or the GUID of the Notebook that the linked notebook
//   refers to. This field must be filled in with the SharedNotebook.globalId or
//   Notebook.GUID value when creating new LinkedNotebooks. This field replaces the
//   deprecated "shareKey" field.
//   </dd>
// </dl>
// 
// Attributes:
//  - ShareName
//  - Username
//  - ShardId
//  - SharedNotebookGlobalId
//  - URI
//  - GUID
//  - UpdateSequenceNum
//  - NoteStoreUrl
//  - WebApiUrlPrefix
//  - Stack
//  - BusinessId
type LinkedNotebook struct {
  // unused field # 1
  ShareName *string `thrift:"shareName,2" db:"shareName" json:"shareName,omitempty"`
  Username *string `thrift:"username,3" db:"username" json:"username,omitempty"`
  ShardId *string `thrift:"shardId,4" db:"shardId" json:"shardId,omitempty"`
  SharedNotebookGlobalId *string `thrift:"sharedNotebookGlobalId,5" db:"sharedNotebookGlobalId" json:"sharedNotebookGlobalId,omitempty"`
  URI *string `thrift:"uri,6" db:"uri" json:"uri,omitempty"`
  GUID *GUID `thrift:"guid,7" db:"guid" json:"guid,omitempty"`
  UpdateSequenceNum *int32 `thrift:"updateSequenceNum,8" db:"updateSequenceNum" json:"updateSequenceNum,omitempty"`
  NoteStoreUrl *string `thrift:"noteStoreUrl,9" db:"noteStoreUrl" json:"noteStoreUrl,omitempty"`
  WebApiUrlPrefix *string `thrift:"webApiUrlPrefix,10" db:"webApiUrlPrefix" json:"webApiUrlPrefix,omitempty"`
  Stack *string `thrift:"stack,11" db:"stack" json:"stack,omitempty"`
  BusinessId *int32 `thrift:"businessId,12" db:"businessId" json:"businessId,omitempty"`
}

func NewLinkedNotebook() *LinkedNotebook {
  return &LinkedNotebook{}
}

var LinkedNotebook_ShareName_DEFAULT string
func (p *LinkedNotebook) GetShareName() string {
  if !p.IsSetShareName() {
    return LinkedNotebook_ShareName_DEFAULT
  }
return *p.ShareName
}
var LinkedNotebook_Username_DEFAULT string
func (p *LinkedNotebook) GetUsername() string {
  if !p.IsSetUsername() {
    return LinkedNotebook_Username_DEFAULT
  }
return *p.Username
}
var LinkedNotebook_ShardId_DEFAULT string
func (p *LinkedNotebook) GetShardId() string {
  if !p.IsSetShardId() {
    return LinkedNotebook_ShardId_DEFAULT
  }
return *p.ShardId
}
var LinkedNotebook_SharedNotebookGlobalId_DEFAULT string
func (p *LinkedNotebook) GetSharedNotebookGlobalId() string {
  if !p.IsSetSharedNotebookGlobalId() {
    return LinkedNotebook_SharedNotebookGlobalId_DEFAULT
  }
return *p.SharedNotebookGlobalId
}
var LinkedNotebook_URI_DEFAULT string
func (p *LinkedNotebook) GetURI() string {
  if !p.IsSetURI() {
    return LinkedNotebook_URI_DEFAULT
  }
return *p.URI
}
var LinkedNotebook_GUID_DEFAULT GUID
func (p *LinkedNotebook) GetGUID() GUID {
  if !p.IsSetGUID() {
    return LinkedNotebook_GUID_DEFAULT
  }
return *p.GUID
}
var LinkedNotebook_UpdateSequenceNum_DEFAULT int32
func (p *LinkedNotebook) GetUpdateSequenceNum() int32 {
  if !p.IsSetUpdateSequenceNum() {
    return LinkedNotebook_UpdateSequenceNum_DEFAULT
  }
return *p.UpdateSequenceNum
}
var LinkedNotebook_NoteStoreUrl_DEFAULT string
func (p *LinkedNotebook) GetNoteStoreUrl() string {
  if !p.IsSetNoteStoreUrl() {
    return LinkedNotebook_NoteStoreUrl_DEFAULT
  }
return *p.NoteStoreUrl
}
var LinkedNotebook_WebApiUrlPrefix_DEFAULT string
func (p *LinkedNotebook) GetWebApiUrlPrefix() string {
  if !p.IsSetWebApiUrlPrefix() {
    return LinkedNotebook_WebApiUrlPrefix_DEFAULT
  }
return *p.WebApiUrlPrefix
}
var LinkedNotebook_Stack_DEFAULT string
func (p *LinkedNotebook) GetStack() string {
  if !p.IsSetStack() {
    return LinkedNotebook_Stack_DEFAULT
  }
return *p.Stack
}
var LinkedNotebook_BusinessId_DEFAULT int32
func (p *LinkedNotebook) GetBusinessId() int32 {
  if !p.IsSetBusinessId() {
    return LinkedNotebook_BusinessId_DEFAULT
  }
return *p.BusinessId
}
func (p *LinkedNotebook) IsSetShareName() bool {
  return p.ShareName != nil
}

func (p *LinkedNotebook) IsSetUsername() bool {
  return p.Username != nil
}

func (p *LinkedNotebook) IsSetShardId() bool {
  return p.ShardId != nil
}

func (p *LinkedNotebook) IsSetSharedNotebookGlobalId() bool {
  return p.SharedNotebookGlobalId != nil
}

func (p *LinkedNotebook) IsSetURI() bool {
  return p.URI != nil
}

func (p *LinkedNotebook) IsSetGUID() bool {
  return p.GUID != nil
}

func (p *LinkedNotebook) IsSetUpdateSequenceNum() bool {
  return p.UpdateSequenceNum != nil
}

func (p *LinkedNotebook) IsSetNoteStoreUrl() bool {
  return p.NoteStoreUrl != nil
}

func (p *LinkedNotebook) IsSetWebApiUrlPrefix() bool {
  return p.WebApiUrlPrefix != nil
}

func (p *LinkedNotebook) IsSetStack() bool {
  return p.Stack != nil
}

func (p *LinkedNotebook) IsSetBusinessId() bool {
  return p.BusinessId != nil
}

func (p *LinkedNotebook) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LinkedNotebook)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ShareName = &v
}
  return nil
}

func (p *LinkedNotebook)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Username = &v
}
  return nil
}

func (p *LinkedNotebook)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ShardId = &v
}
  return nil
}

func (p *LinkedNotebook)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SharedNotebookGlobalId = &v
}
  return nil
}

func (p *LinkedNotebook)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.URI = &v
}
  return nil
}

func (p *LinkedNotebook)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := GUID(v)
  p.GUID = &temp
}
  return nil
}

func (p *LinkedNotebook)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.UpdateSequenceNum = &v
}
  return nil
}

func (p *LinkedNotebook)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.NoteStoreUrl = &v
}
  return nil
}

func (p *LinkedNotebook)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.WebApiUrlPrefix = &v
}
  return nil
}

func (p *LinkedNotebook)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Stack = &v
}
  return nil
}

func (p *LinkedNotebook)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.BusinessId = &v
}
  return nil
}

func (p *LinkedNotebook) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LinkedNotebook"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LinkedNotebook) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetShareName() {
    if err := oprot.WriteFieldBegin("shareName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shareName: ", p), err) }
    if err := oprot.WriteString(string(*p.ShareName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.shareName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shareName: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUsername() {
    if err := oprot.WriteFieldBegin("username", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:username: ", p), err) }
    if err := oprot.WriteString(string(*p.Username)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.username (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:username: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardId() {
    if err := oprot.WriteFieldBegin("shardId", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardId: ", p), err) }
    if err := oprot.WriteString(string(*p.ShardId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.shardId (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardId: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSharedNotebookGlobalId() {
    if err := oprot.WriteFieldBegin("sharedNotebookGlobalId", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sharedNotebookGlobalId: ", p), err) }
    if err := oprot.WriteString(string(*p.SharedNotebookGlobalId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sharedNotebookGlobalId (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sharedNotebookGlobalId: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetURI() {
    if err := oprot.WriteFieldBegin("uri", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:uri: ", p), err) }
    if err := oprot.WriteString(string(*p.URI)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uri (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:uri: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetGUID() {
    if err := oprot.WriteFieldBegin("guid", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:guid: ", p), err) }
    if err := oprot.WriteString(string(*p.GUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.guid (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:guid: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateSequenceNum() {
    if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:updateSequenceNum: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:updateSequenceNum: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoteStoreUrl() {
    if err := oprot.WriteFieldBegin("noteStoreUrl", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:noteStoreUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.NoteStoreUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.noteStoreUrl (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:noteStoreUrl: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetWebApiUrlPrefix() {
    if err := oprot.WriteFieldBegin("webApiUrlPrefix", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:webApiUrlPrefix: ", p), err) }
    if err := oprot.WriteString(string(*p.WebApiUrlPrefix)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.webApiUrlPrefix (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:webApiUrlPrefix: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetStack() {
    if err := oprot.WriteFieldBegin("stack", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:stack: ", p), err) }
    if err := oprot.WriteString(string(*p.Stack)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stack (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:stack: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessId() {
    if err := oprot.WriteFieldBegin("businessId", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:businessId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.BusinessId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.businessId (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:businessId: ", p), err) }
  }
  return err
}

func (p *LinkedNotebook) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LinkedNotebook(%+v)", *p)
}

// A structure that describes a notebook or a user's relationship with
// a notebook. NotebookDescriptor is expected to remain a lighter-weight
// structure when compared to Notebook.
// <dl>
// <dt>guid</dt>
//   <dd>The unique identifier of the notebook.
//   </dd>
// 
// <dt>notebookDisplayName</dt>
//   <dd>A sequence of characters representing the name of the
//   notebook.
//   </dd>
// 
// <dt>contactName</dt>
//   <dd>The User.name value of the notebook's "contact".
//   </dd>
// 
// <dt>hasSharedNotebook</dt>
//   <dd>Whether a SharedNotebook record exists between the calling user and this
//   notebook.
//   </dd>
// 
// <dt>joinedUserCount</dt>
//   <dd>The number of users who have joined this notebook.
//   </dd>
// 
// </dl>
// 
// Attributes:
//  - GUID
//  - NotebookDisplayName
//  - ContactName
//  - HasSharedNotebook
//  - JoinedUserCount
type NotebookDescriptor struct {
  GUID *GUID `thrift:"guid,1" db:"guid" json:"guid,omitempty"`
  NotebookDisplayName *string `thrift:"notebookDisplayName,2" db:"notebookDisplayName" json:"notebookDisplayName,omitempty"`
  ContactName *string `thrift:"contactName,3" db:"contactName" json:"contactName,omitempty"`
  HasSharedNotebook *bool `thrift:"hasSharedNotebook,4" db:"hasSharedNotebook" json:"hasSharedNotebook,omitempty"`
  JoinedUserCount *int32 `thrift:"joinedUserCount,5" db:"joinedUserCount" json:"joinedUserCount,omitempty"`
}

func NewNotebookDescriptor() *NotebookDescriptor {
  return &NotebookDescriptor{}
}

var NotebookDescriptor_GUID_DEFAULT GUID
func (p *NotebookDescriptor) GetGUID() GUID {
  if !p.IsSetGUID() {
    return NotebookDescriptor_GUID_DEFAULT
  }
return *p.GUID
}
var NotebookDescriptor_NotebookDisplayName_DEFAULT string
func (p *NotebookDescriptor) GetNotebookDisplayName() string {
  if !p.IsSetNotebookDisplayName() {
    return NotebookDescriptor_NotebookDisplayName_DEFAULT
  }
return *p.NotebookDisplayName
}
var NotebookDescriptor_ContactName_DEFAULT string
func (p *NotebookDescriptor) GetContactName() string {
  if !p.IsSetContactName() {
    return NotebookDescriptor_ContactName_DEFAULT
  }
return *p.ContactName
}
var NotebookDescriptor_HasSharedNotebook_DEFAULT bool
func (p *NotebookDescriptor) GetHasSharedNotebook() bool {
  if !p.IsSetHasSharedNotebook() {
    return NotebookDescriptor_HasSharedNotebook_DEFAULT
  }
return *p.HasSharedNotebook
}
var NotebookDescriptor_JoinedUserCount_DEFAULT int32
func (p *NotebookDescriptor) GetJoinedUserCount() int32 {
  if !p.IsSetJoinedUserCount() {
    return NotebookDescriptor_JoinedUserCount_DEFAULT
  }
return *p.JoinedUserCount
}
func (p *NotebookDescriptor) IsSetGUID() bool {
  return p.GUID != nil
}

func (p *NotebookDescriptor) IsSetNotebookDisplayName() bool {
  return p.NotebookDisplayName != nil
}

func (p *NotebookDescriptor) IsSetContactName() bool {
  return p.ContactName != nil
}

func (p *NotebookDescriptor) IsSetHasSharedNotebook() bool {
  return p.HasSharedNotebook != nil
}

func (p *NotebookDescriptor) IsSetJoinedUserCount() bool {
  return p.JoinedUserCount != nil
}

func (p *NotebookDescriptor) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotebookDescriptor)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GUID(v)
  p.GUID = &temp
}
  return nil
}

func (p *NotebookDescriptor)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NotebookDisplayName = &v
}
  return nil
}

func (p *NotebookDescriptor)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ContactName = &v
}
  return nil
}

func (p *NotebookDescriptor)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HasSharedNotebook = &v
}
  return nil
}

func (p *NotebookDescriptor)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.JoinedUserCount = &v
}
  return nil
}

func (p *NotebookDescriptor) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NotebookDescriptor"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotebookDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetGUID() {
    if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err) }
    if err := oprot.WriteString(string(*p.GUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err) }
  }
  return err
}

func (p *NotebookDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotebookDisplayName() {
    if err := oprot.WriteFieldBegin("notebookDisplayName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notebookDisplayName: ", p), err) }
    if err := oprot.WriteString(string(*p.NotebookDisplayName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.notebookDisplayName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notebookDisplayName: ", p), err) }
  }
  return err
}

func (p *NotebookDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetContactName() {
    if err := oprot.WriteFieldBegin("contactName", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactName: ", p), err) }
    if err := oprot.WriteString(string(*p.ContactName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contactName (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactName: ", p), err) }
  }
  return err
}

func (p *NotebookDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetHasSharedNotebook() {
    if err := oprot.WriteFieldBegin("hasSharedNotebook", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hasSharedNotebook: ", p), err) }
    if err := oprot.WriteBool(bool(*p.HasSharedNotebook)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hasSharedNotebook (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hasSharedNotebook: ", p), err) }
  }
  return err
}

func (p *NotebookDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetJoinedUserCount() {
    if err := oprot.WriteFieldBegin("joinedUserCount", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:joinedUserCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.JoinedUserCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.joinedUserCount (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:joinedUserCount: ", p), err) }
  }
  return err
}

func (p *NotebookDescriptor) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotebookDescriptor(%+v)", *p)
}

// This structure represents profile information for a user in a business.
// 
// <dl>
// <dt>id</dt>
// <dd>The numeric identifier that uniquely identifies a user.</dd>
// 
// <dt>name</dt>
// <dd>The full name of the user.</dd>
// 
// <dt>email</dt>
// <dd>The user's business email address. If the user has not registered their business
//   email address, this field will be empty.
// </dd>
// 
// <dt>username</dt>
// <dd>The user's Evernote username.</dd>
// 
// <dt>attributes</dt>
// <dd>The user's business specific attributes.</dd>
// 
// <dt>joined</dt>
// <dd>The time when the user joined the business</dd>
// 
// <dt>photoLastUpdated</dt>
// <dd>The time when the user's profile photo was most recently updated</dd>
// 
// <dt>photoUrl</dt>
// <dd>A URL identifying a copy of the user's current profile photo</dd>
// 
// <dt>role</dt>
// <dd>The BusinessUserRole for the user</dd>
// 
// <dt>status</dt>
// <dd>The BusinessUserStatus for the user</dd>
// 
// </dl>
// 
// Attributes:
//  - ID
//  - Name
//  - Email
//  - Username
//  - Attributes
//  - Joined
//  - PhotoLastUpdated
//  - PhotoUrl
//  - Role
//  - Status
type UserProfile struct {
  ID *UserID `thrift:"id,1" db:"id" json:"id,omitempty"`
  Name *string `thrift:"name,2" db:"name" json:"name,omitempty"`
  Email *string `thrift:"email,3" db:"email" json:"email,omitempty"`
  Username *string `thrift:"username,4" db:"username" json:"username,omitempty"`
  Attributes *BusinessUserAttributes `thrift:"attributes,5" db:"attributes" json:"attributes,omitempty"`
  Joined *Timestamp `thrift:"joined,6" db:"joined" json:"joined,omitempty"`
  PhotoLastUpdated *Timestamp `thrift:"photoLastUpdated,7" db:"photoLastUpdated" json:"photoLastUpdated,omitempty"`
  PhotoUrl *string `thrift:"photoUrl,8" db:"photoUrl" json:"photoUrl,omitempty"`
  Role *BusinessUserRole `thrift:"role,9" db:"role" json:"role,omitempty"`
  Status *BusinessUserStatus `thrift:"status,10" db:"status" json:"status,omitempty"`
}

func NewUserProfile() *UserProfile {
  return &UserProfile{}
}

var UserProfile_ID_DEFAULT UserID
func (p *UserProfile) GetID() UserID {
  if !p.IsSetID() {
    return UserProfile_ID_DEFAULT
  }
return *p.ID
}
var UserProfile_Name_DEFAULT string
func (p *UserProfile) GetName() string {
  if !p.IsSetName() {
    return UserProfile_Name_DEFAULT
  }
return *p.Name
}
var UserProfile_Email_DEFAULT string
func (p *UserProfile) GetEmail() string {
  if !p.IsSetEmail() {
    return UserProfile_Email_DEFAULT
  }
return *p.Email
}
var UserProfile_Username_DEFAULT string
func (p *UserProfile) GetUsername() string {
  if !p.IsSetUsername() {
    return UserProfile_Username_DEFAULT
  }
return *p.Username
}
var UserProfile_Attributes_DEFAULT *BusinessUserAttributes
func (p *UserProfile) GetAttributes() *BusinessUserAttributes {
  if !p.IsSetAttributes() {
    return UserProfile_Attributes_DEFAULT
  }
return p.Attributes
}
var UserProfile_Joined_DEFAULT Timestamp
func (p *UserProfile) GetJoined() Timestamp {
  if !p.IsSetJoined() {
    return UserProfile_Joined_DEFAULT
  }
return *p.Joined
}
var UserProfile_PhotoLastUpdated_DEFAULT Timestamp
func (p *UserProfile) GetPhotoLastUpdated() Timestamp {
  if !p.IsSetPhotoLastUpdated() {
    return UserProfile_PhotoLastUpdated_DEFAULT
  }
return *p.PhotoLastUpdated
}
var UserProfile_PhotoUrl_DEFAULT string
func (p *UserProfile) GetPhotoUrl() string {
  if !p.IsSetPhotoUrl() {
    return UserProfile_PhotoUrl_DEFAULT
  }
return *p.PhotoUrl
}
var UserProfile_Role_DEFAULT BusinessUserRole
func (p *UserProfile) GetRole() BusinessUserRole {
  if !p.IsSetRole() {
    return UserProfile_Role_DEFAULT
  }
return *p.Role
}
var UserProfile_Status_DEFAULT BusinessUserStatus
func (p *UserProfile) GetStatus() BusinessUserStatus {
  if !p.IsSetStatus() {
    return UserProfile_Status_DEFAULT
  }
return *p.Status
}
func (p *UserProfile) IsSetID() bool {
  return p.ID != nil
}

func (p *UserProfile) IsSetName() bool {
  return p.Name != nil
}

func (p *UserProfile) IsSetEmail() bool {
  return p.Email != nil
}

func (p *UserProfile) IsSetUsername() bool {
  return p.Username != nil
}

func (p *UserProfile) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *UserProfile) IsSetJoined() bool {
  return p.Joined != nil
}

func (p *UserProfile) IsSetPhotoLastUpdated() bool {
  return p.PhotoLastUpdated != nil
}

func (p *UserProfile) IsSetPhotoUrl() bool {
  return p.PhotoUrl != nil
}

func (p *UserProfile) IsSetRole() bool {
  return p.Role != nil
}

func (p *UserProfile) IsSetStatus() bool {
  return p.Status != nil
}

func (p *UserProfile) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserProfile)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UserID(v)
  p.ID = &temp
}
  return nil
}

func (p *UserProfile)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *UserProfile)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = &v
}
  return nil
}

func (p *UserProfile)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Username = &v
}
  return nil
}

func (p *UserProfile)  ReadField5(iprot thrift.TProtocol) error {
  p.Attributes = &BusinessUserAttributes{}
  if err := p.Attributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attributes), err)
  }
  return nil
}

func (p *UserProfile)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Timestamp(v)
  p.Joined = &temp
}
  return nil
}

func (p *UserProfile)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Timestamp(v)
  p.PhotoLastUpdated = &temp
}
  return nil
}

func (p *UserProfile)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PhotoUrl = &v
}
  return nil
}

func (p *UserProfile)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := BusinessUserRole(v)
  p.Role = &temp
}
  return nil
}

func (p *UserProfile)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := BusinessUserStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *UserProfile) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserProfile) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmail() {
    if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
    if err := oprot.WriteString(string(*p.Email)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUsername() {
    if err := oprot.WriteFieldBegin("username", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err) }
    if err := oprot.WriteString(string(*p.Username)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err) }
    if err := p.Attributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetJoined() {
    if err := oprot.WriteFieldBegin("joined", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:joined: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Joined)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.joined (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:joined: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetPhotoLastUpdated() {
    if err := oprot.WriteFieldBegin("photoLastUpdated", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:photoLastUpdated: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PhotoLastUpdated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.photoLastUpdated (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:photoLastUpdated: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetPhotoUrl() {
    if err := oprot.WriteFieldBegin("photoUrl", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:photoUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.PhotoUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.photoUrl (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:photoUrl: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetRole() {
    if err := oprot.WriteFieldBegin("role", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:role: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Role)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.role (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:role: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:status: ", p), err) }
  }
  return err
}

func (p *UserProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserProfile(%+v)", *p)
}

// An external image that can be shown with a related content snippet,
// usually either a JPEG or PNG image. It is up to the client which image(s) are shown,
// depending on available screen real estate, resolution and aspect ratio.
// 
// <dl>
//  <dt>url</dt>
//    <dd>The external URL of the image</dd>
//  <dt>width</dt>
//    <dd>The width of the image, in pixels.</dd>
//  <dt>height</dt>
//    <dd>The height of the image, in pixels.</dd>
//  <dt>pixelRatio</dt>
//    <dd>the pixel ratio (usually either 1.0, 1.5 or 2.0)</dd>
//  <dt>fileSize</dt>
//    <dd>the size of the image file, in bytes</dd>
// </dl>
// 
// Attributes:
//  - URL
//  - Width
//  - Height
//  - PixelRatio
//  - FileSize
type RelatedContentImage struct {
  URL *string `thrift:"url,1" db:"url" json:"url,omitempty"`
  Width *int32 `thrift:"width,2" db:"width" json:"width,omitempty"`
  Height *int32 `thrift:"height,3" db:"height" json:"height,omitempty"`
  PixelRatio *float64 `thrift:"pixelRatio,4" db:"pixelRatio" json:"pixelRatio,omitempty"`
  FileSize *int32 `thrift:"fileSize,5" db:"fileSize" json:"fileSize,omitempty"`
}

func NewRelatedContentImage() *RelatedContentImage {
  return &RelatedContentImage{}
}

var RelatedContentImage_URL_DEFAULT string
func (p *RelatedContentImage) GetURL() string {
  if !p.IsSetURL() {
    return RelatedContentImage_URL_DEFAULT
  }
return *p.URL
}
var RelatedContentImage_Width_DEFAULT int32
func (p *RelatedContentImage) GetWidth() int32 {
  if !p.IsSetWidth() {
    return RelatedContentImage_Width_DEFAULT
  }
return *p.Width
}
var RelatedContentImage_Height_DEFAULT int32
func (p *RelatedContentImage) GetHeight() int32 {
  if !p.IsSetHeight() {
    return RelatedContentImage_Height_DEFAULT
  }
return *p.Height
}
var RelatedContentImage_PixelRatio_DEFAULT float64
func (p *RelatedContentImage) GetPixelRatio() float64 {
  if !p.IsSetPixelRatio() {
    return RelatedContentImage_PixelRatio_DEFAULT
  }
return *p.PixelRatio
}
var RelatedContentImage_FileSize_DEFAULT int32
func (p *RelatedContentImage) GetFileSize() int32 {
  if !p.IsSetFileSize() {
    return RelatedContentImage_FileSize_DEFAULT
  }
return *p.FileSize
}
func (p *RelatedContentImage) IsSetURL() bool {
  return p.URL != nil
}

func (p *RelatedContentImage) IsSetWidth() bool {
  return p.Width != nil
}

func (p *RelatedContentImage) IsSetHeight() bool {
  return p.Height != nil
}

func (p *RelatedContentImage) IsSetPixelRatio() bool {
  return p.PixelRatio != nil
}

func (p *RelatedContentImage) IsSetFileSize() bool {
  return p.FileSize != nil
}

func (p *RelatedContentImage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RelatedContentImage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *RelatedContentImage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Width = &v
}
  return nil
}

func (p *RelatedContentImage)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Height = &v
}
  return nil
}

func (p *RelatedContentImage)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PixelRatio = &v
}
  return nil
}

func (p *RelatedContentImage)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FileSize = &v
}
  return nil
}

func (p *RelatedContentImage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RelatedContentImage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RelatedContentImage) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err) }
    if err := oprot.WriteString(string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err) }
  }
  return err
}

func (p *RelatedContentImage) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetWidth() {
    if err := oprot.WriteFieldBegin("width", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:width: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Width)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.width (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:width: ", p), err) }
  }
  return err
}

func (p *RelatedContentImage) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeight() {
    if err := oprot.WriteFieldBegin("height", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:height: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Height)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.height (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:height: ", p), err) }
  }
  return err
}

func (p *RelatedContentImage) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPixelRatio() {
    if err := oprot.WriteFieldBegin("pixelRatio", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pixelRatio: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.PixelRatio)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pixelRatio (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pixelRatio: ", p), err) }
  }
  return err
}

func (p *RelatedContentImage) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetFileSize() {
    if err := oprot.WriteFieldBegin("fileSize", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fileSize: ", p), err) }
    if err := oprot.WriteI32(int32(*p.FileSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fileSize (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fileSize: ", p), err) }
  }
  return err
}

func (p *RelatedContentImage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RelatedContentImage(%+v)", *p)
}

// A structure identifying one snippet of related content (some information that is not
// part of an Evernote account but might still be relevant to the user).
// 
// <dl>
// 
// <dt>contentId</dt>
// <dd>An identifier that uniquely identifies the content.</dd>
// 
// <dt>title</dt>
// <dd>The main title to show.</dd>
// 
// <dt>url</dt>
// <dd>The URL the client can use to retrieve the content.</dd>
// 
// <dt>sourceId</dt>
// <dd>An identifier that uniquely identifies the source.</dd>
// 
// <dt>sourceUrl</dt>
// <dd>A URL the client can access to know more about the source.</dd>
// 
// <dt>sourceFaviconUrl</dt>
// <dd>The favicon URL of the source which the content belongs to.</dd>
// </dl>
// 
// <dt>sourceName</dt>
// <dd>A human-readable name of the source that provided this content.</dd>
// 
// <dt>date</dt>
// <dd>A timestamp telling the user about the recency of the content.</dd>
// 
// <dt>teaser</dt>
// <dd>A teaser text to show to the user; usually the first few sentences of the content,
//     excluding the title.</dd>
// 
// <dt>thumbnails</dt>
// <dd>A list of thumbnails the client can show in the snippet.</dd>
// 
// <dt>contentType</dt>
// <dd>The type of this related content.</dd>
// 
// <dt>accessType</dt>
// <dd>An indication of how this content can be accessed. This type influences the
//     semantics of the <code>url</code> parameter.</dd>
// 
// <dt>visibleUrl</dt>
// <dd>If set, the client should show this URL to the user, instead of the URL that was
//     used to retrieve the content. This URL should be used when opening the content
//     in an external browser window, or when sharing with another person.</dd>
// 
// <dt>clipUrl</dt>
// <dd>If set, the client should use this URL for clipping purposes, instead of the URL
//     that was used to retrieve the content. The clipUrl may directly point to an .enex
//     file, for example.</dd>
// 
// <dt>contact</dt>
// <dd>If set, the client may use this Contact for messaging purposes. This will typically
//     only be set for user profiles.</dd>
// 
// <dt>authors</dt>
// <dd>For News articles only. A list of names of the article authors, if available.</dd>
// 
// </dl>
// 
// Attributes:
//  - ContentId
//  - Title
//  - URL
//  - SourceId
//  - SourceUrl
//  - SourceFaviconUrl
//  - SourceName
//  - Date
//  - Teaser
//  - Thumbnails
//  - ContentType
//  - AccessType
//  - VisibleUrl
//  - ClipUrl
//  - Contact
//  - Authors
type RelatedContent struct {
  ContentId *string `thrift:"contentId,1" db:"contentId" json:"contentId,omitempty"`
  Title *string `thrift:"title,2" db:"title" json:"title,omitempty"`
  URL *string `thrift:"url,3" db:"url" json:"url,omitempty"`
  SourceId *string `thrift:"sourceId,4" db:"sourceId" json:"sourceId,omitempty"`
  SourceUrl *string `thrift:"sourceUrl,5" db:"sourceUrl" json:"sourceUrl,omitempty"`
  SourceFaviconUrl *string `thrift:"sourceFaviconUrl,6" db:"sourceFaviconUrl" json:"sourceFaviconUrl,omitempty"`
  SourceName *string `thrift:"sourceName,7" db:"sourceName" json:"sourceName,omitempty"`
  Date *Timestamp `thrift:"date,8" db:"date" json:"date,omitempty"`
  Teaser *string `thrift:"teaser,9" db:"teaser" json:"teaser,omitempty"`
  Thumbnails []*RelatedContentImage `thrift:"thumbnails,10" db:"thumbnails" json:"thumbnails,omitempty"`
  ContentType *RelatedContentType `thrift:"contentType,11" db:"contentType" json:"contentType,omitempty"`
  AccessType *RelatedContentAccess `thrift:"accessType,12" db:"accessType" json:"accessType,omitempty"`
  VisibleUrl *string `thrift:"visibleUrl,13" db:"visibleUrl" json:"visibleUrl,omitempty"`
  ClipUrl *string `thrift:"clipUrl,14" db:"clipUrl" json:"clipUrl,omitempty"`
  Contact *Contact `thrift:"contact,15" db:"contact" json:"contact,omitempty"`
  Authors []string `thrift:"authors,16" db:"authors" json:"authors,omitempty"`
}

func NewRelatedContent() *RelatedContent {
  return &RelatedContent{}
}

var RelatedContent_ContentId_DEFAULT string
func (p *RelatedContent) GetContentId() string {
  if !p.IsSetContentId() {
    return RelatedContent_ContentId_DEFAULT
  }
return *p.ContentId
}
var RelatedContent_Title_DEFAULT string
func (p *RelatedContent) GetTitle() string {
  if !p.IsSetTitle() {
    return RelatedContent_Title_DEFAULT
  }
return *p.Title
}
var RelatedContent_URL_DEFAULT string
func (p *RelatedContent) GetURL() string {
  if !p.IsSetURL() {
    return RelatedContent_URL_DEFAULT
  }
return *p.URL
}
var RelatedContent_SourceId_DEFAULT string
func (p *RelatedContent) GetSourceId() string {
  if !p.IsSetSourceId() {
    return RelatedContent_SourceId_DEFAULT
  }
return *p.SourceId
}
var RelatedContent_SourceUrl_DEFAULT string
func (p *RelatedContent) GetSourceUrl() string {
  if !p.IsSetSourceUrl() {
    return RelatedContent_SourceUrl_DEFAULT
  }
return *p.SourceUrl
}
var RelatedContent_SourceFaviconUrl_DEFAULT string
func (p *RelatedContent) GetSourceFaviconUrl() string {
  if !p.IsSetSourceFaviconUrl() {
    return RelatedContent_SourceFaviconUrl_DEFAULT
  }
return *p.SourceFaviconUrl
}
var RelatedContent_SourceName_DEFAULT string
func (p *RelatedContent) GetSourceName() string {
  if !p.IsSetSourceName() {
    return RelatedContent_SourceName_DEFAULT
  }
return *p.SourceName
}
var RelatedContent_Date_DEFAULT Timestamp
func (p *RelatedContent) GetDate() Timestamp {
  if !p.IsSetDate() {
    return RelatedContent_Date_DEFAULT
  }
return *p.Date
}
var RelatedContent_Teaser_DEFAULT string
func (p *RelatedContent) GetTeaser() string {
  if !p.IsSetTeaser() {
    return RelatedContent_Teaser_DEFAULT
  }
return *p.Teaser
}
var RelatedContent_Thumbnails_DEFAULT []*RelatedContentImage

func (p *RelatedContent) GetThumbnails() []*RelatedContentImage {
  return p.Thumbnails
}
var RelatedContent_ContentType_DEFAULT RelatedContentType
func (p *RelatedContent) GetContentType() RelatedContentType {
  if !p.IsSetContentType() {
    return RelatedContent_ContentType_DEFAULT
  }
return *p.ContentType
}
var RelatedContent_AccessType_DEFAULT RelatedContentAccess
func (p *RelatedContent) GetAccessType() RelatedContentAccess {
  if !p.IsSetAccessType() {
    return RelatedContent_AccessType_DEFAULT
  }
return *p.AccessType
}
var RelatedContent_VisibleUrl_DEFAULT string
func (p *RelatedContent) GetVisibleUrl() string {
  if !p.IsSetVisibleUrl() {
    return RelatedContent_VisibleUrl_DEFAULT
  }
return *p.VisibleUrl
}
var RelatedContent_ClipUrl_DEFAULT string
func (p *RelatedContent) GetClipUrl() string {
  if !p.IsSetClipUrl() {
    return RelatedContent_ClipUrl_DEFAULT
  }
return *p.ClipUrl
}
var RelatedContent_Contact_DEFAULT *Contact
func (p *RelatedContent) GetContact() *Contact {
  if !p.IsSetContact() {
    return RelatedContent_Contact_DEFAULT
  }
return p.Contact
}
var RelatedContent_Authors_DEFAULT []string

func (p *RelatedContent) GetAuthors() []string {
  return p.Authors
}
func (p *RelatedContent) IsSetContentId() bool {
  return p.ContentId != nil
}

func (p *RelatedContent) IsSetTitle() bool {
  return p.Title != nil
}

func (p *RelatedContent) IsSetURL() bool {
  return p.URL != nil
}

func (p *RelatedContent) IsSetSourceId() bool {
  return p.SourceId != nil
}

func (p *RelatedContent) IsSetSourceUrl() bool {
  return p.SourceUrl != nil
}

func (p *RelatedContent) IsSetSourceFaviconUrl() bool {
  return p.SourceFaviconUrl != nil
}

func (p *RelatedContent) IsSetSourceName() bool {
  return p.SourceName != nil
}

func (p *RelatedContent) IsSetDate() bool {
  return p.Date != nil
}

func (p *RelatedContent) IsSetTeaser() bool {
  return p.Teaser != nil
}

func (p *RelatedContent) IsSetThumbnails() bool {
  return p.Thumbnails != nil
}

func (p *RelatedContent) IsSetContentType() bool {
  return p.ContentType != nil
}

func (p *RelatedContent) IsSetAccessType() bool {
  return p.AccessType != nil
}

func (p *RelatedContent) IsSetVisibleUrl() bool {
  return p.VisibleUrl != nil
}

func (p *RelatedContent) IsSetClipUrl() bool {
  return p.ClipUrl != nil
}

func (p *RelatedContent) IsSetContact() bool {
  return p.Contact != nil
}

func (p *RelatedContent) IsSetAuthors() bool {
  return p.Authors != nil
}

func (p *RelatedContent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RelatedContent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ContentId = &v
}
  return nil
}

func (p *RelatedContent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = &v
}
  return nil
}

func (p *RelatedContent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *RelatedContent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SourceId = &v
}
  return nil
}

func (p *RelatedContent)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SourceUrl = &v
}
  return nil
}

func (p *RelatedContent)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SourceFaviconUrl = &v
}
  return nil
}

func (p *RelatedContent)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SourceName = &v
}
  return nil
}

func (p *RelatedContent)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Timestamp(v)
  p.Date = &temp
}
  return nil
}

func (p *RelatedContent)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Teaser = &v
}
  return nil
}

func (p *RelatedContent)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RelatedContentImage, 0, size)
  p.Thumbnails =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &RelatedContentImage{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.Thumbnails = append(p.Thumbnails, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RelatedContent)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := RelatedContentType(v)
  p.ContentType = &temp
}
  return nil
}

func (p *RelatedContent)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := RelatedContentAccess(v)
  p.AccessType = &temp
}
  return nil
}

func (p *RelatedContent)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.VisibleUrl = &v
}
  return nil
}

func (p *RelatedContent)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.ClipUrl = &v
}
  return nil
}

func (p *RelatedContent)  ReadField15(iprot thrift.TProtocol) error {
  p.Contact = &Contact{}
  if err := p.Contact.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *RelatedContent)  ReadField16(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Authors =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem14 = v
}
    p.Authors = append(p.Authors, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RelatedContent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RelatedContent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RelatedContent) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetContentId() {
    if err := oprot.WriteFieldBegin("contentId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contentId: ", p), err) }
    if err := oprot.WriteString(string(*p.ContentId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contentId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contentId: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTitle() {
    if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
    if err := oprot.WriteString(string(*p.Title)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin("url", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:url: ", p), err) }
    if err := oprot.WriteString(string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:url: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceId() {
    if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sourceId: ", p), err) }
    if err := oprot.WriteString(string(*p.SourceId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sourceId (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sourceId: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceUrl() {
    if err := oprot.WriteFieldBegin("sourceUrl", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sourceUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.SourceUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sourceUrl (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sourceUrl: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceFaviconUrl() {
    if err := oprot.WriteFieldBegin("sourceFaviconUrl", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sourceFaviconUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.SourceFaviconUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sourceFaviconUrl (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sourceFaviconUrl: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceName() {
    if err := oprot.WriteFieldBegin("sourceName", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sourceName: ", p), err) }
    if err := oprot.WriteString(string(*p.SourceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sourceName (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sourceName: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetDate() {
    if err := oprot.WriteFieldBegin("date", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:date: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Date)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.date (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:date: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetTeaser() {
    if err := oprot.WriteFieldBegin("teaser", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:teaser: ", p), err) }
    if err := oprot.WriteString(string(*p.Teaser)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.teaser (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:teaser: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetThumbnails() {
    if err := oprot.WriteFieldBegin("thumbnails", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:thumbnails: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Thumbnails)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Thumbnails {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:thumbnails: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetContentType() {
    if err := oprot.WriteFieldBegin("contentType", thrift.I32, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:contentType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ContentType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contentType (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:contentType: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetAccessType() {
    if err := oprot.WriteFieldBegin("accessType", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:accessType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.AccessType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.accessType (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:accessType: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetVisibleUrl() {
    if err := oprot.WriteFieldBegin("visibleUrl", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:visibleUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.VisibleUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.visibleUrl (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:visibleUrl: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetClipUrl() {
    if err := oprot.WriteFieldBegin("clipUrl", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:clipUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.ClipUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.clipUrl (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:clipUrl: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetContact() {
    if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contact: ", p), err) }
    if err := p.Contact.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contact: ", p), err) }
  }
  return err
}

func (p *RelatedContent) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthors() {
    if err := oprot.WriteFieldBegin("authors", thrift.LIST, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:authors: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Authors)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Authors {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:authors: ", p), err) }
  }
  return err
}

func (p *RelatedContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RelatedContent(%+v)", *p)
}

// A structure describing an invitation to join a business account.
// 
// <dl>
//   <dt>businessId</dt>
//     <dd>
//       The ID of the business to which the invitation grants access.
//     </dd>
// 
//   <dt>email</dt>
//     <dd>
//       The email address that was invited to join the business.
//     </dd>
// 
//   <dt>role</dt>
//     <dd>
//       The role to grant the user after the invitation is accepted.
//     </dd>
// 
//   <dt>status</dt>
//     <dd>
//       The status of the invitation.
//     </dd>
// 
//   <dt>requesterId</dt>
//     <dd>
//       For invitations that were initially requested by a non-admin member of the business,
//       this field specifies the user ID of the requestor. For all other invitations, this field
//       will be unset.
//     </dd>
//   <dt>fromWorkChat</dt>
//     <dd>
//       If this invitation was created implicitly via a WorkChat, this field
//       will be true.
//     </dd>
//   <dt>created</dt>
//     <dd>
//       The timestamp at which this invitation was created.
//     </dd>
//   <dt>mostRecentReminder</dt>
//     <dd>
//       The timestamp at which the most recent reminder was sent.
//     </dd>
// </dl>
// 
// Attributes:
//  - BusinessId
//  - Email
//  - Role
//  - Status
//  - RequesterId
//  - FromWorkChat
//  - Created
//  - MostRecentReminder
type BusinessInvitation struct {
  BusinessId *int32 `thrift:"businessId,1" db:"businessId" json:"businessId,omitempty"`
  Email *string `thrift:"email,2" db:"email" json:"email,omitempty"`
  Role *BusinessUserRole `thrift:"role,3" db:"role" json:"role,omitempty"`
  Status *BusinessInvitationStatus `thrift:"status,4" db:"status" json:"status,omitempty"`
  RequesterId *UserID `thrift:"requesterId,5" db:"requesterId" json:"requesterId,omitempty"`
  FromWorkChat *bool `thrift:"fromWorkChat,6" db:"fromWorkChat" json:"fromWorkChat,omitempty"`
  Created *Timestamp `thrift:"created,7" db:"created" json:"created,omitempty"`
  MostRecentReminder *Timestamp `thrift:"mostRecentReminder,8" db:"mostRecentReminder" json:"mostRecentReminder,omitempty"`
}

func NewBusinessInvitation() *BusinessInvitation {
  return &BusinessInvitation{}
}

var BusinessInvitation_BusinessId_DEFAULT int32
func (p *BusinessInvitation) GetBusinessId() int32 {
  if !p.IsSetBusinessId() {
    return BusinessInvitation_BusinessId_DEFAULT
  }
return *p.BusinessId
}
var BusinessInvitation_Email_DEFAULT string
func (p *BusinessInvitation) GetEmail() string {
  if !p.IsSetEmail() {
    return BusinessInvitation_Email_DEFAULT
  }
return *p.Email
}
var BusinessInvitation_Role_DEFAULT BusinessUserRole
func (p *BusinessInvitation) GetRole() BusinessUserRole {
  if !p.IsSetRole() {
    return BusinessInvitation_Role_DEFAULT
  }
return *p.Role
}
var BusinessInvitation_Status_DEFAULT BusinessInvitationStatus
func (p *BusinessInvitation) GetStatus() BusinessInvitationStatus {
  if !p.IsSetStatus() {
    return BusinessInvitation_Status_DEFAULT
  }
return *p.Status
}
var BusinessInvitation_RequesterId_DEFAULT UserID
func (p *BusinessInvitation) GetRequesterId() UserID {
  if !p.IsSetRequesterId() {
    return BusinessInvitation_RequesterId_DEFAULT
  }
return *p.RequesterId
}
var BusinessInvitation_FromWorkChat_DEFAULT bool
func (p *BusinessInvitation) GetFromWorkChat() bool {
  if !p.IsSetFromWorkChat() {
    return BusinessInvitation_FromWorkChat_DEFAULT
  }
return *p.FromWorkChat
}
var BusinessInvitation_Created_DEFAULT Timestamp
func (p *BusinessInvitation) GetCreated() Timestamp {
  if !p.IsSetCreated() {
    return BusinessInvitation_Created_DEFAULT
  }
return *p.Created
}
var BusinessInvitation_MostRecentReminder_DEFAULT Timestamp
func (p *BusinessInvitation) GetMostRecentReminder() Timestamp {
  if !p.IsSetMostRecentReminder() {
    return BusinessInvitation_MostRecentReminder_DEFAULT
  }
return *p.MostRecentReminder
}
func (p *BusinessInvitation) IsSetBusinessId() bool {
  return p.BusinessId != nil
}

func (p *BusinessInvitation) IsSetEmail() bool {
  return p.Email != nil
}

func (p *BusinessInvitation) IsSetRole() bool {
  return p.Role != nil
}

func (p *BusinessInvitation) IsSetStatus() bool {
  return p.Status != nil
}

func (p *BusinessInvitation) IsSetRequesterId() bool {
  return p.RequesterId != nil
}

func (p *BusinessInvitation) IsSetFromWorkChat() bool {
  return p.FromWorkChat != nil
}

func (p *BusinessInvitation) IsSetCreated() bool {
  return p.Created != nil
}

func (p *BusinessInvitation) IsSetMostRecentReminder() bool {
  return p.MostRecentReminder != nil
}

func (p *BusinessInvitation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BusinessInvitation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BusinessId = &v
}
  return nil
}

func (p *BusinessInvitation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = &v
}
  return nil
}

func (p *BusinessInvitation)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := BusinessUserRole(v)
  p.Role = &temp
}
  return nil
}

func (p *BusinessInvitation)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := BusinessInvitationStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *BusinessInvitation)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := UserID(v)
  p.RequesterId = &temp
}
  return nil
}

func (p *BusinessInvitation)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FromWorkChat = &v
}
  return nil
}

func (p *BusinessInvitation)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Timestamp(v)
  p.Created = &temp
}
  return nil
}

func (p *BusinessInvitation)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Timestamp(v)
  p.MostRecentReminder = &temp
}
  return nil
}

func (p *BusinessInvitation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BusinessInvitation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BusinessInvitation) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessId() {
    if err := oprot.WriteFieldBegin("businessId", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:businessId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.BusinessId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.businessId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:businessId: ", p), err) }
  }
  return err
}

func (p *BusinessInvitation) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmail() {
    if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
    if err := oprot.WriteString(string(*p.Email)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  }
  return err
}

func (p *BusinessInvitation) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRole() {
    if err := oprot.WriteFieldBegin("role", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Role)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.role (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role: ", p), err) }
  }
  return err
}

func (p *BusinessInvitation) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  }
  return err
}

func (p *BusinessInvitation) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequesterId() {
    if err := oprot.WriteFieldBegin("requesterId", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:requesterId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.RequesterId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requesterId (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:requesterId: ", p), err) }
  }
  return err
}

func (p *BusinessInvitation) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetFromWorkChat() {
    if err := oprot.WriteFieldBegin("fromWorkChat", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fromWorkChat: ", p), err) }
    if err := oprot.WriteBool(bool(*p.FromWorkChat)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fromWorkChat (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fromWorkChat: ", p), err) }
  }
  return err
}

func (p *BusinessInvitation) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreated() {
    if err := oprot.WriteFieldBegin("created", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:created: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Created)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.created (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:created: ", p), err) }
  }
  return err
}

func (p *BusinessInvitation) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetMostRecentReminder() {
    if err := oprot.WriteFieldBegin("mostRecentReminder", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:mostRecentReminder: ", p), err) }
    if err := oprot.WriteI64(int64(*p.MostRecentReminder)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.mostRecentReminder (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:mostRecentReminder: ", p), err) }
  }
  return err
}

func (p *BusinessInvitation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BusinessInvitation(%+v)", *p)
}

// A structure that holds user identifying information such as an
// email address, Evernote user ID, or an identifier from a 3rd party
// service.  An instance consists of a type and a value, where the
// value will be stored in one of the value fields depending upon the
// data type required for the identity type.
// 
// When used with shared notebook invitations, a UserIdentity
// identifies a particular person who may not (yet) have an Evernote
// UserID UserIdentity but who has (almost) unique access to the
// service endpoint described by the UserIdentity.  For example, an
// e-mail UserIdentity can identify the person who receives e-mail at
// the given address, and who can therefore read the share key that
// has a cryptographic signature from the Evernote service. With the
// share key, this person can supply their Evernote UserID via an
// authentication token to join the notebook
// (authenticateToSharedNotebook), at which time we have associated
// the e-mail UserIdentity with an Evernote UserID UserIdentity. Note
// that using shared notebook records, the relationship between
// Evernote UserIDs and e-mail addresses is many to many.
// 
// Note that the identifier may not directly identify a
// particular Evernote UserID UserIdentity without further
// verification.  For example, an e-mail UserIdentity may be
// associated with an invitation to join a notebook (via a shared
// notebook record), but until a user uses a share key, that was sent
// to that e-mail address, to join the notebook, we do not know an
// Evernote UserID UserIdentity ID to match the e-mail address.
// 
// Attributes:
//  - Type
//  - StringIdentifier
//  - LongIdentifier
type UserIdentity struct {
  Type *UserIdentityType `thrift:"type,1" db:"type" json:"type,omitempty"`
  StringIdentifier *string `thrift:"stringIdentifier,2" db:"stringIdentifier" json:"stringIdentifier,omitempty"`
  LongIdentifier *int64 `thrift:"longIdentifier,3" db:"longIdentifier" json:"longIdentifier,omitempty"`
}

func NewUserIdentity() *UserIdentity {
  return &UserIdentity{}
}

var UserIdentity_Type_DEFAULT UserIdentityType
func (p *UserIdentity) GetType() UserIdentityType {
  if !p.IsSetType() {
    return UserIdentity_Type_DEFAULT
  }
return *p.Type
}
var UserIdentity_StringIdentifier_DEFAULT string
func (p *UserIdentity) GetStringIdentifier() string {
  if !p.IsSetStringIdentifier() {
    return UserIdentity_StringIdentifier_DEFAULT
  }
return *p.StringIdentifier
}
var UserIdentity_LongIdentifier_DEFAULT int64
func (p *UserIdentity) GetLongIdentifier() int64 {
  if !p.IsSetLongIdentifier() {
    return UserIdentity_LongIdentifier_DEFAULT
  }
return *p.LongIdentifier
}
func (p *UserIdentity) IsSetType() bool {
  return p.Type != nil
}

func (p *UserIdentity) IsSetStringIdentifier() bool {
  return p.StringIdentifier != nil
}

func (p *UserIdentity) IsSetLongIdentifier() bool {
  return p.LongIdentifier != nil
}

func (p *UserIdentity) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserIdentity)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UserIdentityType(v)
  p.Type = &temp
}
  return nil
}

func (p *UserIdentity)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StringIdentifier = &v
}
  return nil
}

func (p *UserIdentity)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LongIdentifier = &v
}
  return nil
}

func (p *UserIdentity) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserIdentity"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserIdentity) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  }
  return err
}

func (p *UserIdentity) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStringIdentifier() {
    if err := oprot.WriteFieldBegin("stringIdentifier", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stringIdentifier: ", p), err) }
    if err := oprot.WriteString(string(*p.StringIdentifier)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringIdentifier (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stringIdentifier: ", p), err) }
  }
  return err
}

func (p *UserIdentity) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetLongIdentifier() {
    if err := oprot.WriteFieldBegin("longIdentifier", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:longIdentifier: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LongIdentifier)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.longIdentifier (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:longIdentifier: ", p), err) }
  }
  return err
}

func (p *UserIdentity) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserIdentity(%+v)", *p)
}

